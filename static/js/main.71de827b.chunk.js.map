{"version":3,"sources":["cmp/assets/person.svg","cmp/evtHelpers.js","cmp/SkylinkDemo.js","cmp/Header.js","App.js","registerServiceWorker.js","index.js","../../../src/adapter.js","../../../src/session-description/helpers/getSDPCommonSupports.js","../../../src/skylink-events/constants.js","../../../src/utils/skylinkEvent.js","../../../src/skylink-events/stream-events.js","../../../src/skylink-events/datachannel-events.js","../../../src/skylink-events/peer-handshake-events.js","../../../src/skylink-events/init-events.js","../../../src/skylink-events/candidate-events.js","../../../src/skylink-events/room-events.js","../../../src/skylink-events/peer-events.js","../../../src/skylink-events/socket-events.js","../../../src/skylink-events/media-events.js","../../../src/skylink-events/logger-events.js","../../../src/constants.js","../../../src/messages.js","../../../src/media-stream/helpers/parseMediaOptions.js","../../../src/peer-media/helpers/retrieveTransceiverMid.js","../../../src/peer-media/helpers/retrieveMediaState.js","../../../src/peer-media/helpers/retrieveMediaId.js","../../../src/peer-media/helpers/buildPeerMediaInfo.js","../../../src/peer-media/helpers/retrieveStreamIdOfTrack.js","../../../src/peer-media/helpers/retrieveTracks.js","../../../src/peer-media/helpers/updatePeerMediaInfo.js","../../../src/defaults/socketConfig.js","../../../src/defaults/index.js","../../../src/server-communication/signaling-server/helpers/createSocket.js","../../../src/server-communication/signaling-server/helpers/processSignalingMessage.js","../../../src/peer-data/helpers/getPeerInfo.js","../../../src/peer-data/helpers/getCurrentSessionInfo.js","../../../src/peer-data/helpers/getUserInfo.js","../../../src/peer-data/helpers/getUserData.js","../../../src/peer-data/helpers/setUserData.js","../../../src/media-stream/helpers/stopStream/prepStopUserMediaStreams.js","../../../src/media-stream/helpers/stopStream/tryStopStream.js","../../../src/peer-connection/helpers/removeSenderFromList.js","../../../src/media-stream/helpers/stopStream/prepStopScreenStream.js","../../../src/media-stream/helpers/stopStream/index.js","../../../src/media-stream/helpers/stopStream/prepStopStreams.js","../../../src/media-stream/helpers/stopStream/stopAddedStream.js","../../../src/media-stream/helpers/stopStream/removeTracks.js","../../../src/media-stream/helpers/stopStream/listenForEventAndDeleteMediaInfo.js","../../../src/media-stream/helpers/stopStream/stopAddedStreams.js","../../../src/media-stream/helpers/stopStream/updateMediaInfoMediaState.js","../../../src/media-stream/helpers/stopStream/deleteStreamFromState.js","../../../src/media-stream/helpers/stopStream/dispatchOnLocalStreamEnded.js","../../../src/media-stream/helpers/stopStream/initRefreshConnectionAndResolve.js","../../../src/media-stream/helpers/stopStream/stopReplacedStream.js","../../../src/media-stream/helpers/stopStream/stopReplacedStreams.js","../../../src/media-stream/index.js","../../../src/peer-data/helpers/getPeersStreams.js","../../../src/peer-data/helpers/getPeersDataChannels.js","../../../src/peer-data/helpers/getPeersCustomSettings.js","../../../src/peer-data/helpers/index.js","../../../src/peer-data/helpers/setGreatestPeerPriorityWeight.js","../../../src/peer-data/index.js","../../../src/server-communication/signaling-server/helpers/handleSocketClose.js","../../../src/server-communication/signaling-server/helpers/closeSocket.js","../../../configs/app.js","../../../src/skylink-stats/index.js","../../../src/skylink-stats/handleSignalingStats.js","../../../src/server-communication/signaling-server/callbacks/onconnect.js","../../../src/server-communication/signaling-server/callbacks/ondisconnect.js","../../../src/server-communication/signaling-server/callbacks/onerror.js","../../../src/server-communication/signaling-server/callbacks/onreconnectattempt.js","../../../src/server-communication/signaling-server/callbacks/onreconnectfailed.js","../../../src/server-communication/signaling-server/callbacks/onreconnecterror.js","../../../src/server-communication/signaling-server/callbacks/index.js","../../../src/server-communication/signaling-server/helpers/setSocketCallbacks.js","../../../src/server-communication/signaling-server/helpers/shouldBufferMessage.js","../../../src/server-communication/signaling-server/signaling-server-helpers.js","../../../src/features/messaging/encrypted-messaging/helpers/deleteEncryptSecrets.js","../../../src/features/messaging/encrypted-messaging/helpers/setEncryptSecrets.js","../../../src/features/messaging/encrypted-messaging/helpers/utils.js","../../../src/features/messaging/encrypted-messaging/helpers/setSelectedSecretId.js","../../../src/features/messaging/helpers/getMessageConfig.js","../../../src/features/messaging/helpers/sendMessageToSig.js","../../../src/features/messaging/helpers/dispatchOnIncomingMessage.js","../../../src/utils/skylinkError.js","../../../src/features/messaging/helpers/trySendMessage.js","../../../src/features/messaging/helpers/index.js","../../../src/features/messaging/encrypted-messaging/helpers/getMessageConfig.js","../../../src/features/messaging/encrypted-messaging/helpers/encryptMessage.js","../../../src/features/messaging/encrypted-messaging/helpers/tryDecryptMessage.js","../../../src/features/messaging/encrypted-messaging/helpers/index.js","../../../src/features/messaging/encrypted-messaging/index.js","../../../src/features/messaging/async-messaging/helpers/getMessageConfig.js","../../../src/features/messaging/async-messaging/helpers/parseDecryptedMessageData.js","../../../src/features/messaging/async-messaging/helpers/index.js","../../../src/features/messaging/async-messaging/index.js","../../../src/features/messaging/index.js","../../../src/server-communication/signaling-server/message-handler/handlers/userMessageHandler.js","../../../src/compatibility/dependencies.js","../../../src/compatibility/ice-connection.js","../../../src/compatibility/peer-connection.js","../../../src/ice-connection/helpers/setIceServers.js","../../../src/ice-connection/helpers/addIceCandidateFromQueue.js","../../../src/skylink-stats/handleIceCandidateStats.js","../../../src/ice-connection/helpers/addIceCandidate.js","../../../src/skylink-stats/handleIceGatheringStats.js","../../../src/ice-connection/helpers/onIceCandidate.js","../../../src/ice-connection/helpers/addIceCandidateToQueue.js","../../../src/ice-connection/helpers/index.js","../../../src/ice-connection/index.js","../../../src/server-communication/signaling-server/message-handler/handlers/inRoomHandler.js","../../../src/server-communication/signaling-server/parsers/enterAndWelcome.js","../../../src/server-communication/signaling-server/parsers/parseUserInfo.js","../../../src/server-communication/signaling-server/parsers/index.js","../../../src/server-communication/signaling-server/message-handler/handlers/commons/processPeer.js","../../../src/skylink-stats/handleNegotiationStats.js","../../../src/server-communication/signaling-server/message-handler/handlers/commons/enterAndWelcome.js","../../../src/server-communication/signaling-server/message-handler/handlers/enterHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/commons/offerAndAnswer.js","../../../src/server-communication/signaling-server/message-handler/handlers/offerHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/answerHandler.js","../../../src/peer-connection/helpers/renegotiateIfNeeded.js","../../../src/peer-connection/helpers/refresh-connection/buildRefreshConnectionResult.js","../../../src/peer-connection/helpers/refresh-connection/refreshConnection.js","../../../src/server-communication/signaling-server/message-handler/handlers/answerAckHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/welcomeHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/candidateHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/getPeerListHandler.js","../../../src/skylink-stats/handleSessionStats.js","../../../src/server-communication/signaling-server/message-handler/handlers/introduceErrorHandler.js","../../../src/skylink-stats/handleIceConnectionStats.js","../../../src/server-communication/signaling-server/message-handler/handlers/byeHandler.js","../../../src/server-communication/signaling-server/message-builder/builders/commons/offerAndAnswer.js","../../../src/peer-connection/helpers/createOffer.js","../../../src/peer-connection/helpers/peer-addition/createPeerConnection.js","../../../src/peer-connection/helpers/peer-addition/addPeer.js","../../../src/peer-connection/helpers/createAnswer.js","../../../src/peer-connection/helpers/data-channel/sendMessageToDataChannel.js","../../../src/peer-connection/helpers/data-channel/processDataChannelData.js","../../../src/peer-connection/helpers/data-channel/callbacks/onmessage.js","../../../src/skylink-stats/handleDataChannelStats.js","../../../src/peer-connection/helpers/data-channel/callbacks/onerror.js","../../../src/peer-connection/helpers/data-channel/callbacks/onopen.js","../../../src/peer-connection/helpers/data-channel/callbacks/onbufferedamountlow.js","../../../src/peer-connection/helpers/data-channel/callbacks/onclose.js","../../../src/skylink-events/data-transfer-events.js","../../../src/peer-connection/helpers/data-channel/callbacks/index.js","../../../src/peer-connection/helpers/data-channel/createDataChannel.js","../../../src/peer-connection/helpers/data-channel/sendP2PMessage.js","../../../src/peer-connection/helpers/getPeersInRoom.js","../../../src/peer-connection/helpers/signalingEndOfCandidates.js","../../../src/peer-connection/helpers/data-channel/getDataChannelBuffer.js","../../../src/peer-connection/helpers/data-channel/refreshDataChannel.js","../../../src/peer-connection/helpers/data-channel/closeDataChannel.js","../../../src/peer-connection/helpers/refresh-connection/sendRestartOfferMsg.js","../../../src/peer-connection/helpers/refresh-connection/restartPeerConnection.js","../../../src/peer-connection/helpers/refresh-connection/restartMCUConnection.js","../../../src/peer-connection/helpers/refresh-connection/refreshPeerConnection.js","../../../src/peer-connection/helpers/buildPeerInformations.js","../../../src/peer-connection/helpers/getConnectionStatus.js","../../../src/peer-connection/helpers/closePeerConnection.js","../../../src/peer-connection/helpers/updatePeerInformationsMediaStatus.js","../../../src/peer-connection/helpers/processNewSender.js","../../../src/peer-connection/helpers/index.js","../../../src/peer-connection/helpers/peer-addition/callbacks/ondatachannel.js","../../../src/peer-connection/helpers/peer-addition/callbacks/onicecandidate.js","../../../src/skylink-stats/handleBandwidthStats.js","../../../src/peer-connection/helpers/bandwidthAdjuster.js","../../../src/peer-connection/helpers/peer-addition/callbacks/oniceconnectionstatechange.js","../../../src/peer-connection/helpers/peer-addition/callbacks/onicegatheringstatechange.js","../../../src/peer-connection/helpers/peer-addition/callbacks/onsignalingstatechange.js","../../../src/peer-connection/helpers/peer-addition/callbacks/ontrack.js","../../../src/peer-connection/helpers/peer-addition/callbacks/onremovetrack.js","../../../src/peer-connection/helpers/peer-addition/callbacks/onsenderadded.js","../../../src/peer-connection/helpers/peer-addition/callbacks/index.js","../../../src/server-communication/signaling-server/message-handler/handlers/streamHandler.js","../../../src/skylink-stats/handleRecordingStats.js","../../../src/server-communication/signaling-server/message-handler/handlers/recordingHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/redirectHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/rtmpHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/setUserDataHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/helpers/dispatchMediaStateChangeEvents.js","../../../src/server-communication/signaling-server/message-handler/handlers/helpers/mediaInfoEventHelpers.js","../../../src/server-communication/signaling-server/message-handler/handlers/audioStateChangeHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/videoStateChangeHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/mediaInfoEventHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/helpers/muteEventHelpers.js","../../../src/server-communication/signaling-server/message-handler/handlers/helpers/shouldDropMessage.js","../../../src/server-communication/signaling-server/message-handler/handlers/index.js","../../../src/server-communication/signaling-server/message-handler/handlers/muteVideoEventHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/muteAudioEventHandler.js","../../../src/server-communication/signaling-server/message-handler/handlers/storedMessagesHandler.js","../../../src/server-communication/signaling-server/message-handler/index.js","../../../src/server-communication/signaling-server/message-builder/builders/index.js","../../../src/server-communication/signaling-server/message-builder/builders/joinRoomMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/enterRoomMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/welcomeMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/offerMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/answerMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/answerAckMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/candidateMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/setUserDataMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/getPeerListMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/restartOfferMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/streamMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/recordingMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/rtmpMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/byeMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/roomLockMeessage.js","../../../src/server-communication/signaling-server/message-builder/builders/mediaInfoEventMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/muteAudioEventMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/muteVideoEventMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/getStoredMessagesMessage.js","../../../src/server-communication/signaling-server/message-builder/builders/getUserMessages.js","../../../src/server-communication/signaling-server/message-builder/index.js","../../../src/server-communication/signaling-server/index.js","../../../src/peer-media/helpers/index.js","../../../src/peer-media/helpers/sendMediaInfoMsg.js","../../../src/peer-media/helpers/parseSDPForTransceiverMid.js","../../../src/peer-media/helpers/retrieveValueGivenTransceiverMid.js","../../../src/peer-media/helpers/retrieveFormattedMediaInfo.js","../../../src/peer-media/helpers/resetPeerMedia.js","../../../src/peer-media/helpers/populatePeerMediaInfo.js","../../../src/peer-media/helpers/processOnRemoveTrack.js","../../../src/peer-media/index.js","../../../src/media-stream/helpers/processStreamInState.js","../../../src/media-stream/helpers/parseStreamSettings.js","../../../src/media-stream/helpers/muteStreams.js","../../../src/media-stream/helpers/addLocalMediaStreams.js","../../../src/media-stream/helpers/replaceTrack.js","../../../src/media-stream/helpers/sendStream.js","../../../src/media-stream/helpers/getStreamSources.js","../../../src/media-stream/helpers/processNewStream.js","../../../src/media-stream/helpers/index.js","../../../src/media-stream/helpers/prepMediaAccessRequest.js","../../../src/media-stream/helpers/onRemoteTrackAdded.js","../../../src/media-stream/helpers/onStreamAccessError.js","../../../src/media-stream/helpers/getStreams.js","../../../src/media-stream/helpers/getScreenSources.js","../../../src/media-stream/helpers/updateStreamsMediaStatus.js","../../../src/media-stream/helpers/updateRemoteStreams.js","../../../src/media-stream/helpers/retrieveVideoStreams.js","../../../src/media-stream/helpers/splitAudioAndVideoStream.js","../../../src/media-stream/helpers/updateStreamsMutedSettings.js","../../../src/media-stream/helpers/onStreamAccessSuccess.js","../../../src/utils/helpers.js","../../../src/utils/skylinkEventManager.js","../../../src/logger/log-helpers.js","../../../src/logger/index.js","../../../src/session-description/helpers/setSDPCodecParams.js","../../../src/session-description/helpers/removeSDPUnknownAptRtx.js","../../../src/session-description/helpers/index.js","../../../src/session-description/helpers/getSDPCodecsSupport.js","../../../src/session-description/helpers/getCodecsSupport.js","../../../src/session-description/helpers/removeSDPFilteredCandidates.js","../../../src/session-description/helpers/setSDPCodec.js","../../../src/session-description/helpers/setSDPBitrate.js","../../../src/session-description/helpers/removeSDPCodecs.js","../../../src/session-description/helpers/removeSDPREMBPackets.js","../../../src/session-description/helpers/handleSDPConnectionSettings.js","../../../src/session-description/helpers/removeSDPFirefoxH264Pref.js","../../../src/session-description/helpers/renderSDPOutput.js","../../../src/session-description/helpers/getSDPICECandidates.js","../../../src/session-description/helpers/getSDPSelectedCodec.js","../../../src/session-description/helpers/setOriginalDTLSRole.js","../../../src/session-description/helpers/modifyDTLSRole.js","../../../src/session-description/helpers/getTransceiverMid.js","../../../src/session-description/index.js","../../../src/peer-connection/helpers/statistics/parsers/parseSelectedCandidatePair.js","../../../src/peer-connection/helpers/statistics/parsers/index.js","../../../src/peer-connection/helpers/statistics/parsers/parseCertificates.js","../../../src/peer-connection/helpers/statistics/parsers/tabulateStats.js","../../../src/peer-connection/helpers/statistics/parsers/parseAudio.js","../../../src/peer-connection/helpers/statistics/parsers/parseVideo.js","../../../src/peer-connection/helpers/statistics/parsers/parseMedia.js","../../../src/peer-connection/helpers/statistics/index.js","../../../src/features/screen-sharing/helpers/index.js","../../../src/features/screen-sharing/helpers/updateScreenStreamState.js","../../../src/peer-connection/index.js","../../../src/features/screen-sharing/index.js","../../../src/skylink-states.js","../../../src/peer-privileged/index.js","../../../src/server-communication/api-server/defaultOptions.js","../../../src/models/skylink-room.js","../../../src/models/skylink-user.js","../../../src/models/api-response.js","../../../src/server-communication/api-server/api-helpers.js","../../../src/server-communication/api-server/index.js","../../../src/room/leaveRoom.js","../../../src/skylink-stats/handleClientStats.js","../../../src/models/skylink-state.js","../../../src/room/joinRoom.js","../../../src/room/lockRoom.js","../../../src/room/index.js","../../../src/features/recording/recording.js","../../../src/features/recording/index.js","../../../src/features/rtmp/helpers/index.js","../../../src/features/rtmp/helpers/checkRTMPDependencies.js","../../../src/features/rtmp/helpers/registerRTMPEventListenersAndResolve.js","../../../src/features/rtmp/helpers/sendRTMPMessageViaSig.js","../../../src/features/rtmp/index.js","../../../src/public/index.js","../../../src/index.js"],"names":["module","exports","DemoLoggerHelper","this","skylinkEventManager","SkylinkEventManager","evts","candidate","SkylinkEvents","CANDIDATE_PROCESSING_STATE","CANDIDATE_GENERATION_STATE","CANDIDATES_GATHERED","ICE_CONNECTION_STATE","DATA_STREAM_STATE","DATA_TRANSFER_STATE","dataTransfer","dataChannel","ON_INCOMING_DATA","ON_INCOMING_DATA_REQUEST","ON_INCOMING_DATA_STREAM","ON_INCOMING_DATA_STREAM_STARTED","ON_INCOMING_DATA_STREAM_STOPPED","DATA_CHANNEL_STATE","ON_INCOMING_MESSAGE","media","MEDIA_ACCESS_FALLBACK","MEDIA_ACCESS_REQUIRED","MEDIA_ACCESS_STOPPED","MEDIA_ACCESS_SUCCESS","RECORDING_STATE","RTMP_STATE","LOCAL_MEDIA_MUTED","MEDIA_ACCESS_ERROR","peer","PEER_UPDATED","PEER_JOINED","PEER_LEFT","PEER_RESTART","SERVER_PEER_JOINED","SERVER_PEER_LEFT","SERVER_PEER_RESTART","GET_PEERS_STATE_CHANGE","PEER_CONNECTION_STATE","SESSION_DISCONNECT","GET_CONNECTION_STATUS_STATE_CHANGE","peerHandshake","HANDSHAKE_PROGRESS","INTRODUCE_STATE_CHANGE","room","ROOM_LOCK","BYE","socket","CHANNEL_OPEN","CHANNEL_CLOSE","CHANNEL_ERROR","CHANNEL_MESSAGE","CHANNEL_RETRY","SOCKET_ERROR","SYSTEM_ACTION","stream","ON_INCOMING_STREAM","ON_INCOMING_SCREEN_STREAM","STREAM_ENDED","STREAM_MUTED","registeredEvts","allEvts","forEach","evt","addEventListener","evtLogger","logToConsole","isAll","Object","keys","key","evtToToggle","evtType","removeEventListener","isAllEvtsRegistered","registerAllEvents","trigger","type","payload","error","console","log","detail","appConfig","appKey","defaultRoom","enableIceTrickle","enableDataChannel","forceSSL","SkylinkLogger","setLevel","logLevels","DEBUG","startDateTime","Date","toISOString","hash","CryptoJS","HmacSHA1","SkylinkDemo","encodeURIComponent","toString","enc","Base64","props","global","Skylink","skylink","demoLoggerHelper","initRegisterEvtLoggers","state","hongkong","username","newUsername","peerId","inRoom","showLoader","message","messages","title","remotePeers","selectedPeers","messageChannel","roomLocked","streamMuted","videoMuted","audioMuted","singapore","newyork","toggleEvt","bind","prefetchedStream","localFeedRef","React","createRef","joinRoom","leaveRoom","leaveAllRooms","lockRoom","userNameEntered","onIncomingStream","onPeerJoined","onRoomLocked","onIncomingMessage","messageEntered","sendMessage","getConnectionStatus","refreshDataChannel","refreshConnections","onPeerLeft","shareScreen","shareScreenReplace","onStreamEnded","getPeerCustomSettings","getUserMedia","stopStream","stopScreen","onPeerSelected","onMessageChannelSelected","startRecording","stopRecording","onSystemAction","muteStream","sendStream","prefetchGetUserMedia","onIncomingScreenStream","getPeersInRoom","getPeerInfo","getUserData","setUserData","getPeersStream","getPeersDataChannels","getPeersScreenshare","getRecordings","getStreamSources","getScreenSources","getPeers","toggleAudioVideo","updateUsername","onServerPeerLeft","handshakeProgress","registerOrUnregisterEvts","currentTarget","value","setState","location","locationState","assign","joinRoomOptions","audio","video","roomName","userData","showJoinRoomLoader","then","streams","undefined","localFeedElem","document","getElementById","getVideoTracks","length","window","attachMediaStream","catch","sendP2PMessage","JSON","parse","target","stringify","result","getPeersCustomSettings","peers","peerIds","i","refreshDatachannel","refreshConnection","refreshErrors","screenStream","streamList","getStreams","userMedia","removeFeed","roomNames","recordingId","unlockRoom","newStreamMutedState","muteStreams","err","srcObject","ev","isSelf","isScreensharing","localVideoElem","style","display","remoteVideoScreenElem","remoteVideoElem","active","remotePlaceholder","reason","SkylinkConstants","LOCKED","alert","isLocked","peerInfo","localVideoScreenElem","isReplace","isVideo","streamId","isAudio","rremoteAudioElem","eventDetail","push","peerIndex","indexOf","splice","checkbox","channel","selector","checked","panels","stateKey","buttonText","stateObject","map","segment","index","content","RoomSegment","fluid","className","padding","margin","disabled","color","onClick","primary","styled","defaultActiveIndex","exclusive","Component","HorizontalLine","borderBottomWidth","borderBottomStyle","borderBottomColor","opacity","UserFormFieldCmp","Row","Column","width","Field","onChange","placeholder","loading","paddingRight","verticalAlign","LocalFeedColumn","as","attached","Content","Messaging","autoPlay","muted","playsInline","id","src","icon","PublicMethodsForRoom","RemoteFeedColumn","columns","padded","alt","peerSelectorOptions","remotePeer","text","size","floated","marginTop","Header","Description","isPrivate","isDataChannel","toPrint","channelUsed","multiple","selection","options","radio","label","name","compact","celled","Container","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","URL","process","origin","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","AdapterJS","onwebrtcreadyDone","WebRTCPlugin","plugin","_onwebrtcreadies","webRTCReady","baseCallback","Error","callback","require","_defineMediaSourcePolyfill","maybeThroughWebRTCReady","onwebrtcready","webrtcDetectedBrowser","webrtcDetectedVersion","webrtcMinimumVersion","webrtcDetectedDCSupport","parseWebrtcDetectedBrowser","hasMatch","opr","addons","opera","userAgent","parseInt","webrtcDetectedType","chromiumVersion","parseFloat","split","documentMode","exec","StyleMedia","InstallTrigger","chrome","webstore","test","HTMLElement","safari","pushNotification","AppleWebKitBuild","isMobile","hasNativeImpl","majorVersion","minorVersion","nativeImplIsOverridable","forceSafariPlugin","addExtensions","reattachMediaStream","mozGetUserMedia","element","to","from","webkitGetUserMedia","createObjectURL","getSDPCommonSupports","targetMid","sessionDescription","roomKey","getSkylinkState","offer","currentCodecSupport","peerInformations","getInitOptions","beSilentOnParseLogs","sdp","h264","vp8","opus","peerAgent","agent","remoteCodecs","helpers","getSDPCodecsSupport","localCodecs","ac","hasOwnProperty","vc","CHANNEL_REOPEN","READY_STATE_CHANGE","LOGGED_ON_CONSOLE","MEDIA_INFO_DELETED","STORED_MESSAGES","ENCRYPT_SECRETS_UPDATED","PERSISTENT_MESSAGE_STATE","SkylinkEvent","streamEnded","onDataChannelStateChanged","readyStateChange","candidateProcessingState","candidateGenerationState","iceConnectionState","roomLock","peerUpdated","peerJoined","peerLeft","serverPeerLeft","getPeersStateChange","peerConnectionState","getConnectionStatusStateChange","socketError","mediaAccessFallback","mediaAccessStopped","mediaAccessSuccess","rtmpState","localMediaMuted","mediaAccessError","mediaInfoDeleted","loggedOnConsole","CONNECTING","OPEN","CLOSING","CLOSED","ERROR","CREATE_ERROR","BUFFERED_AMOUNT_LOW","SEND_MESSAGE_ERROR","DATA_CHANNEL_TYPE","MESSAGING","DATA","DATA_CHANNEL_MESSAGE_ERROR","MESSAGE","TRANSFER","DATA_TRANSFER_DATA_TYPE","BINARY_STRING","ARRAY_BUFFER","BLOB","STRING","DT_PROTOCOL_VERSION","DATA_TRANSFER_TYPE","UPLOAD","DOWNLOAD","DATA_TRANSFER_SESSION_TYPE","DATA_URL","UPLOAD_REQUEST","UPLOAD_STARTED","DOWNLOAD_STARTED","REJECTED","CANCEL","UPLOADING","DOWNLOADING","UPLOAD_COMPLETED","DOWNLOAD_COMPLETED","USER_REJECTED","USER_UPLOAD_REQUEST","START_ERROR","SENDING_STARTED","SENDING_STOPPED","RECEIVING_STARTED","RECEIVING_STOPPED","RECEIVED","SENT","NEW","GATHERING","COMPLETED","DROPPED","BUFFERED","PROCESSING","PROCESS_SUCCESS","PROCESS_ERROR","STARTING","CHECKING","CONNECTED","FAILED","TRICKLE_FAILED","DISCONNECTED","TURN_TRANSPORT","UDP","TCP","ANY","NONE","ALL","STABLE","HAVE_LOCAL_OFFER","HAVE_REMOTE_OFFER","GET_CONNECTION_STATUS_STATE","RETRIEVING","RETRIEVE_SUCCESS","RETRIEVE_ERROR","SERVER_PEER_TYPE","MCU","BUNDLE_POLICY","MAX_COMPAT","BALANCED","MAX_BUNDLE","RTCP_MUX_POLICY","REQUIRE","NEGOTIATE","PEER_CERTIFICATE","RSA","ECDSA","AUTO","ENTER","WELCOME","OFFER","ANSWER","ANSWER_ACK","GET_PEERS_STATE","ENQUIRED","DISPATCHED","INTRODUCE_STATE","INTRODUCING","WARNING","REJECT","SYSTEM_ACTION_REASON","CREDENTIALS_EXPIRED","CREDENTIALS_ERROR","DUPLICATED_LOGIN","ROOM_NOT_STARTED","EXPIRED","ROOM_LOCKED","FAST_MESSAGE","ROOM_CLOSING","ROOM_CLOSED","SERVER_ERROR","KEY_ERROR","INIT","LOADING","READY_STATE_CHANGE_ERROR","API_INVALID","API_DOMAIN_NOT_MATCH","API_CORS_DOMAIN_NOT_MATCH","API_CREDENTIALS_INVALID","API_CREDENTIALS_NOT_MATCH","API_INVALID_PARENT_KEY","API_NO_MEETING_RECORD_FOUND","API_OVER_SEAT_LIMIT","API_RETRIEVAL_FAILED","API_WRONG_ACCESS_DOMAIN","XML_HTTP_REQUEST_ERROR","XML_HTTP_NO_REPONSE_ERROR","NO_SOCKET_IO","NO_XMLHTTPREQUEST_SUPPORT","NO_WEBRTC_SUPPORT","NO_PATH","ADAPTER_NO_LOADED","PARSE_CODECS","REGIONAL_SERVER","APAC1","US1","PRIORITY_WEIGHT_SCHEME","ENFORCE_OFFERER","ENFORCE_ANSWERER","LOG_LEVEL","LOG","INFO","WARN","CONNECTION_FAILED","RECONNECTION_FAILED","CONNECTION_ABORTED","RECONNECTION_ABORTED","RECONNECTION_ATTEMPT","SOCKET_FALLBACK","NON_FALLBACK","FALLBACK_PORT","FALLBACK_SSL_PORT","LONG_POLLING","LONG_POLLING_SSL","SM_PROTOCOL_VERSION","VIDEO_CODEC","VP8","H264","VP9","AUDIO_CODEC","ISAC","OPUS","ILBC","G722","PCMU","PCMA","MEDIA_SOURCE","SCREEN","WINDOW","TAB","TAB_AUDIO","APPLICATION","BROWSER","CAMERA","VIDEO_RESOLUTION","QQVGA","height","HQVGA","QVGA","WQVGA","HVGA","VGA","WVGA","FWVGA","SVGA","DVGA","WSVGA","HD","HDPLUS","FHD","QHD","WQXGAPLUS","UHD","UHDPLUS","FUHD","QUHD","MEDIA_ACCESS_FALLBACK_STATE","FALLBACKING","FALLBACKED","START","STOP","LINK","CHUNK_FILE_SIZE","MOZ_CHUNK_FILE_SIZE","BINARY_FILE_SIZE","MOZ_BINARY_FILE_SIZE","CHUNK_DATAURL_SIZE","DC_PROTOCOL_TYPE","WRQ","ACK","SIG_MESSAGE_TYPE","JOIN_ROOM","IN_ROOM","CANDIDATE","REDIRECT","UPDATE_USER","PUBLIC_MESSAGE","PRIVATE_MESSAGE","STREAM","GROUP","GET_PEERS","PEER_LIST","INTRODUCE","INTRODUCE_ERROR","APPROACH","START_RECORDING","STOP_RECORDING","RECORDING","END_OF_CANDIDATES","START_SCREENSHARE","START_RTMP","STOP_RTMP","RTMP","MEDIA_INFO_EVENT","MUTE_VIDEO_EVENT","MUTE_AUDIO_EVENT","GET_STORED_MESSAGES","STREAM_STATUS","ENDED","REPLACED_STREAM_ENDED","SCREENSHARE_REPLACE_START","USER_MEDIA_REPLACE_START","GROUP_MESSAGE_LIST","VIDEO_QUALITY","HQ","SQ","LQ","SDP_SEMANTICS","PLAN_B","UNIFIED","MEDIA_STATUS","MUTED","ACTIVE","UNAVAILABLE","TAGS","SKYLINK_EVENT","SKYLINK_ERROR","STATS_MODULE","SESSION_DESCRIPTION","PEER_CONNECTION","CANDIDATE_HANDLER","DATA_CHANNEL","SIG_SERVER","PEER_MEDIA","PEER_INFORMATION","ROOM","MEDIA_STREAM","ASYNC_MESSAGING","ENCRYPTED_MESSAGING","MEDIA_TYPE","AUDIO_MIC","VIDEO_CAMERA","VIDEO_SCREEN","VIDEO_OTHER","AUDIO","VIDEO","TRACK_READY_STATE","LIVE","TRACK_KIND","MEDIA_STATE","STOPPED","MEDIA_INFO","PUBLISHER_ID","MEDIA_ID","TRANSCEIVER_MID","MEDIA_META_DATA","SIMULCAST","STREAM_ID","SDK_VERSION","SDK_NAME","WEB","ANDROID","IOS","CPP","API_VERSION","SIGNALING_VERSION","BROWSER_AGENT","CHROME","FIREFOX","SAFARI","REACT_NATIVE","PEER_TYPE","SOCKET_EVENTS","CONNECT","DISCONNECT","RECONNECT_ATTEMPT","RECONNECT_SUCCESS","RECONNECT_FAILED","RECONNECT_ERROR","SOCKET_TYPE","POLLING","WEBSOCKET","XHR_POLLING","JSONP_POLLING","STATES","SIGNALING","EVENTS","SkylinkEventsConstants","MESSAGES","ERRORS","NO_ADAPTER","NO_FETCH_SUPPORT","NO_APP_KEY","AUTH_CORS","AUTH_GENERAL","SOCKET_CREATE_FAILED","SOCKET_ERROR_ABORT","API_SUCCESS","CODEC_SUPPORT","SCREEN_SHARE","NOT_IN_ROOM","NO_PEERS","LEAVE_ROOM","DROPPING_HANGUP","LEAVE_ALL_ROOMS","SUCCESS","SENDING_BYE","DISCONNECT_SOCKET","REMOVE_STATE","ROOM_STATE","NOT_FOUND","LEFT","NO_ROOM_NAME","PEER_INFORMATIONS","NO_PEER_INFO","UPDATE_USER_DATA","OUTDATED_MSG","USER_DATA_NOT_JSON","NO_PEER_CONNECTION","REMOVE_TRACK","REPLACE_TRACK","REFRESH","end_of_candidates","end_of_candidate_failure","not_initialised","getstats_api_not_available","connection_status_no_pc","ice_connection_state","peer_connection_state","ice_gathering_state","refresh_start","refresh_failed","refresh_completed","refresh_peer_failed","refresh_peer_success","refresh_no_peer_connection","refresh_peerId_no_match","refresh_no_edge_support","refresh_not_supported","peerId_does_not_exist","PEER_PRIVILEGED","not_privileged","no_appkey","getPeerListFromServer","ICE_CANDIDATE","DROPPING_CANDIDATE","INVALID_CANDIDATE","VALID_CANDIDATE","FILTERED_CANDIDATE","FILTERING_FLAG_NOT_HONOURED","CANDIDATE_ADDED","ADDING_CANDIDATE","FAILED_ADDING_CANDIDATE","ADD_BUFFERED_CANDIDATE","ADD_CANDIDATE_TO_BUFFER","END_OF_CANDIDATES_SUCCESS","END_OF_CANDIDATES_FAILURE","ICE_GATHERING_STARTED","ICE_GATHERING_COMPLETED","CANDIDATE_GENERATED","DROP_EOC","ICE_TRICKLE_DISABLED","SENDING_CANDIDATE","NO_SDP","parsing_media_ssrc","reviving_dataChannel","refresh_error","closed","onclose_error","NO_REMOTE_DATA_CHANNEL","FAILED_CLOSING","NO_SESSIONS","NEGOTIATION_PROGRESS","SET_LOCAL_DESCRIPTION","SET_REMOTE_DESCRIPTION","APPLYING_BUFFERED_REMOTE_OFFER","FAILED_SET_LOCAL_DESCRIPTION","FAILED_SET_REMOTE_DESCRIPTION","FAILED_SET_REMOTE_ANSWER","FAILED_RENEGOTIATION","NOT_STABLE","PROCESSING_EXISTING_SDP","OFFER_TIEBREAKER","NO_LOCAL_BUFFERED_OFFER","ADDING_REMOTE_OFFER_TO_BUFFER","MESSAGE_ADDED_TO_BUFFER","ENTER_LISTENER","BUFFERED_MESSAGES_SENT","BUFFERED_MESSAGES_DROPPED","DROPPING_MUTE_EVENT","BUFFER_NOT_NEEDED","ABORTING_OFFER","BROADCAST_MESSAGE","RECEIVED_MESSAGE","PERSISTENCE","SEND_MESSAGE","NOT_PERSISTED","IS_PERSISTENT_CONFIG","FAILED_SETTING_PERSISTENCE","INVALID_TYPE","PERSISTENT_MESSAGE_FEATURE_NOT_ENABLED","ENCRYPTION","DELETE_ALL","FAILED_DECRYPTING_MESSAGE","ENCRYPT_SECRET","INVALID_SECRETS","SET_SELECTED_SECRET","DELETE_ENCRYPT_SECRETS","SET_ENCRYPT_SECRET","SECRET_ID_NOT_FOUND","NO_SECRET_OR_SECRET_ID","SECRET_ID_NOT_UNIQUE","SECRET_ID_NOT_SELECTED","SECRET_ID_NOT_PROVIDED","SECRETS_NOT_PROVIDED","DROPPING_MESSAGE","FAILED_SENDING_MESSAGE","UPDATE_SUCCESS","NO_ASSOCIATED_STREAM_ID","FAILED_PROCESSING_MEDIA_INFO_EVENT","FAILED_UPDATING","FAILED_PROCESSING_PEER_MEDIA","FAILED_UPDATING_TRANSCEIVER_MID","FAILED_SETTING_PEER_MEDIA_INFO","READ_ONLY_VALUE","INVALID_MEDIA_TYPE","VIDEO_STATE_CHANGE","AUDIO_STATE_CHANGE","VIDEO_SCREEN_STATE_CHANGE","STOP_SETTINGS","STOP_SUCCESS","REMOTE_TRACK_REMOVED","START_FALLBACK","NO_OPTIONS","DEFAULT_OPTIONS","FALLBACK_SUCCESS","START_SCREEN_SUCCESS","STOP_SCREEN_SUCCESS","UPDATE_MUTED_SETTINGS","UPDATE_MEDIA_STATUS","AUDIO_MUTED","VIDEO_MUTED","STOP_SCREEN","START_SCREEN","STOP_ADDED_STREAM","STOP_REPLACED_STREAM","STOP_USER_MEDIA","STOP_AUDIO_TRACK","STOP_VIDEO_TRACK","STOP_MEDIA_TRACK","STOP_SCREEN_TRACK","DROPPING_ONREMOVETRACK","NO_STREAM","INVALID_STREAM_ID","NO_USER_MEDIA_STREAMS","INVALID_STREAM_ID_TYPE","NO_STREAM_ID","PEER_SCREEN_ACTIVE","REPLACE_SCREEN","FALLBACK","INVALID_GUM_OPTIONS","GET_USER_MEDIA","INVALID_MUTE_OPTIONS","NO_STREAMS_MUTED","SEND_STREAM","INVALID_MEDIA_STREAM_ARRAY","ACTIVE_STREAMS","NOT_INITIATED","STATS_DISCARDED","RETRIEVE_STATS_FAILED","POST_FAILED","PARSE_FAILED","STATS_IS_NULL","INVALID_TRACK_KIND","HANDLE_ICE_GATHERING_STATS","PROCESS_FAILED","HANDLE_NEGOTIATION_STATS","create","create_error","set","set_error","dropped","answer","HANDLE_DATA_CHANNEL_STATS","open","reconnecting","HANDLE_CONNECTION_STATS","HANDLE_BANDWIDTH_STATS","RETRIEVE_FAILED","NO_STATE","HANDLE_ICE_CONNECTION_STATS","SEND_FAILED","HANDLE_RECORDING_STATS","REQUEST_START","REQUEST_STOP","ERROR_NO_MCU_START","ERROR_NO_MCU_STOP","ERROR_START_ACTIVE","ERROR_STOP_ACTIVE","ERROR_MIN_STOP","MCU_RECORDING_ERROR","START_SUCCESS","START_FAILED","STOP_FAILED","MIN_RECORDING_TIME_REACHED","MCU_NOT_CONNECTED","EXISTING_RECORDING_IN_PROGRESS","NO_RECORDING_IN_PROGRESS","MIN_RECORDING_TIME","STOP_ABRUPT","SESSION_EMPTY","start_no_mcu","stop_no_mcu","start_no_stream_id","start_no_endpoint","starting_rtmp","stopping_rtmp","message_received_from_sig","stop_session_empty","stopped_success","started_success","error_session_empty","error_session","error_Session_abrupt","PERSISTENT_MESSAGE","NO_DEPENDENCY","UTILS","INVALID_BROWSER_AGENT","LOGGER","EVENT_DISPATCHED","EVENT_REGISTERED","EVENT_UNREGISTERED","EVENT_DISPATCH_ERROR","EVENT_REGISTER_ERROR","EVENT_UNREGISTER_ERROR","LOGS_NOT_STORED","LOGS_CLEARED","INVALID_CB","parseMediaOptions","roomState","mediaOptions","streamsBandwidthSettings","googleX","bAS","publishOnly","sdpSettings","connection","data","direction","send","receive","voiceActivityDetection","peerConnectionConfig","bundlePolicy","rtcpMuxPolicy","iceCandidatePoolSize","certificate","disableBundle","bandwidthAdjuster","bandwidth","googleXBandwidth","min","max","peerConnection","bpProp","rmpProp","pcProp","autoBandwidthAdjustment","interval","limitAtPercentage","useUploadBwOnly","retrieveTransceiverMid","track","peerConnections","RTCPeerConnections","values","transceiverMid","p","transceivers","getTransceivers","t","sender","mid","retrieveMediaState","readyState","retrieveMediaId","trackKind","prefix","buildPeerMediaInfo","mediaType","publisherId","mediaId","kind","mediaState","trackId","mediaMetaData","simulcast","isMatchedTrack","streamTrack","retrieveStreamIdOfTrack","streamObjs","tracks","getTracks","j","retrieveTracks","streamObj","doUpdate","dispatchEvent","mediaInfo","updatedState","peerMedias","logger","setSkylinkState","dispatchMediaInfoMsg","user","sid","sendMediaInfoMsg","updatePeerMediaInfo","msg","SOCKET_DEFAULTS","RECONNECTION_ATTEMPTS","RECONNECTION_DELAY_MAX","RECONNECTION_DELAY","RECONNECTION_FINAL_ATTEMPTS","CONFIGS","SOCKET","forceNew","reconnection","timeout","socketTimeout","path","socketServerPath","reconnectionAttempts","reconnectionDelayMax","reconnectionDelay","transports","toLowerCase","query","Skylink_SDK_type","Skylink_SDK_version","Skylink_API_version","extraHeaders","DEFAULTS","retrieveConfig","createSocket","params","skylinkState","initOptions","config","socketServer","socketPorts","socketConfig","ports","isAObj","Array","isArray","signalingServerProtocol","signalingServerPort","isFirstConnectionAttempt","isLastPort","isAString","socketType","socketSession","finalAttempts","fallbackType","url","signalingServer","protocol","now","getSignalingServerUrl","io","processSignalingMessage","messageHandler","inRoomHandler","enterRoomHandler","offerHandler","welcomeHandler","answerHandler","answerAckHandler","candidateHandler","getPeerListHandler","introduceError","byeHandler","streamHandler","recordingHandler","redirectHandler","rtmpHandler","setUserDataHandler","mediaInfoEventHandler","userMessageHandler","storedMessagesHandler","muteAudioEventHandler","muteVideoEventHandler","isUser","PeerData","getCurrentSessionInfo","clone","settings","dataChannels","main","connected","peerConnStatus","init","receiveOnly","hasMCU","logNoRoomState","codecParams","streamsMediaStatus","peerPriorityWeight","enableIceRestart","SMProtocolVersion","DTProtocolVersion","mediaStatus","version","os","platform","pluginVersion","VERSION","SDKVersion","priorityWeight","screenshare","streamIds","maxBandwidth","isABoolean","stereo","usedtx","isANumber","maxplaybackrate","useinbandfec","customSettings","frameRate","facingMode","resolution","getUserInfo","userInfo","peerUserData","updatedUserData","SkylinkSignalingServer","hasStreamBeenReplaced","stoppedStream","some","isReplaced","stopMediaTracks","stop","removeSenderFromList","indexToRemove","currentRTCRTPSenders","listOfSenders","stopStreamHelpers","prepStopStreams","roomId","fromLeaveRoom","Promise","resolve","reject","prepStopScreenStream","rej","prepStopUserMediaStreams","filteredStreams","replacedStreams","addedStreams","userMediaStreamId","filterUserMediaStreams","stopReplacedStream","stopAddedStream","stopAddedStreams","stopReplacedStreams","initRefreshConnectionAndResolve","tryStopStream","removeTracks","updateMediaInfoMediaState","deleteStreamFromState","listenForEventAndDeleteMediaInfo","dispatchOnLocalStreamEnded","ScreenSharing","deleteScreensharingInstance","getAudioTracks","connectionState","senders","getSenders","y","removeTrack","executeOfferCallback","s","PeerMedia","hasAudioTrack","deleteUnavailableMedia","executeMediaDeletedCallback","setMediaStateToUnavailable","streamIdToRemove","streamsMutedSettings","isEmptyObj","hasVideoTrack","isEmptyArray","dispatchPeerUpdatedEvent","PeerConnection","sendStreamReplaceEndedMsg","MediaStream","updatedRoomState","useExactConstraints","prepMediaAccessRequest","addLocalMediaStreams","currentRoomState","onRemoteTrackAdded","updateRemoteStreams","streamOptions","audioSettings","parseStreamSettings","videoSettings","onStreamAccessSuccess","hasPeerConnections","maps","getSelfStreams","getSelfScreen","hasPeerDataChannels","usePeerId","signalingState","peerCustomConfigs","call","peerCustomConfigBandwidth","peerCustomConfigGoogleXBandwidth","getPeersStreams","includeSelf","listOfPeersStreams","selfStreams","selfScreen","listOfPeers","retrieveRemoteStreams","listOfPeersDataChannels","channelProp","channelName","channelType","transferId","peerChannel","getDataChannelBuffer","currentTransferId","currentStreamId","customSettingsList","hasPeers","setGreatestPeerPriorityWeight","informationList","entries","maxPeerPriority","handleSocketClose","channelOpen","sessionDisconnect","closeSocket","signaling","disconnect","apiBase","stats","endPoints","client","session","auth","iceConnection","iceCandidate","iceGathering","negotiation","recording","statsBase","SkylinkStats","endpoints","stats_buffer","bufferTimeout","endpoint","client_id","enableStatsGathering","method","mode","body","operation","cloneData","setInterval","operations","postStats","HandleSignalingStats","model","timestamp","room_id","user_id","signaling_url","signaling_transport","attempts","clientId","onConnection","onDisconnect","isChannelOpen","onError","onReconnectAttempt","attempt","currentAttempt","updateAttempts","onReconnectFailed","connect","errorCode","onReconnectError","callbacks","setSocketCallbacks","on","onMessage","initAndTrue","executeCallbackAndRemoveListener","rid","currentBufferedMsgs","socketMessageQueue","bufferMessage","sendBufferedMsg","shouldBufferMessage","isNull","isNegotiationTypeMsg","unshift","deleteEncryptSecrets","encryptSecrets","selectedSecretId","secretId","updatedData","setSelectedSecretId","setEncryptSecret","secret","updatedEncryptSecrets","utils","isValidString","isValidSecret","isExisting","isValidSecretId","encryptionParam","filter","isEmptyString","hasCrypto","canEncrypt","canDecrypt","getMessageConfig","targetPeerId","sendMessageToSig","encryptedMessage","sendUserMessage","messagingHelpers","dispatchOnIncomingMessage","messageContent","senderPeerId","timeStamp","generateISOStringTimesStamp","SkylinkError","errorLog","trySendMessage","throwError","isPersistent","encryptHelpers","encryptMessage","decrypt","decipher","AES","Utf8","cipher","encrypt","tryDecryptMessage","decryptedMessage","instance","EncryptedMessaging","dispatchEncryptSecretEvent","encryptionSecretsUpdated","decryptMessage","getRoomStateByName","getParamValidity","parseDecryptedMessageData","parseUNIXTimeStamp","AsyncMessaging","hasPersistentMessage","persistentMessageState","isPublicMessage","encryptedMessaging","getStoredMessages","messageData","decryptStoredMessages","asyncHelpers","storedMessages","asyncMessaging","canPersist","isPublic","processMessage","validateDepencies","dependencies","fulfilled","readyStateChangeErrorCode","getConnectionPortsAndProtocolByBrowser","forceTURNSSL","CONSTANTS","serverConfig","connectionConfig","tcp","iceServerPorts","udp","both","iceServerProtocol","TURN","updateRemoveStream","defaultIceServerPorts","STUN","TEMASYS","DEFAULT_TURN_SERVER","userIceServer","iceServer","urls","iceServers","credential","setIceServers","servers","iceServerName","enableTURNServer","TURNServerTransport","enableSTUNServer","usePublicSTUN","server","urlParts","connectionPortsAndProtocolByBrowser","connectionPortsByTurnTransport","concat","getConnectionPortsByTurnTransport","tcpPort","udpPort","bothPort","addIceCandidateFromQueue","peerCandidatesQueue","constants","candidateArray","nativeCandidate","candidateId","candidateType","IceConnection","addIceCandidate","isLowerThanVersion","ex","signalingEndOfCandidates","HandleIceCandidateStats","peer_id","is_remote","candidate_id","candidate_sdp_mid","candidate_sdp_mindex","candidate_candidate","sdpMid","sdpMLineIndex","addToStatsBuffer","manageStatsBuffer","handleIceCandidateStats","addIceCandidateFailure","remoteDescription","addIceCandidateSuccess","HandleIceGatheringStats","roomkey","isRemote","handleIceGatheringStats","onIceCandidate","currentRoom","SignalingServer","gatheredCandidates","no_peer_connection","gathering","gathered","localDescription","filterCandidatesType","forceTURN","sending","host","srflx","relay","receiving","sendCandidate","setTimeout","noOfExpectedCandidates","addIceCandidateToQueue","rtcIceConnectionEvent","pc_config","tieBreaker","priorityWeightScheme","weightAppendValue","peerConfig","updatePeerMediaWithUserSid","mediaStream","enterRoom","enterAndWelcome","parsedMsg","weight","temasysPluginVersion","parentId","parts","majorVer","join","parseVersion","parsers","parseUserInfo","peersInRoom","info","setPeerInformations","buildPeerInformations","processPeer","cert","caller","isNewPeer","hasScreenshare","peerBrowser","addPeer","serverPeerJoined","serverPeerType","peerMessagesStamps","CALLERS","hasWelcome","userId","peersInRoomIndex","PEER_ID","peerUserInfo","HandleNegotiationStats","sdp_type","sdp_sdp","sdpOrMessage","handleNegotationStats","checkStampBeforeSendingWelcome","getNextNegotiationStep","handleNegotiationStats","parseAndSendWelcome","RTCPeerConnection","callerState","logStats","peerParams","generateCertificate","certOptions","namedCurve","modulusLength","publicExponent","Uint8Array","enterHandler","handleSetOfferAndAnswerSuccess","description","bufferedLocalOffer","msgType","setOffer","setAnswer","handleSetOfferAndAnswerFailure","setLocalDescription","processingLocalSDP","onLocalDescriptionSetSuccess","onLocalDescriptionSetFailure","negotiating","setRemoteDescription","processingRemoteSDP","mungedSessionDescription","SessionDescription","setSDPBitrate","mungeSDP","sendAnswerAck","success","answerAck","onRemoteDescriptionSetSuccess","hasRestart","closeDataChannel","onRemoteDescriptionSetFailure","parseAndSetRemoteDescription","mediaInfoList","resend","isRestart","selfWeight","messageWeight","bufferedRemoteOffers","canProceed","updatedUserInfo","updateState","setPeerMediaInfo","replace","renegotiateIfNeeded","pcSenders","senderGetStatsPromises","savedSenders","isRenegoNeeded","pcSender","getStats","transmittingSenders","all","reslovedResults","reports","senderIndex","report","ssrc","transmittingSendersKeys","senderMatchedCount","tKey","tSender","sIndex","buildRefreshConnectionResult","doIceRestart","errors","peersCustomSettings","iceRestart","buildResult","refreshSettings","buildPeerRefreshSettings","buildPeerRefreshErrors","peerRefreshError","mcuUseRenegoRestart","bwOptions","filterParams","self","refreshPeerConnection","results","mResults","finally","offerMessage","shift","hasAppliedBufferedRemoteOffer","shouldRenegotiate","peerEndOfCandidatesCounter","RTCIceCandidate","tag","foundation","len","hasSet","candidateProcessingStateEventDetail","peerList","privilegePeerId","HandleSessionStats","contents","introduceErrorHandler","introduceStateChange","privilegedPeerId","receivingPeerId","sendingPeerId","HandleIceConnectionStats","local_candidate","remote_candidate","retrieveStatistics","beSilentOnStatsLogs","dirType","selectedCandidatePair","modelCandidate","ip_address","ipAddress","port_number","portNumber","candidate_type","transport","priority","network_type","networkType","closePeerConnection","close","isAgent","isVersion","signalingStateClosed","processPeerConnectionState","iceConnectionStateClosed","processIceConnectionState","triggerPeerLeftEventAndChangeState","roomStateObj","isPeerConnected","checksIfHealthTimerExists","remoteStreams","sdpSessions","peerStats","peerBandwidth","clearPeerInfo","tryCloseDataChannel","getCommonMessage","restartOfferMsg","sd","setOriginalDTLSRole","modifyDTLSRole","retrieveMediaInfoForOfferAnswer","currentMessageKeys","keyIndex","onOfferCreated","getCommonOfferAnswerMessage","onOfferFailed","createOffer","offerConstraints","offerToReceiveAudio","offerToReceiveVideo","addTransceiver","createDataChannel","createAsMessagingChannel","hasMainChannel","endOfCandidates","sdpConstraints","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","createPeerConnection","hasScreenShare","constraints","iceTransportPolicy","optional","DtlsSrtpKeyAgreement","googIPv6","certificates","msRTCPeerConnection","rtcPeerConnection","useEdgeWebRTC","callbackExtraParams","hasStream","firefoxStreamId","localStream","localStreamId","local","remote","removeStream","ontrack","ondatachannel","onicecandidate","oniceconnectionstatechange","onsignalingstatechange","onicegatheringstatechange","onsenderadded","onremovetrack","createNativePeerConnection","handleIceConnectionStats","sdpSemantics","getConfiguration","createAnswer","answerConstraints","onAnswerCreated","onAnswerFailed","sendMessageToDataChannel","channelProperty","doNotConvert","messageType","notOpenError","bufferAmount","byteLength","processDataChannelData","rawData","objPeerDataChannel","dataStreams","sessionChunkType","protocolData","dataTransfers","sessions","ackN","messageProtocolHandler","onmessage","event","HandleDataChannelStats","channel_id","channel_label","channel_type","channel_binary_type","agent_name","agent_type","agent_version","uid","binaryType","onerror","errorDetail","handleDataChannelStats","onopen","bufferThreshold","bufferedAmountLowThreshold","onbufferedamountlow","onclose","pid","transferIds","getTransferIDByPeerId","transferInfo","reliable","ordered","buferAmount","sendP2PMessageForRoom","roomStates","roomKeys","listOfPeersInfo","expectedLen","mLineCounter","addedMids","sdpLines","rejected","IceCandidate","getTime","candidatesLength","expected","received","processed","bufferedAmountLow","mainDataChannel","closeFn","channelNameProp","targetDataChannel","closeAllDataChannels","sendRestartOfferMsg","messageBuilder","getRestartOfferMessage","restartPeerConnection","hasLocalDescription","restart","unableToRestartError","restartMCUConnection","refreshSinglePeer","restartPeerConnectionPromises","restartPeerConnectionPromise","retrieveValidPeerIdsOrErrorMsg","errorMsg","isValidPeerId","rejectPromise","connectionStatusPromises","peerConnectionStatistics","PeerConnectionStatistics","updatePeerInformationsMediaStatus","transceiver","peerMedia","buildMediaStatus","processNewSender","formatValue","directionType","itemKey","HandleBandwidthStats","audio_send","audio_recv","video_send","video_recv","bytes","packets","echo_return_loss","echo_return_loss_enhancement","round_trip_time","audio_level","jitter","packets_lost","nack_count","firs_count","plis_count","frames_encoded","frame_width","frame_height","qp_sum","frames","hugeFrames","framesPerSecond","frames_decoded","frames_dropped","decoderImplementation","audioTracks","videoTracks","audioTrack","audioTrackInfo","stream_id","enabled","buildAudioTrackInfo","videoTrack","videoTrackInfo","buildVideoTrackInfo","gatherSendAudioPacketsStats","gatherReceiveAudioPacketsStats","gatherSendVideoPacketsStats","gatherReceiveVideoPacketsStats","buildTrackInfo","BandwidthAdjuster","recv","currentBlock","adjustmentInterval","getIniOptions","clearInterval","totalAudioBw","formatTotalFn","totalVideoBw","arr","total","isIceConnectionStateCompleted","pcIceConnectionState","statsInterval","setAdjustmentInterval","no_room_state","iceGatheringState","rtcTrackEvent","receiver","tscvr","mediaInfos","m","matchPeerIdWithTransceiverMid","isVideoScreenTrack","updateStreamIdFromOntrack","getStateByKey","updateMediaStatus","dispatchStreamEndedEvent","dispatchIncomingCameraStream","dispatchPeerUpdated","getStateByRid","replacedStreamId","remoteStreamsObj","PeerConnectionCallbacks","HandleRecordingStats","recording_id","recordings","handleRecordingStats","dispatchRecordingEvent","recordingState","action","currentRecordingId","startedDateTime","endedDateTime","recordingStartInterval","recordingStarted","clearTimeout","recordingStopped","SkylinkStates","getAllStates","removeSkylinkState","ACTION","rtmpSessions","rtmpId","rtmpSessionStartSuccess","rtmpSessionStopSuccess","rtmpError","rtmpSessionFailed","stamp","parsedUserData","dispatchMediaStateChangeEvents","mediaInfoEventHelpers","audioStateChangeHandler","retrieveStreamId","videoStateChangeHandler","processOtherChanges","processTransceiverMidChange","processMediaStateChange","processUnavailableStream","valueChanged","newValue","muteEventHelpers","dispatchMuteEvents","shouldDropMessage","handlers","enter","welcome","getPeerList","bye","redirect","rtmp","muteVideoEvent","muteAudioEvent","mediaInfoEvent","addNewPeerMediaInfo","mediaInfoKeys","k","processStoredMessages","SignalingMessageHandler","messageBuilders","cid","userCred","token","apiOwner","appKeyOwner","roomCred","start","duration","isPrivileged","autoIntroduce","enterMsg","isSuccess","showAll","restartOffer","RESTART","isRestartResend","byeMsg","lock","userMessages","signalingReadyMessages","messageBody","msgId","generateUUID","mBody","SignalingMessageBuilder","signalingMessages","valueOf","WebSocket","resetSocketConfig","Socket","tryCreateSocket","handleCreateSocketFailure","args","getAnswerMessage","dispatchHandshakeProgress","getAnswerAckMessage","getEnterRoomMessage","getJoinRoomMessage","getOfferMessage","getWelcomeMessage","getCandidateMessage","getSetUserDataMessage","getPeerListMessage","getStreamMessage","recordingMessage","getRecordingMessage","rtmpMessage","getRTMPMessage","muteAudio","getMuteAudioMessage","muteVideo","getMuteVideoMessage","getRoomLockMessage","byeMessage","getByeMessage","mInfo","getMediaInfoEventMessage","history","getGetStoredMessagesMessage","sendChannelMessage","peerMessages","getUserMessages","peerMessage","updatedMediaInfo","parseSDPForTransceiverMid","mediaMids","getTransceiverMid","audioMids","videoMids","a","v","retrieveValueGivenTransceiverMid","retrieveFormattedMediaInfo","formattedMediaInfos","clonedMediaInfo","resetPeerMedia","populatePeerMediaInfo","clonedPeerMedia","peerMediaHasPreviousState","processOnRemoveTrack","trackInfo","null","targetPeerIds","dispatchEvt","isStreamInState","processStreamInState","isAudioFallback","processNewStream","processPeerMedia","mutedSettings","shouldAudioMuted","shouldVideoMuted","getUserMediaSettings","exactConstraints","echoCancellation","mute","deviceId","exact","ideal","retrieveOriginalActiveStreamId","currentActiveStreamId","replacedStreamIds","originalActiveStreamId","pReplacedStreamIds","newStream","updateMediaInfo","hasToggledVideo","hasToggledAudio","originalStreamId","retrieveToggleState","startMuteEvents","toggleState","mutedStream","updateStreamsMutedSettings","muteFn","dispatchLocalMediaMutedEvent","dispatchStreamMutedEvent","updateMediaInfoAndRemoveListener","retrieveMutedSetting","mediaMutedOption","isValidStreamId","isValid","gumStreamId","fOptions","streamIdsThatCanBeMuted","streamIdsToMute","sId","streamIdToMute","isSenderTrackAndTrackMatched","senderTrack","x","isStreamOnPC","addTracksToPC","addTrack","getTrackSender","trackSender","dispatchEvents","restartFn","dispatchEventsToLocalEnd","processMediaOptions","userMediaStreams","processMediaStream","usePrefetchedStream","prefetchedStreams","processMediaStreamArray","usePrefetchedStreamsPromises","getOutputSources","sources","outputSources","input","output","sourceItem","item","sourceId","groupId","buildStreamObject","rest","mediaDevices","onStreamAccessError","addUserMediaStreams","screenshareStream","addScreenshareStream","methods","dispatchOnIncomingStream","dispatchOnIncomingScreenStream","dispatch","audioFallback","fallbackError","isAudioFallbackError","replaceTrack","oldStream","oldVideoTrack","oldAudioTrack","videoSender","audioSender","newVideoTrack","newAudioTrack","isNotObjOrNullOrPlugin","isArrayOfTypeStream","isAFunction","enumerateDevices","devices","mediaSource","mediaSourceInput","extensionInfo","extensionId","updateStreamsMediaStatus","retrieveVideoStreams","videoStreams","splitAudioAndVideoStream","streamKey","addStreamToState","st","obj","array","string","param","paramName","methodName","proceed","states","matchedRoomState","agentVer","requiredVer","partsA","partsB","d","c","r","Math","random","floor","statelessGetUserMedia","mediaStreamHelpers","validPeerId","events","privateEvents","eventName","addListener","allEventCallbacks","userCallbacks","privateCallbacks","removeListener","cb","addPrivateEventListener","removePrivateEventListener","logMethods","checkSupport","hasSupport","getFormattedMessage","fragment1","fragment2","fragment3","messageString","logFn","level","debugObject","datetime","currentLevel","SILENT","formattedMessage","storeLogs","logItems","toUpperCase","storedLogs","persistLogLevel","localStorage","setItem","TRACE","getItem","Number","isNaN","getPersistedLevel","levels","prototype","parseFn","codecName","samplingRate","mLine","RegExp","codecsList","fmtpLine","updatedFmtpLine","addedKeys","fmtpParts","keyAndValue","formatRtx","str","line","codecPayload","formatFmtpRtcpFb","codecs","codec","getCodecsSupport","RTCRtpSender","getCapabilities","clockRate","numChannels","pc","binaryChunkType","prop","e","setSDPCodecParams","opusOptions","minptime","vp8Options","maxFr","maxFs","vp9Options","vp9","h264Options","levelAsymmetryAllowed","profileLevelId","packetizationMode","removeSDPFilteredCandidates","setSDPCodec","overrideSettings","codecSettings","channels","setLineFn","isSROk","isChnlsOk","lineParts","audioCodec","videoCodec","bw","mLineType","mLineIndex","cLineIndex","toFixed","bASAudioBw","bASVideoBw","bASDataBw","googleXMinBw","googleXMaxBw","codecRtpMapLineIndex","codecFmtpLineIndex","xGoogleParams","removeSDPCodecs","payloadList","disableVideoFecCodecs","disableComfortNoiseCodec","removeSDPREMBPackets","disableREMB","handleSDPConnectionSettings","bundleLineMids","bundleLineIndex","peerStreamSettings","offerCodecs","mLines","bundleLine","localOfferRes","removeSDPUnknownAptRtx","mediaLines","removeSDPFirefoxH264Pref","renderSDPOutput","msidParts","ssrcParts","ssrcMsidParts","compareA","compareB","appendIndex","getSDPICECandidates","candidates","mediaItem","canType","getSDPSelectedCodec","codecInfo","implementation","payloadType","paramItem","aSetupPattern","originalDTLSRole","role","passive","msidLines","parsedMline","trim","firstItem","formatCanTypeFn","parseSelectedCandidatePair","isAutoBwStats","raw","transportStats","selectedLocalCandidateId","selectedRemoteCandidateId","statsReport","selectedCandidatePairId","selected","candidatePairStats","localCandidateId","remoteCandidateId","writable","nominated","prevStats","totalRoundTripTime","roundTripTime","tabulateStats","consentRequestsSent","consentRequests","totalSent","sent","requestsReceived","requests","totalReceived","requestsSent","responsesSent","responses","responsesReceived","remoteCandidateStats","ip","address","port","localCandidateStats","parseCertificates","srtpCipher","dtlsCipher","tlsVersion","localCertificateId","remoteCertificateId","base64Certificate","fingerprintAlgorithm","nTime","oTime","nVal","oVal","parseAudio","parsedStats","packetsReceived","totalPackets","bytesReceived","totalBytes","packetsLost","totalPacketsLost","audioReceiver","audioLevel","totalSamplesReceived","totalSamplesDuration","parseReceiving","bytesSent","packetsSent","retransmittedBytesSent","totalRetransmittedBytesSent","retransmittedPacketsSent","totalRetransmittedPacketsSent","mediaSourceId","echoReturnLoss","echoReturnLossEnhancement","audioSource","parseSending","parseVideo","isInteger","firCount","firsSent","totalFirs","firs","nackCount","nacksSent","totalNacks","nacks","pliCount","plisSent","totalPlis","plis","qpSum","videoReceiver","framesDropped","framesReceived","framesDecoded","frameWidth","frameHeight","firsReceived","nacksReceived","plisReceived","framesEncoded","framesSent","hugeFramesSent","videoSource","parseMedia","beSilentOnLogs","getStatistics","promiseResolve","promiseReject","entry","getStatsFailure","errMsg","gatherRTCPeerConnectionDetails","gatherSDPIceCandidates","gatherSDPCodecs","gatherRTCDataChannelDetails","getStatsSuccess","dcKeys","retrievePeersScreenStreamId","peersScreenStreamId","stopScreenStream","handleScreenStreamStates","addScreenStreamToState","removeScreenStreamFromState","setScreenStateToUnavailable","addScreenStreamCallbacks","onended","retrievePeerScreenStream","peersScreenStream","peerRemoteStreams","screenshareHelpers","screensharingInstance","checkForExistingScreenStreams","checksForReplaceScreen","startScreenCapture","replaceUserMediaStream","getDisplayMedia","hasUserMediaStream","hasMoreThanOneVideoStream","streamExists","replacedStream","updateReplacedStreamInState","getState","deleteAsyncInstance","deleteEncryptedInstance","PeerPrivileged","pShowAll","shouldProceed","executeCallbackAndRemoveEvtListener","defaultOptions","roomServer","apiTimeout","throttleShouldThrowError","enableSimultaneousTransfers","credentials","throttleIntervals","SkylinkRoom","rawApiResponse","room_key","peerConstraints","pc_constraints","offer_constraints","mediaConstraints","media_constraints","SkylinkUser","SkylinkApiResponse","ipSigserver","httpPortList","httpsPortList","ipSigserverPath","getEndPoint","urlChar","validateOptions","toReturn","validateAPIResponse","ok","loggerMethod","logAPIResponse","parseAndMutateOptions","updatedOptions","webRTCReadyOperations","returnObject","testRTCPeerConnection","SkylinkAPIServer","setUserInitOptions","optionsValidity","webrtcReady","async","apiResponse","authenticateApp","json","codecSupport","userInitOptions","getUserInitOptions","updatedInitOptions","setInitOptions","enforceUserInitOptions","ApiResponse","sendByeOrDisconnectSocket","skylinkSignalingServer","isInMoreThanOneRoom","handleChannelClose","stopStreams","clearRoomState","clearRoomStateFromSingletons","Set","removedState","peerLeftPromises","executePeerLeftProcess","HandleClientStats","sdk_name","sdk_version","agent_platform","agent_plugin_version","device_version","enumerated_devices","device_muted","language","SkylinkState","retryCounters","selectedRoom","socketMessage","lastRestart","socketMessageTimeout","socketUseXDR","streamsDefaultSettings","joinRoomManager","socketsFn","statIdRandom","apiServer","handleClientStats","getRoomNameFromParams","createRoom","skylinkApiResponse","checkCodecSupport","userMediaParams","streamException","codecError","socketException","lockOrUnlockRoom","Room","closedRooms","resolves","res","manageErrorStatsAndCallback","errorMessage","statsKey","commonRecordingOperations","isStartRecording","statsStateKey","stateToCompare","manageRecordingEventListeners","sendRecordingMessageViaSig","Recording","checkRTMPDependencies","isStartSession","registerRTMPEventListenersAndResolve","isStartRTMPSession","sendRTMPMessageViaSig","commonRTMPOperations","gRtmpId","logErrorAndReject","SkylinkPublicInterface","getPeerScreenshare","getUserMediaLayer","startSession","stopSession","encryption","getEncryptSecrets","getSelectedSecretId","setMessagePersistence","getMessagePersistence","skylinkStates","parsedOptions","removeStateByRoomId","keyOrName"],"mappings":"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","file":"static/js/main.71de827b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/person.c998eae2.svg\";","import { SkylinkEventManager, SkylinkEvents } from 'skylinkjs';\n\nclass DemoLoggerHelper {\n  constructor() {\n    this.skylinkEventManager = SkylinkEventManager;\n    this.evts = {\n      candidate: [\n        SkylinkEvents.CANDIDATE_PROCESSING_STATE,\n        SkylinkEvents.CANDIDATE_GENERATION_STATE,\n        SkylinkEvents.CANDIDATES_GATHERED,\n        SkylinkEvents.ICE_CONNECTION_STATE,\n        SkylinkEvents.DATA_STREAM_STATE,\n        SkylinkEvents.DATA_STREAM_STATE,\n        SkylinkEvents.DATA_TRANSFER_STATE\n      ],\n      dataTransfer: [\n        SkylinkEvents.CANDIDATE_GENERATION_STATE,\n        SkylinkEvents.CANDIDATES_GATHERED,\n        SkylinkEvents.ICE_CONNECTION_STATE,\n        SkylinkEvents.DATA_STREAM_STATE,\n        SkylinkEvents.DATA_TRANSFER_STATE\n      ],\n      dataChannel: [\n        SkylinkEvents.ON_INCOMING_DATA,\n        SkylinkEvents.ON_INCOMING_DATA_REQUEST,\n        SkylinkEvents.ON_INCOMING_DATA_STREAM,\n        SkylinkEvents.ON_INCOMING_DATA_STREAM_STARTED,\n        SkylinkEvents.ON_INCOMING_DATA_STREAM_STOPPED,\n        SkylinkEvents.DATA_CHANNEL_STATE,\n        SkylinkEvents.ON_INCOMING_MESSAGE\n      ],\n      media: [\n        SkylinkEvents.MEDIA_ACCESS_FALLBACK,\n        SkylinkEvents.MEDIA_ACCESS_REQUIRED,\n        SkylinkEvents.MEDIA_ACCESS_STOPPED,\n        SkylinkEvents.MEDIA_ACCESS_SUCCESS,\n        SkylinkEvents.RECORDING_STATE,\n        SkylinkEvents.RTMP_STATE,\n        SkylinkEvents.LOCAL_MEDIA_MUTED,\n        SkylinkEvents.MEDIA_ACCESS_ERROR\n      ],\n      peer: [\n        SkylinkEvents.PEER_UPDATED,\n        SkylinkEvents.PEER_JOINED,\n        SkylinkEvents.PEER_LEFT,\n        SkylinkEvents.PEER_RESTART,\n        SkylinkEvents.SERVER_PEER_JOINED,\n        SkylinkEvents.SERVER_PEER_LEFT,\n        SkylinkEvents.SERVER_PEER_RESTART,\n        SkylinkEvents.GET_PEERS_STATE_CHANGE,\n        SkylinkEvents.PEER_CONNECTION_STATE,\n        SkylinkEvents.SESSION_DISCONNECT,\n        SkylinkEvents.GET_CONNECTION_STATUS_STATE_CHANGE\n      ],\n      peerHandshake: [\n        SkylinkEvents.HANDSHAKE_PROGRESS,\n        SkylinkEvents.INTRODUCE_STATE_CHANGE\n      ],\n      room: [\n        SkylinkEvents.ROOM_LOCK,\n        SkylinkEvents.BYE\n      ],\n      socket: [\n        SkylinkEvents.CHANNEL_OPEN,\n        SkylinkEvents.CHANNEL_CLOSE,\n        SkylinkEvents.CHANNEL_ERROR,\n        SkylinkEvents.CHANNEL_MESSAGE,\n        SkylinkEvents.CHANNEL_RETRY,\n        SkylinkEvents.SOCKET_ERROR,\n        SkylinkEvents.SYSTEM_ACTION\n      ],\n      stream: [\n        SkylinkEvents.ON_INCOMING_STREAM,\n        SkylinkEvents.ON_INCOMING_SCREEN_STREAM,\n        SkylinkEvents.STREAM_ENDED,\n        SkylinkEvents.STREAM_MUTED\n      ],\n    };\n\n    this.registeredEvts = null;\n  }\n\n  static logToConsole(trigger, type = \"METHOD\", payload = \"\", error) {\n    if (error) {\n      console.error(`SKYLINK DEMO - [${trigger}]`, error);\n      return;\n    }\n    console.log(`SKYLINK DEMO - [${trigger}] [${type}] -->`, payload);\n  };\n\n  static evtLogger(evt) {\n    const { detail } = evt;\n    DemoLoggerHelper.logToConsole(evt.type, 'EVT', detail);\n  };\n\n  initRegisterEvtLoggers() {\n    this.registeredEvts = {\n      candidate: false,\n      dataTransfer: false,\n      dataChannel: false,\n      media: false,\n      peer: false,\n      peerHandshake: false,\n      room: false,\n      socket: false,\n      stream: false,\n      allEvts: false\n    };\n  }\n\n  registerAllEvents() {\n    this.evts.candidate.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.candidate = true;\n    });\n\n    this.evts.dataTransfer.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.dataTransfer = true;\n    });\n\n    this.evts.dataChannel.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.dataChannel = true;\n    });\n\n    this.evts.media.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.media = true;\n    });\n\n    this.evts.peer.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.peer = true;\n    });\n\n    this.evts.peerHandshake.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.peerHandshake = true;\n    });\n\n    this.evts.room.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.room = true;\n    });\n\n    this.evts.socket.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.socket = true;\n    });\n\n    this.evts.stream.forEach((evt) => {\n      this.skylinkEventManager.addEventListener(evt, DemoLoggerHelper.evtLogger);\n      this.registeredEvts.stream = true;\n    });\n\n    this.registeredEvts.allEvts = true;\n\n    DemoLoggerHelper.logToConsole(\"demoLoggerHelper\", `All evts`, 'registered');\n  };\n\n  isAllEvtsRegistered() {\n    let isAll = true;\n    const evts = this.registeredEvts;\n\n    Object.keys(evts).forEach((key) => {\n      if (!evts[key] && key !== 'allEvts') {\n        isAll = false;\n      }\n    });\n\n    return isAll;\n  }\n\n  registerOrUnregisterEvts(evtToToggle) {\n    if (evtToToggle === 'allEvts') {\n      this.registerAllEvents();\n      return;\n    }\n\n    if (this.registeredEvts[evtToToggle]) {\n      this.evts[evtToToggle].forEach((evtType) => {\n        this.skylinkEventManager.removeEventListener(evtType, DemoLoggerHelper.evtLogger)\n      });\n\n      DemoLoggerHelper.logToConsole(\"demoLoggerHelper\", `${evtToToggle} evts`, 'unregistered');\n      this.registeredEvts[evtToToggle] = false;\n      this.registeredEvts.allEvts = this.isAllEvtsRegistered();\n    } else {\n      if (!this.registeredEvts[evtToToggle]) {\n        this.evts[evtToToggle].forEach((evtType) => {\n          this.skylinkEventManager.addEventListener(evtType, DemoLoggerHelper.evtLogger)\n        });\n\n        DemoLoggerHelper.logToConsole(\"demoLoggerHelper\", `${evtToToggle} evts`, 'registered');\n        this.registeredEvts[evtToToggle] = true;\n        this.registeredEvts.allEvts = this.isAllEvtsRegistered();\n      }\n    }\n  }\n}\n\nexport default DemoLoggerHelper;\n\n\n","import React, { Component } from 'react';\nimport {\n\tContainer,\n\tGrid,\n\tForm,\n\tButton,\n\tHeader,\n\tSegment,\n\tAccordion,\n\tModal,\n\tDropdown,\n\tCheckbox\n} from 'semantic-ui-react';\nimport icon from './assets/person.svg';\nimport Skylink, { SkylinkLogger, SkylinkEventManager, SkylinkEvents, SkylinkConstants } from 'skylinkjs';\n//import { appConfig } from './app-config';\nimport DemoLoggerHelper from './evtHelpers';\nimport CryptoJS from 'crypto-js';\n\nconst appConfig = {\n\tappKey: 'd6e761f0-d8bd-4bc1-b033-de2d6a5e9eca',\n\tdefaultRoom: 'skylinkRoom',\n\tenableIceTrickle: true,\n\tenableDataChannel: true,\n\tforceSSL: true\n};\nSkylinkLogger.setLevel(SkylinkLogger.logLevels.DEBUG);\n\nconst defaultRoom   = \"skylinkRoom\"\nconst startDateTime = (new Date()).toISOString(),\n      duration      = 1, // Allows only User session to stay for 1 hour\n      appKeySecret  = \"7yy67qa4gku\",\n      hash          = CryptoJS.HmacSHA1(defaultRoom + \"_\" + duration + \"_\" + startDateTime, appKeySecret),\n      credentials   = encodeURIComponent(hash.toString(CryptoJS.enc.Base64))\n\nconst appConfigNew = {\n\tdefaultRoom: defaultRoom,\n    appKey: `d6e761f0-d8bd-4bc1-b033-de2d6a5e9eca`,\n    credentials: {\n      duration: duration,\n      startDateTime: startDateTime,\n      credentials: credentials\n    }\n}\nclass SkylinkDemo extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tglobal.Skylink = Skylink;\n\t\tthis.skylink = new Skylink(appConfig);\n\t\tglobal.SkylinkDemo = this.skylink;\n\t\tthis.skylinkEventManager = SkylinkEventManager;\n\t\tthis.demoLoggerHelper = new DemoLoggerHelper();\n\t\tthis.demoLoggerHelper.initRegisterEvtLoggers();\n\t\tthis.state = {\n\t\t\thongkong: {\n\t\t\t\tusername: '',\n\t\t\t\tnewUsername: '',\n\t\t\t\tpeerId: '',\n\t\t\t\tinRoom: false,\n\t\t\t\tshowLoader: false,\n\t\t\t\tmessage: '',\n\t\t\t\tmessages: [],\n\t\t\t\ttitle: 'Hong Kong',\n\t\t\t\tremotePeers: [],\n\t\t\t\tselectedPeers: [],\n\t\t\t\tmessageChannel: 'P2P',\n\t\t\t\troomLocked: false,\n\t\t\t\tstreamMuted: {\n\t\t\t\t\tvideoMuted: false,\n\t\t\t\t\taudioMuted: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tsingapore: {\n\t\t\t\tusername: '',\n\t\t\t\tpeerId: '',\n\t\t\t\tinRoom: false,\n\t\t\t\tshowLoader: false,\n\t\t\t\tmessage: '',\n\t\t\t\tmessages: [],\n\t\t\t\ttitle: 'Singapore',\n\t\t\t\tremotePeers: [],\n\t\t\t\tselectedPeers: [],\n\t\t\t\tmessageChannel: 'P2P',\n\t\t\t\troomLocked: false,\n\t\t\t\tstreamMuted: {\n\t\t\t\t\tvideoMuted: false,\n\t\t\t\t\taudioMuted: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tnewyork: {\n\t\t\t\tusername: '',\n\t\t\t\tpeerId: '',\n\t\t\t\tinRoom: false,\n\t\t\t\tshowLoader: false,\n\t\t\t\tmessage: '',\n\t\t\t\tmessages: [],\n\t\t\t\ttitle: 'New York',\n\t\t\t\tremotePeers: [],\n\t\t\t\tselectedPeers: [],\n\t\t\t\tmessageChannel: 'P2P',\n\t\t\t\troomLocked: false,\n\t\t\t\tstreamMuted: {\n\t\t\t\t\tvideoMuted: false,\n\t\t\t\t\taudioMuted: false\n\t\t\t\t}\n\t\t\t},\n\t\t\tregisteredEvts: this.demoLoggerHelper.registeredEvts\n\t\t};\n\n\t\tthis.toggleEvt = this.toggleEvt.bind(this);\n\t\tthis.prefetchedStream = null;\n\n\t\tthis.localFeedRef = React.createRef();\n\t\tthis.joinRoom = this.joinRoom.bind(this);\n\t\tthis.leaveRoom = this.leaveRoom.bind(this);\n\t\tthis.leaveAllRooms = this.leaveAllRooms.bind(this);\n\t\tthis.lockRoom = this.lockRoom.bind(this);\n\t\tthis.userNameEntered = this.userNameEntered.bind(this);\n\t\tthis.onIncomingStream = this.onIncomingStream.bind(this);\n\t\tthis.onPeerJoined = this.onPeerJoined.bind(this);\n\t\tthis.onRoomLocked = this.onRoomLocked.bind(this);\n\t\tthis.onIncomingMessage = this.onIncomingMessage.bind(this);\n\t\tthis.messageEntered = this.messageEntered.bind(this);\n\t\tthis.sendMessage = this.sendMessage.bind(this);\n\t\tthis.getConnectionStatus = this.getConnectionStatus.bind(this);\n\t\tthis.refreshDataChannel = this.refreshDataChannel.bind(this);\n\t\tthis.refreshConnections = this.refreshConnections.bind(this);\n\t\tthis.onPeerLeft = this.onPeerLeft.bind(this);\n\t\tthis.shareScreen = this.shareScreen.bind(this);\n\t\tthis.shareScreenReplace = this.shareScreenReplace.bind(this);\n\t\tthis.onStreamEnded = this.onStreamEnded.bind(this);\n\t\tthis.getPeerCustomSettings = this.getPeerCustomSettings.bind(this);\n\t\tthis.getUserMedia = this.getUserMedia.bind(this);\n\t\tthis.stopStream = this.stopStream.bind(this);\n\t\tthis.stopScreen = this.stopScreen.bind(this);\n\t\tthis.onPeerSelected = this.onPeerSelected.bind(this);\n\t\tthis.onMessageChannelSelected = this.onMessageChannelSelected.bind(this);\n\t\tthis.startRecording = this.startRecording.bind(this);\n\t\tthis.stopRecording = this.stopRecording.bind(this);\n\t\tthis.onSystemAction = this.onSystemAction.bind(this);\n\t\tthis.muteStream = this.muteStream.bind(this);\n\t\tthis.sendStream = this.sendStream.bind(this);\n\t\tthis.prefetchGetUserMedia = this.prefetchGetUserMedia.bind(this);\n\t\tthis.onIncomingScreenStream = this.onIncomingScreenStream.bind(this);\n\t\tthis.getPeersInRoom = this.getPeersInRoom.bind(this);\n\t\tthis.getPeerInfo = this.getPeerInfo.bind(this);\n\t\tthis.getUserData = this.getUserData.bind(this);\n\t\tthis.setUserData = this.setUserData.bind(this);\n\t\tthis.getPeersStream = this.getPeersStream.bind(this);\n\t\tthis.getPeersDataChannels = this.getPeersDataChannels.bind(this);\n\t\tthis.getPeersScreenshare = this.getPeersScreenshare.bind(this);\n\t\tthis.getRecordings = this.getRecordings.bind(this);\n\t\tthis.getStreamSources = this.getStreamSources.bind(this);\n\t\tthis.getScreenSources = this.getScreenSources.bind(this);\n\t\tthis.getPeers = this.getPeers.bind(this);\n\t\tthis.toggleAudioVideo = this.toggleAudioVideo.bind(this);\n\t\tthis.updateUsername = this.updateUsername.bind(this);\n\t\tthis.onServerPeerLeft = this.onServerPeerLeft.bind(this);\n\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.ON_INCOMING_STREAM, this.onIncomingStream);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.PEER_LEFT, this.onPeerLeft);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.ON_INCOMING_MESSAGE, this.onIncomingMessage);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.PEER_JOINED, this.onPeerJoined);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.HANDSHAKE_PROGRESS, this.handshakeProgress);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.STREAM_ENDED, this.onStreamEnded);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.SYSTEM_ACTION, this.onSystemAction);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.ROOM_LOCK, this.onRoomLocked);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.ON_INCOMING_SCREEN_STREAM, this.onIncomingScreenStream);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.ON_INCOMING_SCREEN_STREAM, this.onIncomingScreenStream);\n\t\tthis.skylinkEventManager.addEventListener(SkylinkEvents.SERVER_PEER_LEFT, this.onServerPeerLeft);\n\t}\n\n\ttoggleEvt(evt) {\n\t\tthis.demoLoggerHelper.registerOrUnregisterEvts(evt.currentTarget.value);\n\t\tthis.setState({ registeredEvts: this.demoLoggerHelper.registeredEvts });\n\t}\n\n\tjoinRoom(location) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tconst joinRoomOptions = {\n\t\t\taudio: !locationState.streamMuted.audio,\n\t\t\tvideo: !locationState.streamMuted.video,\n\t\t\troomName: location,\n\t\t\tuserData: {\n\t\t\t\tusername: locationState.username\n\t\t\t}\n\t\t};\n\n\t\tlocationState.showJoinRoomLoader = true;\n\t\tthis.setState({ [location]: locationState });\n\n\t\tthis.skylink\n\t\t\t.joinRoom(joinRoomOptions, this.prefetchedStream)\n\t\t\t.then((streams) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('joinRoom', undefined, streams);\n\n\t\t\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\t\t\tlocationState.inRoom = true;\n\t\t\t\tlocationState.showJoinRoomLoader = false;\n\n\t\t\t\tthis.setState({ [location]: locationState }, () => {\n\t\t\t\t\tconst localFeedElem = document.getElementById(`local-feed_${location}`);\n\t\t\t\t\tstreams.forEach((stream) => {\n\t\t\t\t\t\tif (stream.getVideoTracks().length > 0) {\n\t\t\t\t\t\t\twindow.attachMediaStream(localFeedElem, stream);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('joinRoom', undefined, null, error);\n\t\t\t});\n\t}\n\n\tsendMessage(location) {\n\t\tconst message = this.state[location]['message'];\n\t\tconst selectedPeers = this.state[location]['selectedPeers'];\n\t\tconst messageChannel = this.state[location]['messageChannel'];\n\t\tif (messageChannel === 'P2P') {\n\t\t\tthis.skylink.sendP2PMessage(message, selectedPeers, location);\n\t\t} else {\n\t\t\tthis.skylink.sendMessage(location, message, selectedPeers);\n\t\t}\n\t}\n\n\tgetPeersInRoom(location) {\n\t\tDemoLoggerHelper.logToConsole('getPeersInRoom', undefined, this.skylink.getPeersInRoom(location));\n\t}\n\n\tgetPeerInfo(location) {\n\t\tconst peerIds = Object.keys(this.skylink.getPeersInRoom(location));\n\t\tpeerIds.forEach((peerId) => {\n\t\t\tDemoLoggerHelper.logToConsole('getPeerInfo', undefined, this.skylink.getPeerInfo(location, peerId));\n\t\t});\n\t}\n\n\tgetUserData(location) {\n\t\tDemoLoggerHelper.logToConsole('getUserData', undefined, JSON.parse(this.skylink.getUserData(location)));\n\t}\n\n\tupdateUsername(location, evt) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tlocationState.newUsername = evt.target.value;\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\tsetUserData(location) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tlocationState.username = locationState.newUsername;\n\t\tlocationState.newUsername = '';\n\t\tconst userData = {\n\t\t\tusername: locationState.username\n\t\t};\n\t\tDemoLoggerHelper.logToConsole(\n\t\t\t'setUserData',\n\t\t\tundefined,\n\t\t\tthis.skylink.setUserData(location, JSON.stringify(userData))\n\t\t);\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\tgetConnectionStatus(location) {\n\t\tthis.skylink\n\t\t\t.getConnectionStatus(location)\n\t\t\t.then((result) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('getConnectionStatus', undefined, result);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('getConnectionStatus', undefined, undefined, error);\n\t\t\t});\n\t}\n\n\tgetPeers(location) {\n\t\tthis.skylink\n\t\t\t.getPeers(location, true)\n\t\t\t.then((result) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('getPeers', undefined, result);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('getPeers', undefined, null, error);\n\t\t\t});\n\t}\n\n\tgetPeersStream(location) {\n\t\tDemoLoggerHelper.logToConsole('getPeersStream', undefined, this.skylink.getPeersStream(location));\n\t}\n\n\tgetPeersDataChannels(location) {\n\t\tDemoLoggerHelper.logToConsole('getPeersDataChannels', undefined, this.skylink.getPeersDataChannels(location));\n\t}\n\n\tgetPeerCustomSettings(location) {\n\t\tDemoLoggerHelper.logToConsole(\n\t\t\t'getPeerCustomSettings',\n\t\t\tundefined,\n\t\t\tthis.skylink.getPeersCustomSettings(location)\n\t\t);\n\t}\n\n\trefreshDataChannel(location) {\n\t\tconst peers = this.skylink.getPeersInRoom(location);\n\t\tconst peerIds = Object.keys(peers);\n\n\t\tfor (let i = 0; i < peerIds.length; i += 1) {\n\t\t\tthis.skylink.refreshDatachannel(location, peerIds[i]);\n\t\t}\n\t}\n\n\trefreshConnections(location) {\n\t\tthis.skylink\n\t\t\t.refreshConnection(location)\n\t\t\t.then((result) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('refreshConnection', undefined, result);\n\n\t\t\t\tif (result.refreshErrors.length > 0) {\n\t\t\t\t\tDemoLoggerHelper.logToConsole('refreshConnection', undefined, result, result.refreshErrors);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('refreshConnection', undefined, undefined, error);\n\t\t\t});\n\t}\n\n\tshareScreen(location) {\n\t\tthis.skylink.shareScreen(location, false).then((screenStream) => {\n\t\t\tDemoLoggerHelper.logToConsole('shareScreen', undefined, screenStream);\n\t\t\twindow.attachMediaStream(document.getElementById(`local-feed_screen_${location}`), screenStream);\n\t\t});\n\t}\n\n\tgetPeersScreenshare(location) {\n\t\tDemoLoggerHelper.logToConsole('getPeersScreenshare', undefined, this.skylink.getPeersScreenshare(location));\n\t}\n\n\tprefetchGetUserMedia() {\n\t\tthis.skylink\n\t\t\t.getUserMedia({ audio: false, video: true })\n\t\t\t.then((stream) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('getUserMedia', undefined, stream);\n\t\t\t\tthis.prefetchedStream = stream;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('getUserMedia', undefined, undefined, error);\n\t\t\t});\n\t}\n\n\tstopScreen(location) {\n\t\tthis.skylink.stopScreen(location);\n\t}\n\n\tstopStream(location) {\n\t\tconst streamList = this.skylink.getStreams(location);\n\t\tif (streamList.userMedia) {\n\t\t\tconst streamIds = Object.keys(streamList.userMedia);\n\t\t\tthis.skylink.stopStream(location);\n\t\t}\n\t}\n\n\tleaveRoom(location) {\n\t\tthis.skylink\n\t\t\t.leaveRoom(location)\n\t\t\t.then(() => {\n\t\t\t\tconst locationState = this.state[location];\n\t\t\t\tlocationState.remotePeers = [];\n\t\t\t\tthis.setState({ [location]: locationState });\n\t\t\t\tthis.removeFeed(location);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('leaveRoom', undefined, undefined, error);\n\t\t\t\tthis.removeFeed(location);\n\t\t\t});\n\t}\n\n\tleaveAllRooms() {\n\t\tthis.skylink\n\t\t\t.leaveAllRooms()\n\t\t\t.then((roomNames) => roomNames.forEach((location) => this.removeFeed(location)))\n\t\t\t.catch((error) => DemoLoggerHelper.logToConsole('leaveAllRooms', undefined, null, error));\n\t}\n\n\tstartRecording(location) {\n\t\tthis.skylink\n\t\t\t.startRecording(location)\n\t\t\t.then((recordingId) => DemoLoggerHelper.logToConsole('startRecording', undefined, recordingId))\n\t\t\t.catch((error) => DemoLoggerHelper.logToConsole('startRecording', undefined, null, error));\n\t}\n\n\tstopRecording(location) {\n\t\tthis.skylink\n\t\t\t.stopRecording(location)\n\t\t\t.then((recordingId) => DemoLoggerHelper.logToConsole('stopRecording', undefined, recordingId))\n\t\t\t.catch((error) => DemoLoggerHelper.logToConsole('stopRecording', undefined, null, error));\n\t}\n\n\tgetRecordings(location) {\n\t\tDemoLoggerHelper.logToConsole('getRecordings', undefined, this.skylink.getRecordings(location));\n\t}\n\n\tlockRoom(location) {\n\t\tif (this.state[location].roomLocked) {\n\t\t\tDemoLoggerHelper.logToConsole('lockRoom', undefined, null);\n\t\t\tthis.skylink.unlockRoom(location);\n\t\t} else {\n\t\t\tDemoLoggerHelper.logToConsole('unlockRoom', undefined, null);\n\t\t\tthis.skylink.lockRoom(location);\n\t\t}\n\t}\n\n\tmuteStream(location, evt) {\n\t\tconst locationState = this.state[location];\n\t\tconst newStreamMutedState = {\n\t\t\tvideoMuted:\n\t\t\t\tevt.target.value === 'video'\n\t\t\t\t\t? !locationState.streamMuted.videoMuted\n\t\t\t\t\t: locationState.streamMuted.videoMuted,\n\t\t\taudioMuted:\n\t\t\t\tevt.target.value === 'audio'\n\t\t\t\t\t? !locationState.streamMuted.audioMuted\n\t\t\t\t\t: locationState.streamMuted.audioMuted\n\t\t};\n\t\tlocationState.streamMuted = newStreamMutedState;\n\t\tthis.setState({ location: locationState });\n\t\ttry {\n\t\t\tconsole.log(this.skylink);\n\t\t\tconst { muteStreams = () => {}} = this.skylink;\n\t\t\tmuteStreams(location, newStreamMutedState);\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t}\n\t}\n\n\tgetStreamSources() {\n\t\tthis.skylink.getStreamSources().then((result) => {\n\t\t\tDemoLoggerHelper.logToConsole('getStreamSources', undefined, result);\n\t\t});\n\t}\n\n\tsendStream(location) {\n\t\tconst options = { audio: true, video: false };\n\t\tthis.skylink\n\t\t\t.sendStream(location, options)\n\t\t\t.then((stream) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('sendStream', undefined, stream);\n\n\t\t\t\tconst localFeedElem = document.getElementById(`local-feed_${location}`);\n\t\t\t\twindow.attachMediaStream(localFeedElem, stream);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('sendStream', undefined, null, error);\n\t\t\t});\n\t}\n\n\tgetScreenSources() {\n\t\tthis.skylink.getScreenSources().then((result) => {\n\t\t\tDemoLoggerHelper.logToConsole('getScreamSources', undefined, result);\n\t\t});\n\t}\n\n\tshareScreenReplace(location) {\n\t\tconst streamList = this.skylink.getStreams(location);\n\t\tconst streamIds = Object.keys(streamList.userMedia);\n\t\tthis.skylink.shareScreen(location, true).then((screenStream) => {\n\t\t\tDemoLoggerHelper.logToConsole('shareScreenReplace', undefined, screenStream);\n\t\t\twindow.attachMediaStream(document.getElementById(`local-feed_screen_${location}`), screenStream);\n\t\t});\n\t}\n\n\tremoveFeed(location) {\n\t\tlet localFeedElem = document.getElementById(`local-feed_${location}`);\n\t\tif (localFeedElem) {\n\t\t\tlocalFeedElem.srcObject = null;\n\t\t}\n\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\n\t\tlocationState.inRoom = false;\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\tuserNameEntered(location, ev) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tlocationState.username = ev.target.value;\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\tonStreamEnded(evt) {\n\t\tconst detail = evt.detail;\n\t\tconst { isSelf, isScreensharing, room, peerId } = detail;\n\n\t\tif (isSelf) {\n\t\t\tif (isScreensharing) {\n\t\t\t\tconst localVideoScreenElem = document.getElementById(`local-feed_screen_${room.roomName}`);\n\t\t\t\tlocalVideoScreenElem.srcObject = null;\n\t\t\t} else {\n\t\t\t\tconst localVideoElem = document.getElementById(`local-feed_${room.roomName}`);\n\t\t\t\tlocalVideoElem.srcObject = null;\n\t\t\t\tlocalVideoElem.style.display = 'none';\n\t\t\t\tconst localPlaceholder = document.getElementById(`local-feed_icon_${room.roomName}`);\n\t\t\t\tlocalPlaceholder.style.display = 'inline';\n\t\t\t}\n\t\t} else {\n\t\t\tconst remoteStreams = this.skylink.getPeersStream(room.roomName, false);\n\t\t\tif (remoteStreams) {\n\t\t\t\tif (isScreensharing) {\n\t\t\t\t\tconst remoteVideoScreenElem = document.getElementById(\n\t\t\t\t\t\t`remote-feed_screen_${peerId}_${room.roomName}`\n\t\t\t\t\t);\n\t\t\t\t\tif (remoteVideoScreenElem) {\n\t\t\t\t\t\tremoteVideoScreenElem.srcObject = null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst remoteVideoElem = document.getElementById(`remote-feed_${peerId}_${room.roomName}`);\n\t\t\t\t\tif (remoteVideoElem.srcObject.active !== true) {\n\t\t\t\t\t\tremoteVideoElem.srcObject = null;\n\t\t\t\t\t\tremoteVideoElem.style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t\tconst remotePlaceholder = document.getElementById(`remote-feed_icon_${room.roomName}`);\n\t\t\t\t\tif (remotePlaceholder && remoteVideoElem.srcObject && remoteVideoElem.srcObject.active !== true) {\n\t\t\t\t\t\tremotePlaceholder.style.display = 'inline';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst remoteVideoScreenElem = document.getElementById(`remote-feed_screen_${peerId}_${room.roomName}`);\n\t\t\t\tif (remoteVideoScreenElem) {\n\t\t\t\t\tremoteVideoScreenElem.srcObject = null;\n\t\t\t\t}\n\t\t\t\tconst remoteVideoElem = document.getElementById(`remote-feed_${peerId}_${room.roomName}`);\n\t\t\t\tif (remoteVideoElem && remoteVideoElem.srcObject) {\n\t\t\t\t\tremoteVideoElem.srcObject = null;\n\t\t\t\t\tremoteVideoElem.style.display = 'none';\n\t\t\t\t}\n\t\t\t\tconst remotePlaceholder = document.getElementById(`remote-feed_icon_${room.roomName}`);\n\t\t\t\tif (remotePlaceholder) {\n\t\t\t\t\tremotePlaceholder.style.display = 'inline';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tonSystemAction(evt) {\n\t\tif (evt.detail.reason === SkylinkConstants.SYSTEM_ACTION.LOCKED) {\n\t\t\talert('Room is locked.');\n\t\t}\n\t}\n\n\tonRoomLocked(evt) {\n\t\tconst { isLocked, peerInfo } = evt.detail;\n\t\tconst roomName = peerInfo.room;\n\t\tconst locationState = Object.assign({}, this.state[roomName]);\n\n\t\tlocationState.roomLocked = isLocked;\n\t\tthis.setState({ [roomName]: locationState });\n\t}\n\n\tonIncomingScreenStream(evt) {\n\t\tconst props = evt.detail;\n\t\tconst { room, peerId, stream, isSelf } = props;\n\n\t\tif (isSelf) {\n\t\t\tconst localVideoScreenElem = document.getElementById(`local-feed_screen_${room.roomName}`);\n\t\t\twindow.attachMediaStream(localVideoScreenElem, stream);\n\t\t} else {\n\t\t\tconst remoteVideoScreenElem = document.getElementById(`remote-feed_screen_${peerId}_${room.roomName}`);\n\t\t\twindow.attachMediaStream(remoteVideoScreenElem, stream);\n\t\t}\n\t}\n\n\tonIncomingStream(evt) {\n\t\tconst props = evt.detail;\n\t\tconst { stream, isSelf, peerId, room, isReplace, streamId, isVideo, isAudio } = props;\n\n\t\tif (!isSelf && !isReplace) {\n\t\t\tif ((isAudio && isVideo) || (isVideo && !isAudio)) {\n\t\t\t\tconst remoteVideoElem = document.getElementById(`remote-feed_${peerId}_${room.roomName}`);\n\t\t\t\tconst remotePlaceholder = document.getElementById(`remote-feed_icon_${room.roomName}`);\n\t\t\t\twindow.attachMediaStream(remoteVideoElem, stream);\n\t\t\t\tremoteVideoElem.style.display = 'inline';\n\t\t\t\tremotePlaceholder.style.display = 'none';\n\t\t\t} else {\n\t\t\t\tconst rremoteAudioElem = document.getElementById(`remote-feed_audio_${peerId}_${room.roomName}`);\n\t\t\t\twindow.attachMediaStream(rremoteAudioElem, stream);\n\t\t\t}\n\t\t}\n\t}\n\n\tmessageEntered(location, ev) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tlocationState.message = ev.target.value;\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\tonPeerJoined(evt) {\n\t\tconst eventDetail = evt.detail;\n\t\tconst { isSelf, peerId, room } = eventDetail;\n\t\tconst location = Object.assign([], this.state[room.roomName]);\n\n\t\tif (!isSelf) {\n\t\t\tlocation.remotePeers.push(peerId);\n\t\t} else {\n\t\t\tlocation.peerId = peerId;\n\t\t}\n\n\t\tthis.setState({ [room.roomName]: location });\n\t}\n\n\tonIncomingMessage(evt) {\n\t\tconst message = evt.detail;\n\t\tconst { room } = message;\n\t\tconst locationState = Object.assign({}, this.state[room.roomName]);\n\t\tlocationState.messages.push(message);\n\t\tthis.setState({ [room.roomName]: locationState });\n\t}\n\n\tgetUserMedia(location) {\n\t\tthis.skylink\n\t\t\t.getUserMedia(location, {\n\t\t\t\taudio: false,\n\t\t\t\tvideo: true\n\t\t\t})\n\t\t\t.then((stream) => {\n\t\t\t\tDemoLoggerHelper.logToConsole('getUserMedia', undefined, stream);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error);\n\t\t\t});\n\t}\n\n\tonPeerLeft(evt) {\n\t\tconst props = evt.detail;\n\t\tconst { isSelf, room, peerId } = props;\n\t\tconst location = Object.assign([], this.state[room.roomName]);\n\n\t\tif (!isSelf) {\n\t\t\tconst peerIndex = location.remotePeers.indexOf(peerId);\n\t\t\tif (peerIndex !== -1) {\n\t\t\t\tlocation.remotePeers.splice(peerIndex, 1);\n\t\t\t\tthis.setState({ [room.roomName]: location });\n\t\t\t}\n\t\t} else {\n\t\t\tthis.removeFeed(room.roomName);\n\t\t}\n\t}\n\n\tonServerPeerLeft(evt) {\n\t\t// const { room } = evt.detail;\n\t\t// this.removeFeed(room.roomName);\n\t\t// const location = Object.assign([], this.state[room.roomName]);\n\t\t// const peerIndex = location.remotePeers.indexOf(peerId);\n\t}\n\n\tonMessageChannelSelected(location, evt, checkbox) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tconst channel = checkbox.value;\n\t\tlocationState.messageChannel = channel;\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\tonPeerSelected(location, evt, selector) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tconst selectedPeers = selector.value;\n\t\tlocationState.selectedPeers = selectedPeers;\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\ttoggleAudioVideo(location, evt, checkbox) {\n\t\tconst locationState = Object.assign({}, this.state[location]);\n\t\tconst streamMuted = {\n\t\t\taudioMuted: checkbox.value === 'audio' ? !checkbox.checked : locationState.streamMuted.audioMuted,\n\t\t\tvideoMuted: checkbox.value === 'video' ? !checkbox.checked : locationState.streamMuted.videoMuted\n\t\t};\n\t\tlocationState.streamMuted = streamMuted;\n\t\tthis.setState({ [location]: locationState });\n\t}\n\n\trender() {\n\t\tconst { hongkong, singapore, newyork } = this.state;\n\t\tconst segmentArray = [\n\t\t\t{\n\t\t\t\tstateKey: 'hongkong',\n\t\t\t\tbuttonText: 'Join Hong Kong Room',\n\t\t\t\tstateObject: hongkong\n\t\t\t},\n\t\t\t{\n\t\t\t\tstateKey: 'singapore',\n\t\t\t\tbuttonText: 'Join Singapore Room',\n\t\t\t\tstateObject: singapore\n\t\t\t},\n\t\t\t{\n\t\t\t\tstateKey: 'newyork',\n\t\t\t\tbuttonText: 'Join New York Room',\n\t\t\t\tstateObject: newyork\n\t\t\t}\n\t\t];\n\n\t\tconst panels = segmentArray.map((segment, index) => {\n\t\t\treturn {\n\t\t\t\tkey: `panel-${index}`,\n\t\t\t\ttitle: `${segment.stateObject.title}`,\n\t\t\t\tcontent: {\n\t\t\t\t\tcontent: (\n\t\t\t\t\t\t<RoomSegment\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tsendMessage={this.sendMessage}\n\t\t\t\t\t\t\tuserNameEntered={this.userNameEntered}\n\t\t\t\t\t\t\tupdateUsername={this.updateUsername}\n\t\t\t\t\t\t\tmessageEntered={this.messageEntered}\n\t\t\t\t\t\t\ttoggleAudioVideo={this.toggleAudioVideo}\n\t\t\t\t\t\t\tjoinRoom={this.joinRoom}\n\t\t\t\t\t\t\tlocation={segment.stateObject}\n\t\t\t\t\t\t\tbuttonText={segment.buttonText}\n\t\t\t\t\t\t\tstateKey={segment.stateKey}\n\t\t\t\t\t\t\tgetConnectionStatus={this.getConnectionStatus}\n\t\t\t\t\t\t\trefreshDataChannel={this.refreshDataChannel}\n\t\t\t\t\t\t\trefreshConnections={this.refreshConnections}\n\t\t\t\t\t\t\tshareScreen={this.shareScreen}\n\t\t\t\t\t\t\tshareScreenReplace={this.shareScreenReplace}\n\t\t\t\t\t\t\tgetPeerCustomSettings={this.getPeerCustomSettings}\n\t\t\t\t\t\t\tgetUserMedia={this.getUserMedia}\n\t\t\t\t\t\t\tleaveRoom={this.leaveRoom}\n\t\t\t\t\t\t\tstopStream={this.stopStream}\n\t\t\t\t\t\t\tstopScreen={this.stopScreen}\n\t\t\t\t\t\t\tRoomSegment={this.RoomSegment}\n\t\t\t\t\t\t\tonPeerSelected={this.onPeerSelected}\n\t\t\t\t\t\t\tonMessageChannelSelected={this.onMessageChannelSelected}\n\t\t\t\t\t\t\tstartRecording={this.startRecording}\n\t\t\t\t\t\t\tstopRecording={this.stopRecording}\n\t\t\t\t\t\t\tleaveAllRooms={this.leaveAllRooms}\n\t\t\t\t\t\t\tlockRoom={this.lockRoom}\n\t\t\t\t\t\t\tmuteStream={this.muteStream}\n\t\t\t\t\t\t\tsendStream={this.sendStream}\n\t\t\t\t\t\t\tgetPeersInRoom={this.getPeersInRoom}\n\t\t\t\t\t\t\tgetPeerInfo={this.getPeerInfo}\n\t\t\t\t\t\t\tgetUserData={this.getUserData}\n\t\t\t\t\t\t\tsetUserData={this.setUserData}\n\t\t\t\t\t\t\tgetPeersStream={this.getPeersStream}\n\t\t\t\t\t\t\tgetPeersDataChannels={this.getPeersDataChannels}\n\t\t\t\t\t\t\tgetPeersScreenshare={this.getPeersScreenshare}\n\t\t\t\t\t\t\tgetRecordings={this.getRecordings}\n\t\t\t\t\t\t\tgetStreamSources={this.getStreamSources}\n\t\t\t\t\t\t\tgetScreenSources={this.getScreenSources}\n\t\t\t\t\t\t\tgetPeers={this.getPeers}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\treturn (\n\t\t\t<Container fluid className=\"skylink-demo-body\" style={{ padding: '10px' }}>\n\t\t\t\t<Container fluid style={{ padding: '0' }}>\n\t\t\t\t\t<span style={{ margin: '5px' }}>Registered Demo Events (Logged on console) : </span>\n\t\t\t\t\t<br />\n\t\t\t\t\t<Button\n\t\t\t\t\t\tdisabled={this.state.registeredEvts.allEvts}\n\t\t\t\t\t\tcolor={this.state.registeredEvts.allEvts ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'allEvts'}\n\t\t\t\t\t>\n\t\t\t\t\t\tRegister All Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.candidate ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'candidate'}\n\t\t\t\t\t>\n\t\t\t\t\t\tCandidate Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.dataTransfer ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'dataTransfer'}\n\t\t\t\t\t>\n\t\t\t\t\t\tData Transfer Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.dataChannel ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'dataChannel'}\n\t\t\t\t\t>\n\t\t\t\t\t\tData Channel Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.media ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'media'}\n\t\t\t\t\t>\n\t\t\t\t\t\tMedia Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.peer ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'peer'}\n\t\t\t\t\t>\n\t\t\t\t\t\tPeer Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.peerHandshake ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'peerHandshake'}\n\t\t\t\t\t>\n\t\t\t\t\t\tPeer Handshake Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.room ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'room'}\n\t\t\t\t\t>\n\t\t\t\t\t\tRoom Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.socket ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'socket'}\n\t\t\t\t\t>\n\t\t\t\t\t\tSocket Evts\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tcolor={this.state.registeredEvts.stream ? 'green' : 'red'}\n\t\t\t\t\t\tonClick={this.toggleEvt.bind(this)}\n\t\t\t\t\t\tstyle={{ margin: '5px' }}\n\t\t\t\t\t\tvalue={'stream'}\n\t\t\t\t\t>\n\t\t\t\t\t\tStream Evts\n\t\t\t\t\t</Button>\n\t\t\t\t</Container>\n\t\t\t\t<Button primary onClick={this.prefetchGetUserMedia.bind(this)} style={{ margin: '5px' }}>\n\t\t\t\t\tPre-Fetch getUserMedia stream\n\t\t\t\t</Button>\n\t\t\t\t<Accordion styled defaultActiveIndex={[ 0 ]} panels={panels} exclusive={false} fluid />\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nconst HorizontalLine = ({ color }) => (\n\t<div\n\t\tstyle={{\n\t\t\tborderBottomWidth: '0.5px',\n\t\t\tborderBottomStyle: 'solid',\n\t\t\tborderBottomColor: color,\n\t\t\tpadding: '5px 5px 10px',\n\t\t\topacity: 0.3\n\t\t}}\n\t/>\n);\n\nconst UserFormFieldCmp = (props) => {\n\tconst { location, stateKey, buttonText, userNameEntered, joinRoom, toggleAudioVideo } = props;\n\treturn (\n\t\t<Grid.Row>\n\t\t\t<Grid.Column width={3}>\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={location.username}\n\t\t\t\t\t\t\tonChange={userNameEntered.bind(this, stateKey)}\n\t\t\t\t\t\t\tplaceholder=\"@user\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Form.Field>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tloading={location.showJoinRoomLoader}\n\t\t\t\t\t\tprimary\n\t\t\t\t\t\tdisabled={location.username === ''}\n\t\t\t\t\t\tonClick={joinRoom.bind(this, stateKey)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{buttonText}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<div style={{ padding: '5px' }}>\n\t\t\t\t\t\t<label style={{ paddingRight: '5px' }}>Audio</label>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tstyle={{ verticalAlign: 'middle' }}\n\t\t\t\t\t\t\tvalue={'audio'}\n\t\t\t\t\t\t\tchecked={!location.streamMuted.audioMuted}\n\t\t\t\t\t\t\tonClick={toggleAudioVideo.bind(this, stateKey)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<label style={{ paddingRight: '5px' }}>Video</label>\n\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\tstyle={{ verticalAlign: 'middle' }}\n\t\t\t\t\t\t\tvalue={'video'}\n\t\t\t\t\t\t\tchecked={!location.streamMuted.videoMuted}\n\t\t\t\t\t\t\tonClick={toggleAudioVideo.bind(this, stateKey)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</Grid.Column>\n\t\t</Grid.Row>\n\t);\n};\n\nconst LocalFeedColumn = (props) => {\n\tconst { stateKey, location } = props;\n\treturn (\n\t\t<Grid.Column width={6}>\n\t\t\t<Header as=\"div\" attached=\"top\">\n\t\t\t\t<Header.Content style={{ padding: '0px' }}>\n\t\t\t\t\t{location.username} ({location.peerId})\n\t\t\t\t</Header.Content>\n\t\t\t\t<Messaging {...props} />\n\t\t\t</Header>\n\t\t\t<Segment attached>\n\t\t\t\t<video autoPlay muted style={{ width: '100%' }} playsInline id={`local-feed_${stateKey}`} />\n\t\t\t\t<img\n\t\t\t\t\tsrc={icon}\n\t\t\t\t\tstyle={{ width: '100%', display: 'none', padding: '1rem 5rem' }}\n\t\t\t\t\tid={`local-feed_icon_${stateKey}`}\n\t\t\t\t/>\n\t\t\t\t<video autoPlay muted style={{ width: '100%' }} playsInline id={`local-feed_screen_${stateKey}`} />\n\t\t\t\t<PublicMethodsForRoom {...props} />\n\t\t\t</Segment>\n\t\t</Grid.Column>\n\t);\n};\n\nconst RemoteFeedColumn = (props) => {\n\tconst { stateKey, location: { remotePeers } } = props;\n\treturn (\n\t\t<Grid.Column width={10}>\n\t\t\t<Header as=\"div\" attached=\"top\">\n\t\t\t\t<Header.Content style={{ padding: '0px' }}>Remote Peers</Header.Content>\n\t\t\t</Header>\n\t\t\t<Segment attached>\n\t\t\t\t<Grid columns={4} padded>\n\t\t\t\t\t{remotePeers.map((peerId) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Grid.Column key={peerId}>\n\t\t\t\t\t\t\t\t<label id={`remote-feed_peerId_${peerId}_${stateKey}`}>{peerId}</label>\n\t\t\t\t\t\t\t\t<video\n\t\t\t\t\t\t\t\t\tautoPlay\n\t\t\t\t\t\t\t\t\tplaysInline\n\t\t\t\t\t\t\t\t\tid={`remote-feed_${peerId}_${stateKey}`}\n\t\t\t\t\t\t\t\t\tstyle={{ width: '100%' }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\talt=\"The feed of remote peer\"\n\t\t\t\t\t\t\t\t\tsrc={icon}\n\t\t\t\t\t\t\t\t\tstyle={{ width: '100%', display: 'none', padding: '0.5rem 1rem' }}\n\t\t\t\t\t\t\t\t\tid={`remote-feed_icon_${stateKey}`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<video\n\t\t\t\t\t\t\t\t\tautoPlay\n\t\t\t\t\t\t\t\t\tplaysInline\n\t\t\t\t\t\t\t\t\tid={`remote-feed_screen_${peerId}_${stateKey}`}\n\t\t\t\t\t\t\t\t\tstyle={{ width: '50%' }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<audio\n\t\t\t\t\t\t\t\t\tautoPlay\n\t\t\t\t\t\t\t\t\tplaysInline\n\t\t\t\t\t\t\t\t\tid={`remote-feed_audio_${peerId}_${stateKey}`}\n\t\t\t\t\t\t\t\t\tstyle={{ width: '50%' }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Grid>\n\t\t\t</Segment>\n\t\t</Grid.Column>\n\t);\n};\n\nconst Messaging = (props) => {\n\tconst { stateKey, location, sendMessage, messageEntered, onPeerSelected, onMessageChannelSelected } = props;\n\tconst peerSelectorOptions = location.remotePeers.map((remotePeer) => {\n\t\treturn {\n\t\t\ttext: remotePeer,\n\t\t\tvalue: remotePeer\n\t\t};\n\t});\n\treturn (\n\t\t<Modal\n\t\t\ttrigger={\n\t\t\t\t<Button primary size=\"mini\" floated=\"right\" style={{ marginTop: '-5px' }}>\n\t\t\t\t\tMessaging\n\t\t\t\t</Button>\n\t\t\t}\n\t\t>\n\t\t\t<Modal.Header>Messaging</Modal.Header>\n\t\t\t<Modal.Content>\n\t\t\t\t<Modal.Description>\n\t\t\t\t\t{location.messages.map((message, index) => {\n\t\t\t\t\t\tconst { isSelf, peerInfo, message: { content, isPrivate, isDataChannel } } = message;\n\t\t\t\t\t\tlet toPrint = isSelf ? 'You:' : `${peerInfo.userData.username}:`;\n\t\t\t\t\t\tconst channelUsed = isDataChannel ? 'P2P' : 'SIG';\n\t\t\t\t\t\ttoPrint += ` [${isPrivate ? `Private | ${channelUsed} |` : `Public | ${channelUsed} |`}]`;\n\t\t\t\t\t\ttoPrint += ` ${content}`;\n\t\t\t\t\t\treturn <p key={index}>{toPrint}</p>;\n\t\t\t\t\t})}\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t\t<Grid>\n\t\t\t\t\t\t\t\t<Grid.Column width={12}>\n\t\t\t\t\t\t\t\t\t<label>Select Peer</label>\n\t\t\t\t\t\t\t\t\t<Dropdown\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select Peer\"\n\t\t\t\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\t\t\t\tfluid\n\t\t\t\t\t\t\t\t\t\tselection\n\t\t\t\t\t\t\t\t\t\toptions={peerSelectorOptions}\n\t\t\t\t\t\t\t\t\t\tonChange={onPeerSelected.bind(this, stateKey)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column width={4}>\n\t\t\t\t\t\t\t\t\t<Form>\n\t\t\t\t\t\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t\t\t\t\t\tChoose Channel <b>{`1234`}</b>\n\t\t\t\t\t\t\t\t\t\t</Form.Field>\n\t\t\t\t\t\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\tradio\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"P2P Message\"\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"channelRdoGroup\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"P2P\"\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={location.messageChannel === 'P2P'}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={onMessageChannelSelected.bind(this, stateKey)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Form.Field>\n\t\t\t\t\t\t\t\t\t\t<Form.Field>\n\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\tradio\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Signaling Message\"\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"channelRdoGroup\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"SIG\"\n\t\t\t\t\t\t\t\t\t\t\t\tchecked={location.messageChannel === 'SIG'}\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={onMessageChannelSelected.bind(this, stateKey)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</Form.Field>\n\t\t\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t<label>Enter Message</label>\n\t\t\t\t\t\t\t<input onChange={messageEntered.bind(this, stateKey)} placeholder=\"@message\" />\n\t\t\t\t\t\t</Form.Field>\n\t\t\t\t\t\t<Button disabled={location.message === ''} primary onClick={sendMessage.bind(this, stateKey)}>\n\t\t\t\t\t\t\tSend Message\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form>\n\t\t\t\t</Modal.Description>\n\t\t\t</Modal.Content>\n\t\t</Modal>\n\t);\n};\n\nconst PublicMethodsForRoom = (props) => {\n\tconst {\n\t\tstateKey,\n\t\tlocation,\n\t\tupdateUsername,\n\t\tgetConnectionStatus,\n\t\trefreshDataChannel,\n\t\trefreshConnections,\n\t\tshareScreen,\n\t\tgetPeerCustomSettings,\n\t\tgetUserMedia,\n\t\tstopStream,\n\t\tstopScreen,\n\t\tleaveRoom,\n\t\tlockRoom,\n\t\tleaveAllRooms,\n\t\tshareScreenReplace,\n\t\tmuteStream,\n\t\tstopRecording,\n\t\tstartRecording,\n\t\tsendStream,\n\t\tgetPeersInRoom,\n\t\tgetPeerInfo,\n\t\tgetUserData,\n\t\tsetUserData,\n\t\tgetPeersStream,\n\t\tgetPeersDataChannels,\n\t\tgetPeersScreenshare,\n\t\tgetRecordings,\n\t\tgetStreamSources,\n\t\tgetScreenSources,\n\t\tgetPeers\n\t} = props;\n\treturn (\n\t\t<Grid.Column>\n\t\t\t<Form>\n\t\t\t\t<Form.Field>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={location.newUsername}\n\t\t\t\t\t\tonChange={updateUsername.bind(this, stateKey)}\n\t\t\t\t\t\tplaceholder=\"@user\"\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tusername={stateKey.newUsername}\n\t\t\t\t\t\tcompact\n\t\t\t\t\t\tclassName=\"public-method-btn\"\n\t\t\t\t\t\tprimary\n\t\t\t\t\t\tonClick={setUserData.bind(this, stateKey)}\n\t\t\t\t\t>\n\t\t\t\t\t\tSet User Data\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getUserData.bind(this, stateKey)}>\n\t\t\t\t\t\tGet User Data\n\t\t\t\t\t</Button>\n\t\t\t\t</Form.Field>\n\t\t\t</Form>\n\t\t\t<HorizontalLine color=\"light-grey\" />\n\t\t\t<Button compact color=\"red\" className=\"public-method-btn\" onClick={leaveRoom.bind(this, stateKey)}>\n\t\t\t\tLeave Room\n\t\t\t</Button>\n\t\t\t<Button compact color=\"red\" className=\"public-method-btn\" onClick={leaveAllRooms.bind(this, stateKey)}>\n\t\t\t\tLeave All Rooms\n\t\t\t</Button>\n\t\t\t<Button compact color=\"yellow\" className=\"public-method-btn\" onClick={lockRoom.bind(this, stateKey)}>\n\t\t\t\t{location.roomLocked ? 'Unlock Room' : 'Lock Room'}\n\t\t\t</Button>\n\t\t\t<HorizontalLine color=\"light-grey\" />\n\t\t\t<Button\n\t\t\t\tcompact\n\t\t\t\tcolor={location.streamMuted.audioMuted ? 'green' : 'red'}\n\t\t\t\tclassName=\"public-method-btn\"\n\t\t\t\tonClick={muteStream.bind(this, stateKey)}\n\t\t\t\tvalue={'audio'}\n\t\t\t>\n\t\t\t\t{location.streamMuted.audioMuted ? 'Unmute Audio' : 'Mute Audio'}\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tcompact\n\t\t\t\tcolor={location.streamMuted.videoMuted ? 'green' : 'red'}\n\t\t\t\tclassName=\"public-method-btn\"\n\t\t\t\tonClick={muteStream.bind(this, stateKey)}\n\t\t\t\tvalue={'video'}\n\t\t\t>\n\t\t\t\t{location.streamMuted.videoMuted ? 'Unmute Video' : 'Mute Video'}\n\t\t\t</Button>\n\t\t\t<HorizontalLine color=\"light-grey\" />\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={sendStream.bind(this, stateKey)}>\n\t\t\t\tSend Stream\n\t\t\t</Button>\n\t\t\t<Button compact color=\"red\" className=\"public-method-btn\" onClick={stopStream.bind(this, stateKey)}>\n\t\t\t\tStop Stream\n\t\t\t</Button>\n\t\t\t<HorizontalLine color=\"light-grey\" />\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={shareScreen.bind(this, stateKey)}>\n\t\t\t\tShare Screen\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={shareScreenReplace.bind(this, stateKey)}>\n\t\t\t\tShare Screen (Replace)\n\t\t\t</Button>\n\t\t\t<Button compact color=\"red\" className=\"public-method-btn\" onClick={stopScreen.bind(this, stateKey)}>\n\t\t\t\tStop Screen\n\t\t\t</Button>\n\t\t\t<HorizontalLine color=\"light-grey\" />\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={startRecording.bind(this, stateKey)}>\n\t\t\t\tStart Recording\n\t\t\t</Button>\n\t\t\t<Button compact color=\"red\" className=\"public-method-btn\" onClick={stopRecording.bind(this, stateKey)}>\n\t\t\t\tStop Recording\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getRecordings.bind(this, stateKey)}>\n\t\t\t\tGet Recordings\n\t\t\t</Button>\n\t\t\t<HorizontalLine color=\"light-grey\" />\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={refreshDataChannel.bind(this, stateKey)}>\n\t\t\t\tRefresh Data Channel\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={refreshConnections.bind(this, stateKey)}>\n\t\t\t\tRefresh Connections\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getConnectionStatus.bind(this, stateKey)}>\n\t\t\t\tGet Connection Status\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getPeerCustomSettings.bind(this, stateKey)}>\n\t\t\t\tGet Peer Custom Settings\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getUserMedia.bind(this, stateKey)}>\n\t\t\t\tGet User Media\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getPeersInRoom.bind(this, stateKey)}>\n\t\t\t\tGet Peers In Room\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getPeerInfo.bind(this, stateKey)}>\n\t\t\t\tGet Peer Info\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getPeersStream.bind(this, stateKey)}>\n\t\t\t\tGet Peers Stream\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getPeersDataChannels.bind(this, stateKey)}>\n\t\t\t\tGet Peers Data Channels\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getPeersScreenshare.bind(this, stateKey)}>\n\t\t\t\tGet Peers Screenshare\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getStreamSources.bind(this, stateKey)}>\n\t\t\t\tGet Stream Sources\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getScreenSources.bind(this, stateKey)}>\n\t\t\t\tGet Screen Sources\n\t\t\t</Button>\n\t\t\t<Button compact className=\"public-method-btn\" primary onClick={getPeers.bind(this, stateKey)}>\n\t\t\t\tGet Peers (Privilege Key)\n\t\t\t</Button>\n\t\t</Grid.Column>\n\t);\n};\n\nconst RoomSegment = (props) => {\n\tconst {\n\t\tlocation,\n\t\tstateKey,\n\t\tbuttonText,\n\t\tjoinRoom,\n\t\ttoggleAudioVideo,\n\t\tupdateUsername,\n\t\tuserNameEntered,\n\t\tsendMessage,\n\t\tmessageEntered,\n\t\tgetConnectionStatus,\n\t\trefreshDataChannel,\n\t\trefreshConnections,\n\t\tshareScreen,\n\t\tgetPeerCustomSettings,\n\t\tgetUserMedia,\n\t\tstopStream,\n\t\tstopScreen,\n\t\tleaveRoom,\n\t\tonPeerSelected,\n\t\tonMessageChannelSelected,\n\t\tleaveAllRooms,\n\t\tlockRoom,\n\t\tshareScreenReplace,\n\t\tmuteStream,\n\t\tstartRecording,\n\t\tstopRecording,\n\t\tsendStream,\n\t\tgetPeersInRoom,\n\t\tgetPeerInfo,\n\t\tgetUserData,\n\t\tsetUserData,\n\t\tgetPeersStream,\n\t\tgetPeersDataChannels,\n\t\tgetPeersScreenshare,\n\t\tgetRecordings,\n\t\tgetStreamSources,\n\t\tgetScreenSources,\n\t\tgetPeers\n\t} = props;\n\treturn (\n\t\t<Grid celled=\"internally\">\n\t\t\t{!location.inRoom ? (\n\t\t\t\t<UserFormFieldCmp\n\t\t\t\t\tlocation={location}\n\t\t\t\t\tstateKey={stateKey}\n\t\t\t\t\tbuttonText={buttonText}\n\t\t\t\t\tjoinRoom={joinRoom}\n\t\t\t\t\ttoggleAudioVideo={toggleAudioVideo}\n\t\t\t\t\tuserNameEntered={userNameEntered}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<Grid.Row>\n\t\t\t\t\t<LocalFeedColumn\n\t\t\t\t\t\tstateKey={stateKey}\n\t\t\t\t\t\tlocation={location}\n\t\t\t\t\t\tsendMessage={sendMessage}\n\t\t\t\t\t\tmessageEntered={messageEntered}\n\t\t\t\t\t\tupdateUsername={updateUsername}\n\t\t\t\t\t\tgetConnectionStatus={getConnectionStatus}\n\t\t\t\t\t\trefreshDataChannel={refreshDataChannel}\n\t\t\t\t\t\trefreshConnections={refreshConnections}\n\t\t\t\t\t\tshareScreen={shareScreen}\n\t\t\t\t\t\tshareScreenReplace={shareScreenReplace}\n\t\t\t\t\t\tgetPeerCustomSettings={getPeerCustomSettings}\n\t\t\t\t\t\tgetUserMedia={getUserMedia}\n\t\t\t\t\t\tstopStream={stopStream}\n\t\t\t\t\t\tstopScreen={stopScreen}\n\t\t\t\t\t\tleaveRoom={leaveRoom}\n\t\t\t\t\t\tonPeerSelected={onPeerSelected}\n\t\t\t\t\t\tonMessageChannelSelected={onMessageChannelSelected}\n\t\t\t\t\t\tstartRecording={startRecording}\n\t\t\t\t\t\tstopRecording={stopRecording}\n\t\t\t\t\t\tleaveAllRooms={leaveAllRooms}\n\t\t\t\t\t\tlockRoom={lockRoom}\n\t\t\t\t\t\tmuteStream={muteStream}\n\t\t\t\t\t\tsendStream={sendStream}\n\t\t\t\t\t\tgetPeersInRoom={getPeersInRoom}\n\t\t\t\t\t\tgetPeerInfo={getPeerInfo}\n\t\t\t\t\t\tgetUserData={getUserData}\n\t\t\t\t\t\tsetUserData={setUserData}\n\t\t\t\t\t\tgetPeersStream={getPeersStream}\n\t\t\t\t\t\tgetPeersDataChannels={getPeersDataChannels}\n\t\t\t\t\t\tgetPeersScreenshare={getPeersScreenshare}\n\t\t\t\t\t\tgetRecordings={getRecordings}\n\t\t\t\t\t\tgetStreamSources={getStreamSources}\n\t\t\t\t\t\tgetScreenSources={getScreenSources}\n\t\t\t\t\t\tgetPeers={getPeers}\n\t\t\t\t\t/>\n\t\t\t\t\t<RemoteFeedColumn stateKey={stateKey} location={location} />\n\t\t\t\t</Grid.Row>\n\t\t\t)}\n\t\t</Grid>\n\t);\n};\n\nexport default SkylinkDemo;\n","import React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react'\n\nclass Header extends Component {\n  render() {\n    return (\n      <Container fluid className='skylink-header'>\n          <p className='text-white'>\n            SkylinkJS&nbsp;&nbsp;<span className='text-muted'>ReactJS Client</span>\n          </p>\n      </Container>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react'\nimport Header from './cmp/Header';\nimport SkylinkDemo from './cmp/SkylinkDemo';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container fluid>\n        <Header />\n        <SkylinkDemo />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","/* eslint-disable */\n// Import webrtc-adapter and add extra methods\nimport AdapterJS from 'webrtc-adapter';\n\nAdapterJS.options = AdapterJS.options || {};\n\n// True is AdapterJS.onwebrtcready was already called, false otherwise\n// Used to make sure AdapterJS.onwebrtcready is only called once\nAdapterJS.onwebrtcreadyDone = false;\n\nAdapterJS.WebRTCPlugin = {\n  plugin: null,\n};\n\nAdapterJS._onwebrtcreadies = [];\n\nAdapterJS.webRTCReady = function (baseCallback) {\n  if (typeof baseCallback !== 'function') {\n    throw new Error('Callback provided is not a function');\n  }\n\n  var callback = function () {\n    // Make users having requirejs to use the webRTCReady function to define first\n    // When you set a setTimeout(definePolyfill, 0), it overrides the WebRTC function\n    // This is be more than 0s\n    if (typeof window.require === 'function' &&\n      typeof AdapterJS._defineMediaSourcePolyfill === 'function') {\n      AdapterJS._defineMediaSourcePolyfill();\n    }\n\n    // All WebRTC interfaces are ready, just call the callback\n    baseCallback(null !== AdapterJS.WebRTCPlugin.plugin);\n  };\n\n\n  if (true === AdapterJS.onwebrtcreadyDone) {\n    callback();\n  } else {\n    // will be triggered automatically when your browser/plugin is ready.\n    AdapterJS._onwebrtcreadies.push(callback);\n  }\n};\n\nAdapterJS.maybeThroughWebRTCReady = function() {\n  if (!AdapterJS.onwebrtcreadyDone) {\n    AdapterJS.onwebrtcreadyDone = true;\n\n    // If new interface for multiple callbacks used\n    if (AdapterJS._onwebrtcreadies.length) {\n      AdapterJS._onwebrtcreadies.forEach(function (callback) {\n        if (typeof(callback) === 'function') {\n          callback(AdapterJS.WebRTCPlugin.plugin !== null);\n        }\n      });\n      // Else if no callbacks on new interface assuming user used old(deprecated) way to set callback through AdapterJS.onwebrtcready = ...\n    } else if (typeof(AdapterJS.onwebrtcready) === 'function') {\n      AdapterJS.onwebrtcready(AdapterJS.WebRTCPlugin.plugin !== null);\n    }\n  }\n};\n\n///////////////////////////////////////////////////////////////////\n// ADAPTERJS BROWSER AND VERSION DETECTION\n//\n// Detected browser agent name. Types are:\n// - 'firefox': Firefox browser.\n// - 'chrome': Chrome browser.\n// - 'opera': Opera browser.\n// - 'safari': Safari browser.\n// - 'IE' - Internet Explorer browser.\nwindow.webrtcDetectedBrowser = null;\n\n// Detected browser version.\nwindow.webrtcDetectedVersion = null;\n\n// The minimum browser version still supported by AJS.\nwindow.webrtcMinimumVersion  = null;\n\n// The type of DC supported by the browser\nwindow.webrtcDetectedDCSupport = null;\n\n// This function helps to retrieve the webrtc detected browser information.\n// This sets:\n// - webrtcDetectedBrowser: The browser agent name.\n// - webrtcDetectedVersion: The browser version.\n// - webrtcMinimumVersion: The minimum browser version still supported by AJS.\n// - webrtcDetectedType: The types of webRTC support.\n//   - 'moz': Mozilla implementation of webRTC.\n//   - 'webkit': WebKit implementation of webRTC.\n//   - 'plugin': Using the plugin implementation.\nAdapterJS.parseWebrtcDetectedBrowser = function () {\n  var hasMatch = null;\n\n  // Detect Opera (8.0+)\n  if ((!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0) {\n    hasMatch = navigator.userAgent.match(/OPR\\/(\\d+)/i) || [];\n\n    window.webrtcDetectedBrowser   = 'opera';\n    window.webrtcDetectedVersion   = parseInt(hasMatch[1] || '0', 10);\n    window.webrtcMinimumVersion    = 26;\n    window.webrtcDetectedType      = 'webkit';\n    window.webrtcDetectedDCSupport = 'SCTP'; // Opera 20+ uses Chrome 33\n\n    // Detect Bowser on iOS\n  } else if (navigator.userAgent.match(/Bowser\\/[0-9.]*/g)) {\n    hasMatch = navigator.userAgent.match(/Bowser\\/[0-9.]*/g) || [];\n\n    var chromiumVersion = parseInt((navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./i) || [])[2] || '0', 10);\n\n    window.webrtcDetectedBrowser   = 'bowser';\n    window.webrtcDetectedVersion   = parseFloat((hasMatch[0] || '0/0').split('/')[1], 10);\n    window.webrtcMinimumVersion    = 0;\n    window.webrtcDetectedType      = 'webkit';\n    window.webrtcDetectedDCSupport = chromiumVersion > 30 ? 'SCTP' : 'RTP';\n\n\n    // Detect Opera on iOS (does not support WebRTC yet)\n  } else if (navigator.userAgent.indexOf('OPiOS') > 0) {\n    hasMatch = navigator.userAgent.match(/OPiOS\\/([0-9]+)\\./);\n\n    // Browser which do not support webrtc yet\n    window.webrtcDetectedBrowser   = 'opera';\n    window.webrtcDetectedVersion   = parseInt(hasMatch[1] || '0', 10);\n    window.webrtcMinimumVersion    = 0;\n    window.webrtcDetectedType      = null;\n    window.webrtcDetectedDCSupport = null;\n\n    // Detect Chrome on iOS (does not support WebRTC yet)\n  } else if (navigator.userAgent.indexOf('CriOS') > 0) {\n    hasMatch = navigator.userAgent.match(/CriOS\\/([0-9]+)\\./) || [];\n\n    window.webrtcDetectedVersion   = parseInt(hasMatch[1] || '0', 10);\n    window.webrtcMinimumVersion    = 0;\n    window.webrtcDetectedType      = null;\n    window.webrtcDetectedBrowser   = 'chrome';\n    window.webrtcDetectedDCSupport = null;\n\n    // Detect Firefox on iOS (does not support WebRTC yet)\n  } else if (navigator.userAgent.indexOf('FxiOS') > 0) {\n    hasMatch = navigator.userAgent.match(/FxiOS\\/([0-9]+)\\./) || [];\n\n    // Browser which do not support webrtc yet\n    window.webrtcDetectedBrowser   = 'firefox';\n    window.webrtcDetectedVersion   = parseInt(hasMatch[1] || '0', 10);\n    window.webrtcMinimumVersion    = 0;\n    window.webrtcDetectedType      = null;\n    window.webrtcDetectedDCSupport = null;\n\n    // Detect IE (6-11)\n  } else if (/*@cc_on!@*/false || !!document.documentMode) {\n    hasMatch = /\\brv[ :]+(\\d+)/g.exec(navigator.userAgent) || [];\n\n    window.webrtcDetectedBrowser   = 'IE';\n    window.webrtcDetectedVersion   = parseInt(hasMatch[1], 10);\n    window.webrtcMinimumVersion    = 9;\n    window.webrtcDetectedType      = 'plugin';\n    window.webrtcDetectedDCSupport = 'SCTP';\n\n    if (!webrtcDetectedVersion) {\n      hasMatch = /\\bMSIE[ :]+(\\d+)/g.exec(navigator.userAgent) || [];\n\n      window.webrtcDetectedVersion = parseInt(hasMatch[1] || '0', 10);\n    }\n\n    // Detect Edge (20+)\n  } else if (!!window.StyleMedia || navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) {\n    hasMatch = navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/) || [];\n\n    // Previous webrtc/adapter uses minimum version as 10547 but checking in the Edge release history,\n    // It's close to 13.10547 and ObjectRTC API is fully supported in that version\n\n    window.webrtcDetectedBrowser   = 'edge';\n    window.webrtcDetectedVersion   = parseFloat((hasMatch[0] || '0/0').split('/')[1], 10);\n    window.webrtcMinimumVersion    = 13.10547;\n    window.webrtcDetectedType      = 'ms';\n    window.webrtcDetectedDCSupport = null;\n\n    // Detect Firefox (1.0+)\n    // Placed before Safari check to ensure Firefox on Android is detected\n  } else if (typeof InstallTrigger !== 'undefined' || navigator.userAgent.indexOf('irefox') > 0) {\n    hasMatch = navigator.userAgent.match(/Firefox\\/([0-9]+)\\./) || [];\n\n    window.webrtcDetectedBrowser   = 'firefox';\n    window.webrtcDetectedVersion   = parseInt(hasMatch[1] || '0', 10);\n    window.webrtcMinimumVersion    = 33;\n    window.webrtcDetectedType      = 'moz';\n    window.webrtcDetectedDCSupport = 'SCTP';\n\n    // Detect Chrome (1+ and mobile)\n    // Placed before Safari check to ensure Chrome on Android is detected\n  } else if ((!!window.chrome && !!window.chrome.webstore) || navigator.userAgent.indexOf('Chrom') > 0) {\n    hasMatch = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./i) || [];\n\n    window.webrtcDetectedBrowser   = 'chrome';\n    window.webrtcDetectedVersion   = parseInt(hasMatch[2] || '0', 10);\n    window.webrtcMinimumVersion    = 38;\n    window.webrtcDetectedType      = 'webkit';\n    window.webrtcDetectedDCSupport = window.webrtcDetectedVersion > 30 ? 'SCTP' : 'RTP'; // Chrome 31+ supports SCTP without flags\n\n    // Detect Safari\n  } else if (/constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || safari.pushNotification) || navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./) || navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n    hasMatch = navigator.userAgent.match(/version\\/(\\d+)\\.(\\d+)/i) || [];\n    var AppleWebKitBuild = navigator.userAgent.match(/AppleWebKit\\/(\\d+)/i) || [];\n\n    var isMobile      = navigator.userAgent.match(/(iPhone|iPad)/gi);\n    var hasNativeImpl = AppleWebKitBuild.length >= 1 && AppleWebKitBuild[1] >= 604;\n    window.webrtcDetectedBrowser   = 'safari';\n    window.webrtcDetectedVersion   = parseInt(hasMatch[1] || '0', 10);\n    window.webrtcMinimumVersion    = 7;\n    if (isMobile) {\n      window.webrtcDetectedType    = hasNativeImpl ? 'AppleWebKit' : null;\n    } else { // desktop\n      var majorVersion = window.webrtcDetectedVersion;\n      var minorVersion = parseInt(hasMatch[2] || '0', 10);\n      var nativeImplIsOverridable = majorVersion == 11 && minorVersion < 2;\n      window.webrtcDetectedType    = hasNativeImpl && !(AdapterJS.options.forceSafariPlugin && nativeImplIsOverridable) ? 'AppleWebKit' : 'plugin';\n    }\n    window.webrtcDetectedDCSupport = 'SCTP';\n  }\n\n  // Scope it to AdapterJS and window for better consistency\n  AdapterJS.webrtcDetectedBrowser   = window.webrtcDetectedBrowser;\n  AdapterJS.webrtcDetectedVersion   = window.webrtcDetectedVersion;\n  AdapterJS.webrtcMinimumVersion    = window.webrtcMinimumVersion;\n  AdapterJS.webrtcDetectedType      = window.webrtcDetectedType;\n  AdapterJS.webrtcDetectedDCSupport = window.webrtcDetectedDCSupport;\n};\n\n// END OF ADAPTERJS BROWSER AND VERSION DETECTION\n///////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////\n// EXTENSION FOR CHROME, FIREFOX AND EDGE\n// Includes additional shims\n// -- attachMediaStream\n// -- reattachMediaStream\n// -- a call to AdapterJS.maybeThroughWebRTCReady (notifies WebRTC is ready)\nAdapterJS.addExtensions = function() {\n  var attachMediaStream = null;\n  var reattachMediaStream = null;\n// Add support for legacy functions\n  if ( navigator.mozGetUserMedia ) {\n    // Attach a media stream to an element.\n    attachMediaStream = function(element, stream) {\n      element.srcObject = stream;\n      return element;\n    };\n\n    reattachMediaStream = function(to, from) {\n      to.srcObject = from.srcObject;\n      return to;\n    };\n  } else if ( navigator.webkitGetUserMedia ) {\n    // Attach a media stream to an element.\n    attachMediaStream = function(element, stream) {\n      if (AdapterJS.webrtcDetectedVersion >= 43) {\n        element.srcObject = stream;\n      } else if (typeof element.src !== 'undefined') {\n        element.src = URL.createObjectURL(stream);\n      } else {\n        console.error('Error attaching stream to element.');\n        // logging('Error attaching stream to element.');\n      }\n      return element;\n    };\n\n    reattachMediaStream = function(to, from) {\n      if (AdapterJS.webrtcDetectedVersion >= 43) {\n        to.srcObject = from.srcObject;\n      } else {\n        to.src = from.src;\n      }\n      return to;\n    };\n\n  } else if (AdapterJS.webrtcDetectedType === 'AppleWebKit') {\n    attachMediaStream = function(element, stream) {\n      element.srcObject = stream;\n      return element;\n    };\n    reattachMediaStream = function(to, from) {\n      to.srcObject = from.srcObject;\n      return to;\n    };\n  }\n\n// Propagate attachMediaStream and gUM in window and AdapterJS\n  window.attachMediaStream      = attachMediaStream;\n  window.reattachMediaStream    = reattachMediaStream;\n  AdapterJS.attachMediaStream   = attachMediaStream;\n  AdapterJS.reattachMediaStream = reattachMediaStream;\n};\n\n// END OF EXTENSION OF CHROME, FIREFOX AND EDGE\n///////////////////////////////////////////////////////////////////\n\n// Init browser detection\nAdapterJS.parseWebrtcDetectedBrowser();\n// Add extensions\nAdapterJS.addExtensions();\n// Signal AdapterJS loaded\nAdapterJS.maybeThroughWebRTCReady();\n\nexport default AdapterJS;\n","import Skylink from '../../index';\nimport helpers from './index';\n\nconst getSDPCommonSupports = (targetMid, sessionDescription = null, roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const offer = { audio: false, video: false };\n  const { AdapterJS } = window;\n  const { currentCodecSupport, peerInformations } = state;\n  const { beSilentOnParseLogs } = Skylink.getInitOptions();\n\n  if (!targetMid || !(sessionDescription && sessionDescription.sdp)) {\n    // TODO: Implement getCodecsSupport inside room-init\n    offer.video = !!(currentCodecSupport.video.h264 || currentCodecSupport.video.vp8);\n    offer.audio = !!currentCodecSupport.audio.opus;\n\n    if (targetMid) {\n      const peerAgent = ((peerInformations[targetMid] || {}).agent || {}).name || '';\n\n      if (AdapterJS.webrtcDetectedBrowser === peerAgent) {\n        offer.video = Object.keys(currentCodecSupport.video).length > 0;\n        offer.audio = Object.keys(currentCodecSupport.audio).length > 0;\n      }\n    }\n    return offer;\n  }\n\n  const remoteCodecs = helpers.getSDPCodecsSupport(targetMid, sessionDescription, beSilentOnParseLogs);\n  const localCodecs = currentCodecSupport;\n\n  /* eslint-disable no-restricted-syntax */\n  /* eslint-disable no-prototype-builtins */\n  for (const ac in localCodecs.audio) {\n    if (localCodecs.audio.hasOwnProperty(ac) && localCodecs.audio[ac] && remoteCodecs.audio[ac]) {\n      offer.audio = true;\n      break;\n    }\n  }\n\n  for (const vc in localCodecs.video) {\n    if (localCodecs.video.hasOwnProperty(vc) && localCodecs.video[vc] && remoteCodecs.video[vc]) {\n      offer.video = true;\n      break;\n    }\n  }\n\n  return offer;\n};\n\nexport default getSDPCommonSupports;\n","export const ON_INCOMING_STREAM = 'onIncomingStream';\nexport const ON_INCOMING_SCREEN_STREAM = 'onIncomingScreenStream';\nexport const STREAM_ENDED = 'streamEnded';\nexport const PEER_UPDATED = 'peerUpdated';\nexport const PEER_JOINED = 'peerJoined';\nexport const PEER_LEFT = 'peerLeft';\nexport const PEER_CONNECTION_STATE = 'peerConnectionState';\nexport const DATA_CHANNEL_STATE = 'dataChannelState';\nexport const ON_INCOMING_MESSAGE = 'onIncomingMessage';\nexport const HANDSHAKE_PROGRESS = 'handshakeProgress';\nexport const SERVER_PEER_JOINED = 'serverPeerJoined';\nexport const SERVER_PEER_LEFT = 'serverPeerLeft';\nexport const CANDIDATE_PROCESSING_STATE = 'candidateProcessingState';\nexport const CANDIDATE_GENERATION_STATE = 'candidateGenerationState';\nexport const CANDIDATES_GATHERED = 'candidatesGathered';\nexport const DATA_STREAM_STATE = 'dataStreamState';\nexport const DATA_TRANSFER_STATE = 'dataTransferState';\nexport const ON_INCOMING_DATA = 'onIncomingData';\nexport const ON_INCOMING_DATA_REQUEST = 'onIncomingDataRequest';\nexport const ON_INCOMING_DATA_STREAM = 'onIncomingDataStream';\nexport const ON_INCOMING_DATA_STREAM_STARTED = 'onIncomingDataStreamStarted';\nexport const ON_INCOMING_DATA_STREAM_STOPPED = 'onIncomingDataStreamStopped';\nexport const GET_PEERS_STATE_CHANGE = 'getPeersStateChange';\nexport const SESSION_DISCONNECT = 'sessionDisconnect';\nexport const STREAM_MUTED = 'streamMuted';\nexport const CHANNEL_OPEN = 'channelOpen';\nexport const CHANNEL_REOPEN = 'channelReopen';\nexport const CHANNEL_CLOSE = 'channelClose';\nexport const CHANNEL_MESSAGE = 'channelMessage';\nexport const CHANNEL_ERROR = 'channelError';\nexport const CHANNEL_RETRY = 'channelRetry';\nexport const SOCKET_ERROR = 'socketError';\nexport const SYSTEM_ACTION = 'systemAction';\nexport const MEDIA_ACCESS_FALLBACK = 'mediaAccessFallback';\nexport const MEDIA_ACCESS_REQUIRED = 'mediaAccessRequired';\nexport const MEDIA_ACCESS_STOPPED = 'mediaAccessStopped';\nexport const MEDIA_ACCESS_SUCCESS = 'mediaAccessSuccess';\nexport const RECORDING_STATE = 'recordingState';\nexport const LOCAL_MEDIA_MUTED = 'localMediaMuted';\nexport const MEDIA_ACCESS_ERROR = 'mediaAccessError';\nexport const GET_CONNECTION_STATUS_STATE_CHANGE = 'getConnectionStatusStateChange';\nexport const READY_STATE_CHANGE = 'readyStateChange';\nexport const ROOM_LOCK = 'roomLock';\nexport const INTRODUCE_STATE_CHANGE = 'introduceStateChange';\nexport const ICE_CONNECTION_STATE = 'iceConnectionState';\nexport const BYE = 'bye';\nexport const RTMP_STATE = 'rtmpState';\nexport const LOGGED_ON_CONSOLE = 'loggedOnConsole';\nexport const MEDIA_INFO_DELETED = 'mediaInfoDeleted';\nexport const STORED_MESSAGES = 'storedMessages';\nexport const ENCRYPT_SECRETS_UPDATED = 'encryptSecretsUpdated';\nexport const PERSISTENT_MESSAGE_STATE = 'persistentMessageState';\n","class SkylinkEvent {\n  constructor(name, detail) {\n    this.name = name;\n    this.detail = detail;\n  }\n}\n\nexport default SkylinkEvent;\n","import {\n  ON_INCOMING_STREAM,\n  ON_INCOMING_SCREEN_STREAM,\n  STREAM_ENDED,\n  STREAM_MUTED,\n} from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.onIncomingStream\n * @description Event triggered when receiving Peer Stream.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {String} detail.peerId - The peer's id\n * @param {MediaStream} detail.stream - The Stream object. To attach it to an element: <code>attachMediaStream(videoElement, stream);</code>.\n * @param {String} detail.streamId - The stream id.\n * @param {boolean} detail.isSelf -The flag if Peer is User.\n * @param {peerInfo} detail.peerInfo - The Peer session information.\n * @param {String} detail.isReplace - The The flag if the incoming stream has replaced an existing stream.\n * @param {String} detail.replacedStreamId - The streamId of the replaced stream.\n * @param {boolean} detail.isVideo - The flag if the incoming stream has a video track.\n * @param {boolean} detail.isAudio - The flag if the incoming stream has an audio track.\n * @alias SkylinkEvents.onIncomingStream\n * */\nexport const onIncomingStream = (detail = {}) => new SkylinkEvent(ON_INCOMING_STREAM, { detail });\n\n/**\n * @event SkylinkEvents.onIncomingScreenStream\n * @description Event triggered when receving Peer Screenshare Stream.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room.\n * @param {String} detail.peerId - The peer's id.\n * @param {MediaStream} detail.stream - The Stream object.\n * @param {String} detail.streamId - The Stream id.\n * @param {Boolean} detail.isSelf - The flag if Peer is User.\n * @param {peerInfo} detail.peerInfo - The Peer session information.\n * @param {Boolean} detail.isReplace - The flag if the incoming screenshare stream results from shareScreen() called with replaceUserMediaStream = true.\n * @param {boolean} detail.isVideo - The flag if the incoming screen stream has a video track.\n * @param {boolean} detail.isAudio - The flag if the incoming screen stream has an audio track.\n * */\nexport const onIncomingScreenStream = (detail = {}) => new SkylinkEvent(ON_INCOMING_SCREEN_STREAM, { detail });\n\n/**\n * @event SkylinkEvents.streamEnded\n * @description Event triggered when a Peer Stream streaming has stopped. Note that it may not be the currently sent Stream to User, and it also triggers when User leaves the Room for any currently sent Stream to User from Peer.\n * @param {Object} detail - Event's payload.\n * @param {String} detail.peerId - The Peer ID.\n * @param {SkylinkRoom} detail.room - The room.\n * @param {peerInfo} detail.peerInfo - The Peer session information. Object signature matches the <code>peerInfo</code> parameter payload received in the <code>peerJoined</code> event.\n * @param {Boolean} detail.isSelf The flag if Peer is User.\n * @param {Boolean} detail.isScreensharing The flag if Peer Stream is a screensharing Stream.\n * @param {String} detail.streamId The Stream ID.\n * @param {boolean} detail.isVideo - The flag if the ended stream has a video track.\n * @param {boolean} detail.isAudio - The flag if the ended stream has an audio track.\n * */\nexport const streamEnded = (detail = {}) => new SkylinkEvent(STREAM_ENDED, { detail });\n\n/**\n * @event SkylinkEvents.streamMuted\n * @description Event triggered when Peer Stream audio or video tracks has been muted / unmuted.\n * @param {Object} detail - Event's payload.\n * @param {String} detail.peerId -  The Peer ID.\n * @param {peerInfo} detail.peerInfo The Peer session information. Object signature matches the <code>peerInfo</code> parameter payload received in the <code>peerJoined</code> event.\n * @param {Boolean} detail.isSelf The flag if Peer is User.\n * @param {boolean} detail.isVideo - The flag if the muted stream has a video track.\n * @param {boolean} detail.isAudio - The flag if the muted stream has an audio track.\n * @param {boolean} detail.isScreensharing - The flag if the muted stream is a screensharing stream.\n * */\nexport const streamMuted = (detail = {}) => new SkylinkEvent(STREAM_MUTED, { detail });\n","import {\n  DATA_CHANNEL_STATE, ON_INCOMING_MESSAGE, STORED_MESSAGES, ENCRYPT_SECRETS_UPDATED, PERSISTENT_MESSAGE_STATE,\n} from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.onDataChannelStateChanged\n * @description Event triggered when a Datachannel connection state has changed.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {String} detail.peerId - The peer's id\n * @param {SkylinkConstants.DATA_CHANNEL_STATE} detail.state - The current Datachannel connection state.\n * @param {Error} detail.error - The error object. Defined only when <code>state</code> payload is <code>ERROR</code> or <code>SEND_MESSAGE_ERROR</code>.\n * @param {String} detail.channelName - The Datachannel ID.\n * @param {SkylinkConstants.DATA_CHANNEL_TYPE} detail.channelType - The Datachannel type.\n * @param {SkylinkConstants.DATA_CHANNEL_MESSAGE_ERROR} detail.messageType - The Datachannel sending Datachannel message error type.\n *   Defined only when <cod>state</code> payload is <code>SEND_MESSAGE_ERROR</code>.\n * @param {Object} detail.bufferAmount The Datachannel - buffered amount information.\n * @param {number} detail.bufferAmount.bufferedAmount - The size of currently queued data to send on the Datachannel connection.\n * @param {number} detail.bufferAmount.bufferedAmountLowThreshold - Threshold The current buffered amount low threshold configured.\n */\nexport const onDataChannelStateChanged = (detail = {}) => new SkylinkEvent(DATA_CHANNEL_STATE, { detail });\n\n/**\n * @event SkylinkEvents.onIncomingMessage\n * @description Event triggered when receiving message from Peer.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {JSON} detail.message - The message result.\n * @param {JSON|string} detail.message.content - The message.\n * @param {String} detail.message.senderPeerId - The sender Peer ID.\n * @param {String|Array} [detail.message.targetPeerId] The value of the <code>targetPeerId</code>\n *   defined in {@link Skylink#sendP2PMessage} or {@link Skylink#sendMessage}.\n *   Defined as User's Peer ID when <code>isSelf</code> payload value is <code>false</code>.\n *   Defined as <code>null</code> when provided <code>targetPeerId</code> in {@link Skylink#sendP2PMessage} or\n *   {@link Skylink#sendMessage} is not defined.\n * @param {Array} [detail.message.listOfPeers] The list of Peers that the message has been sent to.\n *  Defined only when <code>isSelf</code> payload value is <code>true</code>.\n * @param {boolean} detail.message.isPrivate The flag if message is targeted or not, basing\n *   off the <code>targetPeerId</code> parameter being defined in\n *   {@link Skylink#sendP2PMessage} or\n *   {@link Skylink#sendMessage}.\n * @param {boolean} detail.message.isDataChannel The flag if message is sent from\n *   {@link Skylink#sendP2PMessage}.\n * @param {String} detail.message.timeStamp The time stamp when the message was sent.\n * @param {String} detail.peerId The Peer ID.\n * @param {peerInfo} detail.peerInfo The Peer session information.\n *   Object signature matches the <code>peerInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:peerJoined|peerJoinedEvent}.\n * @param {boolean} detail.isSelf - The flag if Peer is User.\n */\nexport const onIncomingMessage = (detail = {}) => new SkylinkEvent(ON_INCOMING_MESSAGE, { detail });\n\n/**\n * @event SkylinkEvents.storedMessages\n * @description Event triggered when receiving stored messages from the Signaling Server.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {Array} detail.storedMessages - The stored messages result.\n * @param {String} detail.storedMessages[].targetPeerId - The value of the <code>targetPeerId</code>\n *   defined in {@link Skylink#sendP2PMessage} or {@link Skylink#sendMessage}.\n *   Defined as User's Peer ID when <code>isSelf</code> payload value is <code>false</code>.\n *   Defined as <code>null</code> when provided <code>targetPeerId</code> in {@link Skylink#sendP2PMessage} or\n *   {@link Skylink#sendMessage} is not defined.\n * @param {JSON|String} detail.storedMessages[].senderPeerId - The sender Peer ID.\n * @param {JSON|String} detail.storedMessages[].content - The message.\n * @param {JSON|String} detail.storedMessages[].timeStamp - The timestamp when the message was sent, in simplified extended ISO format.\n * @param {boolean} detail.storedMessages.isPrivate - The flag if message is targeted or not, basing\n *   off the <code>targetPeerId</code> parameter being defined in {@link Skylink#sendP2PMessage} or {@link Skylink#sendMessage}. Value will always\n *   be false for stored messages.\n * @param {boolean} detail.storedMessages.isDataChannel - The flag if message is sent from {@link Skylink#sendP2PMessage}. Value will always be\n * true for stored messages.\n * @param {String} detail.peerId - The Peer ID.\n * @param {peerInfo} detail.peerInfo - The Peer session information.\n *   Object signature matches the <code>peerInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:peerJoined|peerJoinedEvent}.\n * @param {boolean} detail.isSelf - The flag if Peer is User.\n */\nexport const storedMessages = (detail = {}) => new SkylinkEvent(STORED_MESSAGES, { detail });\n\n/**\n * @event SkylinkEvents.encryptSecretsUpdated\n * @description Event triggered when encrypt secret data is updated.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {Object} detail.encryptSecrets - The secretId and secret pair.\n * @param {String} detail.selectedSecretId - The id of the secret that is used for encryption and decryption of messages. If value is an\n * empty string, message will not be encrypted.\n * @param {String} detail.peerId - The Peer ID.\n * @param {peerInfo} detail.peerInfo - The Peer session information.\n *   Object signature matches the <code>peerInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:peerJoined|peerJoinedEvent}.\n */\nexport const encryptionSecretsUpdated = (detail = {}) => new SkylinkEvent(ENCRYPT_SECRETS_UPDATED, { detail });\n\n/**\n * @event SkylinkEvents.persistentMessageState\n * @description Event triggered when persistent message state changes.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {Object} detail.isPersistent - The flag if messages should be persistent.\n * @param {String} detail.peerId - The Peer ID.\n * @param {peerInfo} detail.peerInfo - The Peer session information.\n *   Object signature matches the <code>peerInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:peerJoined|peerJoinedEvent}.\n */\nexport const persistentMessageState = (detail = {}) => new SkylinkEvent(PERSISTENT_MESSAGE_STATE, { detail });\n","import { HANDSHAKE_PROGRESS, INTRODUCE_STATE_CHANGE } from './constants';\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @description Event triggered when a Peer connection establishment state has changed.\n * @event SkylinkEvents.handshakeProgress\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.HANDSHAKE_PROGRESS} detail.state The current Peer connection establishment state.\n * @param {String} detail.peerId The Peer ID.\n * @param {SkylinkRoom} detail.room The room.\n * @param {Error|String} [detail.error] The error object.\n *   Defined only when <code>state</code> is <code>ERROR</code>.\n */\nexport const handshakeProgress = (detail = {}) => new SkylinkEvent(HANDSHAKE_PROGRESS, { detail });\n\n/**\n * @description Event triggered when {@link Skylink#introducePeer}\n * introduction request state changes.\n * @event SkylinkEvents.introduceStateChange\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.INTRODUCE_STATE} detail.state The current <code>introducePeer()</code> introduction request state.\n * @param {String} detail.privilegedPeerId The User's privileged Peer ID.\n * @param {String} detail.sendingPeerId The Peer ID to be connected with <code>receivingPeerId</code>.\n * @param {String} detail.receivingPeerId The Peer ID to be connected with <code>sendingPeerId</code>.\n * @param {String} [detail.reason] The error object.\n *   Defined only when <code>state</code> payload is <code>ERROR</code>.\n * @ignore\n */\nexport const introduceStateChange = (detail = {}) => new SkylinkEvent(INTRODUCE_STATE_CHANGE, { detail });\n","/* eslint-disable import/prefer-default-export */\nimport { READY_STATE_CHANGE } from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.readyStateChange\n * @description Event triggered when <code>init()</code> method ready state changes.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.READY_STATE_CHANGE} detail.readyState - The current <code>init()</code> ready state.\n * @param {JSON} detail.error - The error result. Defined only when <code>state</code> is <code>ERROR</code>.\n * @param {Number} detail.error.status - The HTTP status code when failed.\n * @param {SkylinkConstants.READY_STATE_CHANGE_ERROR} detail.error.errorCode - The ready state change failure code.\n * @param {Error} detail.error.content - The error object.\n * @param {String} detail.room - The Room to The Room to retrieve session token for.\n */\nexport const readyStateChange = (detail = {}) => new SkylinkEvent(READY_STATE_CHANGE, { detail });\n","import {\n  CANDIDATE_PROCESSING_STATE,\n  CANDIDATE_GENERATION_STATE,\n  CANDIDATES_GATHERED,\n  ICE_CONNECTION_STATE,\n} from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.candidateProcessingState\n * @description Event triggered when remote ICE candidate processing state has changed when Peer is using trickle ICE.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {String} detail.peerId - The peer's id\n * @param {SkylinkConstants.CANDIDATE_PROCESSING_STATE} detail.state - The ICE candidate processing state.\n * @param {String} detail.candidateId - The remote ICE candidate session ID.\n * @param {String} detail.candidateType - The remote ICE candidate type.\n * @param {Object} detail.candidate - The remote ICE candidate.\n * @param {String} detail.candidate.candidate - The remote ICE candidate connection description.\n * @param {String} detail.candidate.sdpMid- The remote ICE candidate identifier based on the remote session description.\n * @param {number} detail.candidate.sdpMLineIndex - The remote ICE candidate media description index (starting from 0) based on the remote session description.\n * @param {Error} detail.error - The error object.\n */\nexport const candidateProcessingState = detail => new SkylinkEvent(CANDIDATE_PROCESSING_STATE, { detail });\n\n/**\n * @event SkylinkEvents.candidateGenerationState\n * @description Event triggered when a Peer connection ICE gathering state has changed.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {String} detail.peerId - The peer's id\n * @param {SkylinkConstants.CANDIDATE_GENERATION_STATE} detail.state - The current Peer connection ICE gathering state.\n */\nexport const candidateGenerationState = detail => new SkylinkEvent(CANDIDATE_GENERATION_STATE, { detail });\n\n/**\n * @event SkylinkEvents.candidatesGathered\n * @description Event triggered when all remote ICE candidates gathering has completed and been processed.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {String} detail.peerId - The peer's id\n * @param {Object} detail.candidatesLength - The remote ICE candidates length.\n * @param {number} detail.candidatesLength.expected - The expected total number of remote ICE candidates to be received.\n * @param {number} detail.candidatesLength.received - The actual total number of remote ICE candidates received.\n * @param {number} detail.candidatesLength.processed - The total number of remote ICE candidates processed.\n */\nexport const candidatesGathered = detail => new SkylinkEvent(CANDIDATES_GATHERED, { detail });\n\n/**\n * @event SkylinkEvents.iceConnectionState\n * @description Learn more about how ICE works in this\n *   <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * Event triggered when a Peer connection ICE connection state has changed.\n * @param {SkylinkEvents.ICE_CONNECTION_STATE} state The current Peer connection ICE connection state.\n * @param {String} peerId The Peer ID.\n */\nexport const iceConnectionState = detail => new SkylinkEvent(ICE_CONNECTION_STATE, { detail });\n","import {\n  ROOM_LOCK,\n  BYE,\n} from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.roomLock\n * @description Event triggered when Room locked status has changed.\n * @param {Object} detail - Event's payload\n * @param {Boolean} detail.isLocked The flag if Room is locked.\n * @param {String} detail.peerId The Peer ID.\n * @param {peerInfo} detail.peerInfo The Peer session information. Object signature matches the <code>peerInfo</code> parameter payload received in the <code>peerJoined</code> event.\n * @param {Boolean} detail.isSelf The flag if User changed the Room locked status.\n */\nexport const roomLock = (detail = {}) => new SkylinkEvent(ROOM_LOCK, { detail });\n\n/*\n * @event SkylinkEvents.bye\n * @description Event triggered when a user leaves a room.\n * @param {Object} detail - Event's payload.\n * @param {String} detail.rid - The User's Room session Peer ID\n * @param {peerInfo} detail.mid - The User's id\n */\nexport const bye = (detail = {}) => new SkylinkEvent(BYE, { detail });\n","import {\n  PEER_UPDATED,\n  PEER_JOINED,\n  PEER_LEFT,\n  SERVER_PEER_JOINED,\n  SERVER_PEER_LEFT,\n  GET_PEERS_STATE_CHANGE,\n  PEER_CONNECTION_STATE,\n  SESSION_DISCONNECT,\n  GET_CONNECTION_STATUS_STATE_CHANGE,\n} from './constants';\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.peerUpdated\n * @description Event triggered when a Peer session information has been updated.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {String} detail.peerId - The peer's id\n * @param {boolean} detail.isSelf -The flag if Peer is User.\n * @param {peerInfo} detail.peerInfo - The Peer session information. Object signature matches the <code>peerInfo</code> parameter payload received in the <code>peerJoined</code> event.\n */\nexport const peerUpdated = (detail = {}) => new SkylinkEvent(PEER_UPDATED, { detail });\n\n/**\n * @event SkylinkEvents.peerJoined\n * @description Event triggered when a Peer joins the room.\n * @param {Object} detail - Event's payload\n * @param {SkylinkRoom} detail.room - The current room.\n * @param {String} detail.peerId - The Peer ID.\n * @param {peerInfo} detail.peerInfo - The Peer session information.\n * @param {boolean} detail.isSelf - The flag if Peer is User.\n */\nexport const peerJoined = (detail = {}) => new SkylinkEvent(PEER_JOINED, { detail });\n\n/**\n * @event SkylinkEvents.peerLeft\n * @description Event triggered when a Peer leaves the room.\n * @param {Object} detail - Event's payload.\n * @param {String} detail.peerId - The Peer ID.\n * @param {peerInfo} detail.peerInfo - The Peer session information. Object signature matches the <code>peerInfo</code> parameter payload received in the<code>peerJoined</code> event.\n * @param {boolean} detail.isSelf - The flag if Peer is User.\n */\nexport const peerLeft = (detail = {}) => new SkylinkEvent(PEER_LEFT, { detail });\n\n/**\n * @event SkylinkEvents.serverPeerJoined\n * @description Event triggered when a server Peer joins the room.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkRoom} detail.room - The current room\n * @param {String} detail.peerId - The peer's id\n * @param {SkylinkConstants.SERVER_PEER_TYPE} detail.serverPeerType - The server Peer type\n */\nexport const serverPeerJoined = (detail = {}) => new SkylinkEvent(SERVER_PEER_JOINED, { detail });\n\n/**\n * @event SkylinkEvents.serverPeerLeft\n * @description Event triggered when a server Peer leaves the room.\n * @param {Object} detail - Event's payload\n * @param {String} detail.peerId - The Peer ID\n * @param {SkylinkRoom} detail.room - The room.\n * @param {SkylinkConstants.SERVER_PEER_TYPE} detail.serverPeerType - The server Peer type\n */\nexport const serverPeerLeft = (detail = {}) => new SkylinkEvent(SERVER_PEER_LEFT, { detail });\n\n/**\n * @event SkylinkEvents.getPeersStateChange\n * @description Event triggered when <code>getPeers()</code> method retrieval state changes.\n * @param {Object} detail - Event's payload\n * @param {SkylinkConstants.GET_PEERS_STATE} detail.state - The current <code>getPeers()</code> retrieval state.\n * @param {SkylinkUser.sid} detail.privilegePeerId - The Users privileged Peer Id.\n * @param {Object} detail.peerList - The list of Peer IDs Rooms within the same App space.\n * @param {Array} detail.peerList.#room - The list of Peer IDs associated with the Room defined in <code>#room</code> property.\n * @memberOf SkylinkEvents\n */\nexport const getPeersStateChange = (detail = {}) => new SkylinkEvent(GET_PEERS_STATE_CHANGE, { detail });\n\n/**\n * @event SkylinkEvents.peerConnectionState\n * @description Event triggered when a Peer connection session description exchanging state has changed.\n *  <blockquote class=\"info\">\n *   Learn more about how ICE works in this\n *   <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * @param {Object} detail - Event's payload\n * @param {SkylinkConstants.PEER_CONNECTION_STATE} detail.state - The current Peer connection session description exchanging states.\n * @param {String} detail.peerId - The Peer ID\n */\nexport const peerConnectionState = (detail = {}) => new SkylinkEvent(PEER_CONNECTION_STATE, { detail });\n\n/**\n * @event SkylinkEvents.sessionDisconnect\n * @description Event triggered when Room session has ended abruptly due to network disconnections.\n * @param {Object} detail - Event's payload.\n * @param {String} detail.peerId - The User's Room session Peer ID\n * @param {peerInfo} detail.peerInfo - The User's Room session information. Object signature matches the <code>peerInfo</code> parameter payload received in the<code>peerJoined</code> event.\n */\nexport const sessionDisconnect = (detail = {}) => new SkylinkEvent(SESSION_DISCONNECT, { detail });\n\n/**\n * Event triggered when <code>{@link PeerConnection.getConnectionStatus}</code> method\n * retrieval state changes.\n * @event SkylinkEvents.getConnectionStatusStateChange\n * @param {Object} detail - Event's payload/\n * @param {SkylinkConstants.GET_CONNECTION_STATUS_STATE} detail.state The current <code>getConnectionStatus()</code> retrieval state.\n * @param {String} detail.peerId The Peer ID.\n * @param {statistics} [detail.stats] The Peer connection current stats.\n * @param {Error} detail.error - The error object. Defined only when <code>state</code> payload is <code>RETRIEVE_ERROR</code>.\n */\nexport const getConnectionStatusStateChange = (detail = {}) => new SkylinkEvent(GET_CONNECTION_STATUS_STATE_CHANGE, { detail });\n","/* eslint-disable */\nimport {\n  CHANNEL_OPEN,\n  CHANNEL_REOPEN,\n  CHANNEL_CLOSE,\n  CHANNEL_ERROR,\n  CHANNEL_MESSAGE,\n  CHANNEL_RETRY,\n  SOCKET_ERROR,\n  SYSTEM_ACTION,\n} from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent'\n\n/**\n * @event SkylinkEvents.channelOpen\n * @description Event triggered when socket connection to Signaling server has opened.\n * @param {Object} detail - Event's payload.\n * @param {socketSession} detail.session The socket connection session information.\n */\nexport const channelOpen = detail => new SkylinkEvent(CHANNEL_OPEN, { detail });\n\n/**\n * @event SkylinkEvents.channelReopen\n * @description Event triggered when socket connection to Signaling server has re-opened.\n * @param {Object} detail - Event's payload.\n * @param {socketSession} detail.session The socket connection session information.\n * @example\n * Example 1: Listen on channelReopen to handle successful socket reconnection if socket was disconnected\n * (channelClose event emitted).\n * SkylinkEventManager.addEventListener(SkylinkConstants.EVENTS.CHANNEL_REOPEN, evt => {\n *   const { detail } = evt;\n *   skylink.leaveRoom() // call leaveRoom to ensure that previous peer information will be removed\n *   .then(() => skylink.joinRoom(joinRoomOptions))\n *   .then((streams) => {\n *     window.attachMediaStream(el, stream);\n *   })\n * });\n */\nexport const channelReopen = detail => new SkylinkEvent(CHANNEL_REOPEN, { detail });\n\n/**\n * @description Event triggered when socket connection to Signaling server has closed.\n * @event SkylinkEvents.channelClose\n * @param {Object} detail - Event's payload.\n * @param {socketSession} detail.session The socket connection session information.\n */\nexport const channelClose = detail => new SkylinkEvent(CHANNEL_CLOSE, { detail });\n\n/**\n * @description This may be caused by Javascript errors in the event listener when subscribing to events.<br>\n * It may be resolved by checking for code errors in your Web App in the event subscribing listener.<br>\n * Event triggered when socket connection encountered exception.\n * @event SkylinkEvents.channelError\n * @param {Object} detail - Event's payload.\n * @param {Error|String} detail.error The error object.\n * @param {socketSession} detail.session The socket connection session information.\n */\nexport const channelError = detail => new SkylinkEvent(CHANNEL_ERROR, { detail });\n\n/**\n * @description Note that this is used only for SDK developer purposes.\n * Event triggered when receiving socket message from the Signaling server.\n * @event SkylinkEvents.channelMessage\n * @param {Object} detail - Event's payload.\n * @param {Object} detail.message The socket message object.\n * @param {socketSession} detail.session The socket connection session information.\n */\nexport const channelMessage = detail => new SkylinkEvent(CHANNEL_MESSAGE, { detail });\n\n/**\n * @description Event triggered when attempting to establish socket connection to Signaling server when failed.\n * @event SkylinkEvents.channelRetry\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.SOCKET_FALLBACK} detail.fallbackType The current fallback state.\n * @param {Number} detail.currentAttempt The current socket reconnection attempt.\n * @param {socketSession} detail.session The socket connection session information.\n */\nexport const channelRetry = detail => new SkylinkEvent(CHANNEL_RETRY, { detail });\n\n/**\n * @description Event triggered when attempt to establish socket connection to Signaling server has failed.\n * @event SkylinkEvents.socketError\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.SOCKET_ERROR} detail.errorCode The socket connection error code.\n * @param {Error|String|Number} detail.error The error object.\n * @param {SkylinkConstants.SOCKET_FALLBACK} detail.type The fallback state of the socket connection attempt.\n * @param {socketSession} detail.session The socket connection session information.\n */\nexport const socketError = detail => new SkylinkEvent(SOCKET_ERROR, { detail });\n\n/**\n * @description Event triggered when Signaling server reaction state has changed.\n * @event SkylinkEvents.systemAction\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.SYSTEM_ACTION} detail.action The current Signaling server reaction state.\n *   [Rel: Skylink.SYSTEM_ACTION]\n * @param {String} detail.message The message.\n * @param {SkylinkConstants.SYSTEM_ACTION_REASON} detail.reason The Signaling server reaction state reason of action code.\n */\nexport const systemAction = detail => new SkylinkEvent(SYSTEM_ACTION, { detail });\n","import {\n  MEDIA_ACCESS_FALLBACK,\n  MEDIA_ACCESS_REQUIRED,\n  MEDIA_ACCESS_STOPPED,\n  MEDIA_ACCESS_SUCCESS,\n  RECORDING_STATE,\n  LOCAL_MEDIA_MUTED,\n  MEDIA_ACCESS_ERROR,\n  RTMP_STATE,\n  MEDIA_INFO_DELETED,\n} from './constants';\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.mediaAccessFallback\n * @description Event triggered when Stream retrieval fallback state has changed.\n * @param {Object} detail - Event's payload.\n * @param {JSON} detail.error - The error result.\n * @param {String} detail.error.error - The error object.\n * @param {JSON} detail.error.diff - The list of excepted but received audio and video tracks in Stream. Defined only when <code>state</code> payload is <code>FALLBACKED</code>.\n * @param {JSON} detail.error.video - The expected and received video tracks.\n * @param {Number} detail.error.video.expected - The expected video tracks.\n * @param {Number} detail.error.video.received - The received video tracks.\n * @param {JSON} detail.error.audio - The expected and received audio tracks.\n * @param {Number} detail.error.audio.expected - The expected audio tracks.\n * @param {Number} detail.error.audio.received - The received audio tracks.\n * @param {SkylinkConstants.MEDIA_ACCESS_FALLBACK_STATE} detail.state - The fallback state.\n * @param {boolean} detail.isScreensharing - The flag if event occurred during <code>shareScreen()</code> method and not <code>getUserMedia()</code> method.\n * @param {boolean} detail.isAudioFallback - The flag if event occurred during retrieval of audio tracks only when <code>getUserMedia()</code> method had failed to retrieve both audio and video tracks.\n * @param {String} detail.streamId - The Stream ID. Defined only when <code>state</code> payload is <code>FALLBACKED</code>.\n */\nexport const mediaAccessFallback = (detail = {}) => new SkylinkEvent(MEDIA_ACCESS_FALLBACK, { detail });\n\n/**\n * @event SkylinkEvents.mediaAccessRequired\n * @description Event triggered when retrieval of Stream is required to complete <code>joinRoom()</code> method request.\n * @param {Object} detail -Event's payload.\n */\nexport const mediaAccessRequired = (detail = {}) => new SkylinkEvent(MEDIA_ACCESS_REQUIRED, { detail });\n\n/**\n * @event SkylinkEvents.mediaAccessStopped\n * @description Event triggered when Stream has stopped streaming.\n * @param {Object} detail.isScreensharing - The flag if event occurred during <code>shareScreen()</code> method and not <code>getUserMedia()</code> method.\n * @param {boolean} detail.isAudioFallback - The flag if event occurred during retrieval of audio tracks only when <code>getUserMedia()</code> method had failed to retrieve both audio and video tracks.\n * @param {String} detail.streamId - The Stream ID.\n */\nexport const mediaAccessStopped = (detail = {}) => new SkylinkEvent(MEDIA_ACCESS_STOPPED, { detail });\n\n/**\n * @event SkylinkEvents.mediaAccessSuccess\n * @description Event triggered when retrieval of Stream is successful.\n * @param {Object} detail\n * @param {MediaStream} detail.stream - The Stream object. To attach it to an element: <code>attachMediaStream(videoElement, stream);</code>.\n * @param {Boolean} detail.isScreensharing - The flag if event occurred during <code>shareScreen()</code> method and not <code>getUserMedia()</code> method.\n * @param {Boolean} detail.isAudioFallback - The flag if event occurred during retrieval of audio tracks only when <code>getUserMedia()</code> method had failed to retrieve both audio and video tracks.\n * @param {String} detail.streamId - The Stream ID.\n * @param {boolean} detail.isVideo - The flag if the incoming stream has a video track.\n * @param {boolean} detail.isAudio - The flag if the incoming stream has an audio track.\n * @alias SkylinkEvents.mediaAccessSuccess\n */\nexport const mediaAccessSuccess = (detail = {}) => new SkylinkEvent(MEDIA_ACCESS_SUCCESS, { detail });\n\n/**\n * @event SkylinkEvents.recordingState\n * @description Event triggered when recording session state has changed.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.RECORDING_STATE} detail.state - The current recording session state.\n * @param {String} detail.recordingId - The recording session ID.\n * @param {Error | String} detail.error - The error object. Defined only when <code>state</code> payload is <code>ERROR</code>.\n */\nexport const recordingState = (detail = {}) => new SkylinkEvent(RECORDING_STATE, { detail });\n\n/**\n * @event SkylinkEvents.rtmpState\n * @description Event triggered when rtmp session state has changed.\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.RTMP_STATE} detail.state - The current recording session state.\n * @param {String} detail.rtmpId - The rtmp session ID.\n * @param {Error | String} detail.error - The error object. Defined only when <code>state</code> payload is <code>ERROR</code>.\n */\nexport const rtmpState = (detail = {}) => new SkylinkEvent(RTMP_STATE, { detail });\n\n/**\n * @event SkylinkEvents.localMediaMuted\n * @description Event triggered when <code>muteStreams()</code> method changes User Streams audio and video tracks muted status.\n * @param {Object} detail - Event's payload.\n * @param {String} detail.streamId - The muted Stream Id.\n * @param {Boolean} detail.isScreensharing - The flag if the media muted was screensharing.\n * @param {JSON} detail.mediaStatus - The Peer streaming media status. This indicates the media status for both <code>getUserMedia()</code> Stream and <code>shareScreen()</code> Stream.\n * @param {Boolean} detail.mediaStatus.audioMuted - The value of the audio status. If Peer <code>mediaStatus</code> is <code>-1</code>, audio is not present in the stream. If Peer <code>mediaStatus</code> is <code>1</code>, audio is present\n *   in the stream and active (not muted). If Peer <code>mediaStatus</code> is <code>0</code>, audio is present in the stream and muted.\n * @param {Boolean} detail.mediaStatus.videoMuted - The value of the video status. If Peer <code>mediaStatus</code> is <code>-1</code>, video is not present in the stream. If Peer <code>mediaStatus</code> is <code>1</code>, video is present\n *   in the stream and active (not muted). If Peer <code>mediaStatus</code> is <code>0</code>, video is present in the stream and muted.\n */\nexport const localMediaMuted = (detail = {}) => new SkylinkEvent(LOCAL_MEDIA_MUTED, { detail });\n\n/**\n * @event SkylinkEvents.mediaAccessError\n * @description Event triggered when retrieval of Stream failed.\n * @param {Object} detail - Event's payload.\n * @param {Error | String} detail.error - The error object.\n * @param {Boolean} detail.isScreensharing - The flag if event occurred during <code>shareScreen()</code> method and not <code>getUserMedia()</code> method.\n * @param {Boolean} detail.isAudioFallbackError - The flag if event occurred during retrieval of audio tracks only when <code>getUserMedia()</code> method had failed to retrieve both audio and video tracks.\n */\nexport const mediaAccessError = (detail = {}) => new SkylinkEvent(MEDIA_ACCESS_ERROR, { detail });\n\n/**\n * @event SkylinkEvents.mediaInfo\n * @description Event triggered when media info changes.\n * @param {Object} detail - Event's payload.\n * @param {Object} detail.mediaInfo - The media info object.\n * @private\n */\nexport const mediaInfoDeleted = (detail = {}) => new SkylinkEvent(MEDIA_INFO_DELETED, { detail });\n","/* eslint-disable import/prefer-default-export */\nimport {\n  LOGGED_ON_CONSOLE,\n} from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @event SkylinkEvents.loggedOnConsole\n * @description Event triggered when Skylink logs to browser's console.\n * @param {Object} detail - Event's payload.\n * @param {JSON} detail.level - The log level.\n * @param {String} detail.message - The log message.\n * @param {JSON} detail.debugObject - A JavaScript object to be logged to help with analysis.\n */\nexport const loggedOnConsole = (detail = {}) => new SkylinkEvent(LOGGED_ON_CONSOLE, { detail });\n","import * as SkylinkEventsConstants from './skylink-events/constants';\n\n/**\n * @namespace SkylinkConstants\n * @description Constants used by SkylinkJS are described here.\n */\n\n/**\n * The list of Datachannel connection states.\n * @typedef DATA_CHANNEL_STATE\n * @property {String} CONNECTING          Value <code>\"connecting\"</code>\n *   The value of the state when Datachannel is attempting to establish a connection.\n * @property {String} OPEN                Value <code>\"open\"</code>\n *   The value of the state when Datachannel has established a connection.\n * @property {String} CLOSING             Value <code>\"closing\"</code>\n *   The value of the state when Datachannel connection is closing.\n * @property {String} CLOSED              Value <code>\"closed\"</code>\n *   The value of the state when Datachannel connection has closed.\n * @property {String} ERROR               Value <code>\"error\"</code>\n *   The value of the state when Datachannel has encountered an exception during connection.\n * @property {String} CREATE_ERROR        Value <code>\"createError\"</code>\n *   The value of the state when Datachannel has failed to establish a connection.\n * @property {String} BUFFERED_AMOUNT_LOW Value <code>\"bufferedAmountLow\"</code>\n *   The value of the state when Datachannel when the amount of data buffered to be sent\n *   falls below the Datachannel threshold.\n *   This state should occur only during after {@link Skylink#sendBlobData} or {@link Skylink#sendURLData} or\n *   {@link Skylink#sendP2PMessage}.\n * @property {String} SEND_MESSAGE_ERROR  Value <code>\"sendMessageError\"</code>\n *   The value of the state when Datachannel when data transfer packets or P2P message fails to send.\n *   This state should occur only during after {@link Skylink#sendBlobData} or {@link Skylink#sendURLData} or\n *   {@link Skylink#sendP2PMessage}.\n * @constant\n * @type object\n * @readOnly\n * @since 0.1.0\n * @memberOf SkylinkConstants\n */\nexport const DATA_CHANNEL_STATE = {\n  CONNECTING: 'connecting',\n  OPEN: 'open',\n  CLOSING: 'closing',\n  CLOSED: 'closed',\n  ERROR: 'error',\n  CREATE_ERROR: 'createError',\n  BUFFERED_AMOUNT_LOW: 'bufferedAmountLow',\n  SEND_MESSAGE_ERROR: 'sendMessageError',\n};\n\n/**\n * The list of Datachannel types.\n * @typedef DATA_CHANNEL_TYPE\n * @property {String} MESSAGING Value <code>\"messaging\"</code>\n *   The value of the Datachannel type that is used only for messaging in\n *   {@link Skylink#sendP2PMessage}.\n *   However for Peers that do not support simultaneous data transfers, this Datachannel\n *   type will be used to do data transfers (1 at a time).\n *   Each Peer connections will only have one of this Datachannel type and the\n *   connection will only close when the Peer connection is closed (happens when {@link SkylinkEvents.event:peerConnectionState|peerConnectionStateEvent} triggers parameter payload <code>state</code> as\n *   <code>CLOSED</code> for Peer).\n * @property {String} DATA Value <code>\"data\"</code>\n *   The value of the Datachannel type that is used only for a data transfer in\n *   {@link Skylink#sendURLData} and\n *   {@link Skylink#sendBlobData}.\n *   The connection will close after the data transfer has been completed or terminated (happens when\n *   {@link SkylinkEvents.event:dataTransferStatedataTransferStateEvent} triggers parameter payload\n *   <code>state</code> as <code>DOWNLOAD_COMPLETED</code>, <code>UPLOAD_COMPLETED</code>,\n *   <code>REJECTED</code>, <code>CANCEL</code> or <code>ERROR</code> for Peer).\n * @constant\n * @type object\n * @readOnly\n * @since 0.6.1\n * @memberOf SkylinkConstants\n */\nexport const DATA_CHANNEL_TYPE = {\n  MESSAGING: 'messaging',\n  DATA: 'data',\n};\n\n/**\n * The list of Datachannel sending message error types.\n * @typedef DATA_CHANNEL_MESSAGE_ERROR\n * @property {String} MESSAGE  Value <code>\"message\"</code>\n *   The value of the Datachannel sending message error type when encountered during\n *   sending P2P message from {@link Skylink#sendP2PMessage}.\n * @property {String} TRANSFER Value <code>\"transfer\"</code>\n *   The value of the Datachannel sending message error type when encountered during\n *   data transfers from {@link Skylink#sendURLData} or\n *   {@link Skylink#sendBlobData}.\n * @constant\n * @type object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.16\n */\nexport const DATA_CHANNEL_MESSAGE_ERROR = {\n  MESSAGE: 'message',\n  TRANSFER: 'transfer',\n};\n\n/**\n * The list of supported data transfer data types.\n * @typedef DATA_TRANSFER_DATA_TYPE\n * @property {String} BINARY_STRING Value <code>\"binaryString\"</code>\n *   The value of data transfer data type when Blob binary data chunks encoded to Base64 encoded string are\n *   sent or received over the Datachannel connection for the data transfer session.\n *   Used only in {@link Skylink#sendBlobData} when\n *   parameter <code>sendChunksAsBinary</code> value is <code>false</code>.\n * @property {String} ARRAY_BUFFER  Value <code>\"arrayBuffer\"</code>\n *   The value of data transfer data type when ArrayBuffer binary data chunks are\n *   sent or received over the Datachannel connection for the data transfer session.\n *   Used only in {@link Skylink#sendBlobData} when\n *   parameter <code>sendChunksAsBinary</code> value is <code>true</code>.\n * @property {String} BLOB          Value <code>\"blob\"</code>\n *   The value of data transfer data type when Blob binary data chunks are\n *   sent or received over the Datachannel connection for the data transfer session.\n *   Used only in {@link Skylink#sendBlobData} when\n *   parameter <code>sendChunksAsBinary</code> value is <code>true</code>.\n * @property {String} STRING        Value <code>\"string\"</code>\n *   The value of data transfer data type when only string data chunks are\n *   sent or received over the Datachannel connection for the data transfer session.\n *   Used only in {@link Skylink#sendURLData}.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.1.0\n * @ignore\n */\nexport const DATA_TRANSFER_DATA_TYPE = {\n  BINARY_STRING: 'binaryString',\n  ARRAY_BUFFER: 'arrayBuffer',\n  BLOB: 'blob',\n  STRING: 'string',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Note that this is used only for SDK developer purposes.<br>\n *   Current version: <code>0.1.3</code>\n * </blockquote>\n * The value of the current version of the data transfer protocol.\n * @typedef DT_PROTOCOL_VERSION\n * @type string\n * @private\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.10\n */\nexport const DT_PROTOCOL_VERSION = '0.1.3';\n\n/**\n * The list of data transfers directions.\n * @typedef DATA_TRANSFER_TYPE\n * @property {String} UPLOAD Value <code>\"upload\"</code>\n *   The value of the data transfer direction when User is uploading data to Peer.\n * @property {String} DOWNLOAD Value <code>\"download\"</code>\n *   The value of the data transfer direction when User is downloading data from Peer.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.1.0\n * @ignore\n */\nexport const DATA_TRANSFER_TYPE = {\n  UPLOAD: 'upload',\n  DOWNLOAD: 'download',\n};\n\n/**\n * The list of data transfers session types.\n * @typedef DATA_TRANSFER_SESSION_TYPE\n * @property {String} BLOB     Value <code>\"blob\"</code>\n *   The value of the session type for\n *   {@link Skylink#sendURLData} data transfer.\n * @property {String} DATA_URL Value <code>\"dataURL\"</code>\n *   The value of the session type for\n *   {@link Skylink#sendBlobData} data transfer.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.1.0\n * @ignore\n */\nexport const DATA_TRANSFER_SESSION_TYPE = {\n  BLOB: 'blob',\n  DATA_URL: 'dataURL',\n};\n\n/**\n * The list of data transfer states.\n * @typedef DATA_TRANSFER_STATE\n * @property {String} UPLOAD_REQUEST     Value <code>\"request\"</code>\n *   The value of the state when receiving an upload data transfer request from Peer to User.\n *   At this stage, the upload data transfer request from Peer may be accepted or rejected with the\n *   {@link Skylink#acceptDataTransfer} invoked by User.\n * @param {String} USER_UPLOAD_REQUEST Value <code>\"userRequest\"</code>\n *   The value of the state when User sent an upload data transfer request to Peer.\n *   At this stage, the upload data transfer request to Peer may be accepted or rejected with the\n *   {@link Skylink#acceptDataTransfer}invoked by Peer.\n * @property {String} UPLOAD_STARTED     Value <code>\"uploadStarted\"</code>\n *   The value of the state when the data transfer request has been accepted\n *   and data transfer will start uploading data to Peer.\n *   At this stage, the data transfer may be terminated with the\n *   {@link Skylink#cancelDataTransfer}.\n * @property {String} DOWNLOAD_STARTED   Value <code>\"downloadStarted\"</code>\n *   The value of the state when the data transfer request has been accepted\n *   and data transfer will start downloading data from Peer.\n *   At this stage, the data transfer may be terminated with the\n *   {@link Skylink#cancelDataTransfer}.\n * @property {String} REJECTED           Value <code>\"rejected\"</code>\n *   The value of the state when upload data transfer request to Peer has been rejected and terminated.\n * @property {String} USER_REJECTED      Value <code>\"userRejected\"</code>\n *   The value of the state when User rejected and terminated upload data transfer request from Peer.\n * @property {String} UPLOADING          Value <code>\"uploading\"</code>\n *   The value of the state when data transfer is uploading data to Peer.\n * @property {String} DOWNLOADING        Value <code>\"downloading\"</code>\n *   The value of the state when data transfer is downloading data from Peer.\n * @property {String} UPLOAD_COMPLETED   Value <code>\"uploadCompleted\"</code>\n *   The value of the state when data transfer has uploaded successfully to Peer.\n * @property {String} DOWNLOAD_COMPLETED Value <code>\"downloadCompleted\"</code>\n *   The value of the state when data transfer has downloaded successfully from Peer.\n * @property {String} CANCEL             Value <code>\"cancel\"</code>\n *   The value of the state when data transfer has been terminated from / to Peer.\n * @property {String} ERROR              Value <code>\"error\"</code>\n *   The value of the state when data transfer has errors and has been terminated from / to Peer.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.4.0\n * @ignore\n */\nexport const DATA_TRANSFER_STATE = {\n  UPLOAD_REQUEST: 'request',\n  UPLOAD_STARTED: 'uploadStarted',\n  DOWNLOAD_STARTED: 'downloadStarted',\n  REJECTED: 'rejected',\n  CANCEL: 'cancel',\n  ERROR: 'error',\n  UPLOADING: 'uploading',\n  DOWNLOADING: 'downloading',\n  UPLOAD_COMPLETED: 'uploadCompleted',\n  DOWNLOAD_COMPLETED: 'downloadCompleted',\n  USER_REJECTED: 'userRejected',\n  USER_UPLOAD_REQUEST: 'userRequest',\n  START_ERROR: 'startError',\n};\n\n/**\n * The list of data streaming states.\n * @typedef DATA_STREAM_STATE\n * @property {String} SENDING_STARTED   Value <code>\"sendStart\"</code>\n *   The value of the state when data streaming session has started from User to Peer.\n * @property {String} RECEIVING_STARTED Value <code>\"receiveStart\"</code>\n *   The value of the state when data streaming session has started from Peer to Peer.\n * @property {String} RECEIVED          Value <code>\"received\"</code>\n *   The value of the state when data streaming session data chunk has been received from Peer to User.\n * @property {String} SENT              Value <code>\"sent\"</code>\n *   The value of the state when data streaming session data chunk has been sent from User to Peer.\n * @property {String} SENDING_STOPPED   Value <code>\"sendStop\"</code>\n *   The value of the state when data streaming session has stopped from User to Peer.\n * @property {String} RECEIVING_STOPPED Value <code>\"receivingStop\"</code>\n *   The value of the state when data streaming session has stopped from Peer to User.\n * @property {String} ERROR             Value <code>\"error\"</code>\n *   The value of the state when data streaming session has errors.\n *   At this stage, the data streaming state is considered <code>SENDING_STOPPED</code> or\n *   <code>RECEIVING_STOPPED</code>.\n * @property {String} START_ERROR       Value <code>\"startError\"</code>\n *   The value of the state when data streaming session failed to start from User to Peer.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.18\n * @ignore\n */\nexport const DATA_STREAM_STATE = {\n  SENDING_STARTED: 'sendStart',\n  SENDING_STOPPED: 'sendStop',\n  RECEIVING_STARTED: 'receiveStart',\n  RECEIVING_STOPPED: 'receiveStop',\n  RECEIVED: 'received',\n  SENT: 'sent',\n  ERROR: 'error',\n  START_ERROR: 'startError',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Learn more about how ICE works in this\n *   <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * The list of Peer connection ICE gathering states.\n * @typedef CANDIDATE_GENERATION_STATE\n * @property {String} GATHERING Value <code>\"gathering\"</code>\n *   The value of the state when Peer connection is gathering ICE candidates.\n *   These ICE candidates are sent to Peer for its connection to check for a suitable matching\n *   pair of ICE candidates to establish an ICE connection for stream audio, video and data.\n *   See {@link SkylinkConstants.ICE_CONNECTION_STATE|ICE_CONNECTION_STATE} for ICE connection status.\n *   This state cannot happen until Peer connection remote <code>\"offer\"</code> / <code>\"answer\"</code>\n *   session description is set. See {@link SkylinkConstants.PEER_CONNECTION_STATE|PEER_CONNECTION_STATE} for session description exchanging status.\n * @property {String} COMPLETED Value <code>\"completed\"</code>\n *   The value of the state when Peer connection gathering of ICE candidates has completed.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.4.1\n */\nexport const CANDIDATE_GENERATION_STATE = {\n  NEW: 'new',\n  GATHERING: 'gathering',\n  COMPLETED: 'complete',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Learn more about how ICE works in this\n *   <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * The list of Peer connection remote ICE candidate processing states for trickle ICE connections.\n * @typedef CANDIDATE_PROCESSING_STATE\n * @property {String} RECEIVED Value <code>\"received\"</code>\n *   The value of the state when the remote ICE candidate was received.\n * @property {String} DROPPED  Value <code>\"received\"</code>\n *   The value of the state when the remote ICE candidate is dropped.\n * @property {String} BUFFERED  Value <code>\"buffered\"</code>\n *   The value of the state when the remote ICE candidate is buffered.\n * @property {String} PROCESSING  Value <code>\"processing\"</code>\n *   The value of the state when the remote ICE candidate is being processed.\n * @property {String} PROCESS_SUCCESS  Value <code>\"processSuccess\"</code>\n *   The value of the state when the remote ICE candidate has been processed successfully.\n *   The ICE candidate that is processed will be used to check against the list of\n *   locally generated ICE candidate to start matching for the suitable pair for the best ICE connection.\n * @property {String} PROCESS_ERROR  Value <code>\"processError\"</code>\n *   The value of the state when the remote ICE candidate has failed to be processed.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.16\n */\nexport const CANDIDATE_PROCESSING_STATE = {\n  RECEIVED: 'received',\n  DROPPED: 'dropped',\n  BUFFERED: 'buffered',\n  PROCESSING: 'processing',\n  PROCESS_SUCCESS: 'processSuccess',\n  PROCESS_ERROR: 'processError',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Learn more about how ICE works in this\n *   <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * The list of Peer connection ICE connection states.\n * @typedef ICE_CONNECTION_STATE\n * @property {String} CHECKING       Value <code>\"checking\"</code>\n *   The value of the state when Peer connection is checking for a suitable matching pair of\n *   ICE candidates to establish ICE connection.\n *   Exchanging of ICE candidates happens during {@link SkylinkEvents.event:candidateGenerationState|candidateGenerationStateEvent}.\n * @property {String} CONNECTED      Value <code>\"connected\"</code>\n *   The value of the state when Peer connection has found a suitable matching pair of\n *   ICE candidates to establish ICE connection but is still checking for a better\n *   suitable matching pair of ICE candidates for the best ICE connectivity.\n *   At this state, ICE connection is already established and audio, video and\n *   data streaming has already started.\n * @property {String} COMPLETED      Value <code>\"completed\"</code>\n *   The value of the state when Peer connection has found the best suitable matching pair\n *   of ICE candidates to establish ICE connection and checking has stopped.\n *   At this state, ICE connection is already established and audio, video and\n *   data streaming has already started. This may happpen after <code>CONNECTED</code>.\n * @property {String} FAILED         Value <code>\"failed\"</code>\n *   The value of the state when Peer connection ICE connection has failed.\n * @property {String} DISCONNECTED   Value <code>\"disconnected\"</code>\n *   The value of the state when Peer connection ICE connection is disconnected.\n *   At this state, the Peer connection may attempt to revive the ICE connection.\n *   This may happen due to flaky network conditions.\n * @property {String} CLOSED         Value <code>\"closed\"</code>\n *   The value of the state when Peer connection ICE connection has closed.\n *   This happens when Peer connection is closed and no streaming can occur at this stage.\n * @property {String} TRICKLE_FAILED Value <code>\"trickleFailed\"</code>\n *   The value of the state when Peer connection ICE connection has failed during trickle ICE.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.1.0\n */\nexport const ICE_CONNECTION_STATE = {\n  STARTING: 'starting',\n  CHECKING: 'checking',\n  CONNECTED: 'connected',\n  COMPLETED: 'completed',\n  CLOSED: 'closed',\n  FAILED: 'failed',\n  TRICKLE_FAILED: 'trickleFailed',\n  DISCONNECTED: 'disconnected',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Note that configuring the protocol may not necessarily result in the desired network transports protocol\n *   used in the actual TURN network traffic as it depends which protocol the browser selects and connects with.\n *   This simply configures the TURN ICE server urls <code?transport=(protocol)</code> query option when constructing\n *   the Peer connection. When all protocols are selected, the ICE servers urls are duplicated with all protocols.\n * </blockquote>\n * The list of TURN network transport protocols options when constructing Peer connections\n * configured in Skylink {@link initOptions}.\n * Example <code>.urls</code> inital input: [<code>\"turn:server.com?transport=tcp\"</code>,\n * <code>\"turn:server1.com:3478\"</code>, <code>\"turn:server.com?transport=udp\"</code>]\n * @typedef TURN_TRANSPORT\n * @property {String} TCP Value  <code>\"tcp\"</code>\n *   The value of the option to configure using only TCP network transport protocol.\n *   Example <code>.urls</code> output: [<code>\"turn:server.com?transport=tcp\"</code>,\n *   <code>\"turn:server1.com:3478?transport=tcp\"</code>]\n * @property {String} UDP Value  <code>\"udp\"</code>\n *   The value of the option to configure using only UDP network transport protocol.\n *   Example <code>.urls</code> output: [<code>\"turn:server.com?transport=udp\"</code>,\n *   <code>\"turn:server1.com:3478?transport=udp\"</code>]\n * @property {String} ANY Value  <code>\"any\"</code>\n *   The value of the option to configure using any network transport protocols configured from the Signaling server.\n *   Example <code>.urls</code> output: [<code>\"turn:server.com?transport=tcp\"</code>,\n *   <code>\"turn:server1.com:3478\"</code>, <code>\"turn:server.com?transport=udp\"</code>]\n * @property {String} NONE Value <code>\"none\"</code>\n *   The value of the option to not configure using any network transport protocols.\n *   Example <code>.urls</code> output: [<code>\"turn:server.com\"</code>, <code>\"turn:server1.com:3478\"</code>]\n *   Configuring this does not mean that no protocols will be used, but\n *   rather removing <code>?transport=(protocol)</code> query option in\n *   the TURN ICE server <code>.urls</code> when constructing the Peer connection.\n * @property {String} ALL Value  <code>\"all\"</code>\n *   The value of the option to configure using both TCP and UDP network transport protocols.\n *   Example <code>.urls</code> output: [<code>\"turn:server.com?transport=tcp\"</code>,\n *   <code>\"turn:server.com?transport=udp\"</code>, <code>\"turn:server1.com:3478?transport=tcp\"</code>,\n *   <code>\"turn:server1.com:3478?transport=udp\"</code>]\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.4\n */\nexport const TURN_TRANSPORT = {\n  UDP: 'udp',\n  TCP: 'tcp',\n  ANY: 'any',\n  NONE: 'none',\n  ALL: 'all',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Learn more about how ICE works in this\n *   <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * The list of Peer connection session description exchanging states.\n * @typedef PEER_CONNECTION_STATE\n * @property {String} STABLE            Value <code>\"stable\"</code>\n *   The value of the state when there is no session description being exchanged between Peer connection.\n * @property {String} HAVE_LOCAL_OFFER  Value <code>\"have-local-offer\"</code>\n *   The value of the state when local <code>\"offer\"</code> session description is set.\n *   This should transition to <code>STABLE</code> state after remote <code>\"answer\"</code>\n *   session description is set.\n *   See {@link SkylinkConstants.HANDSHAKE_PROGRESS|HANDSHAKE_PROGRESS} for a more\n *   detailed exchanging of session description states.\n * @property {String} HAVE_REMOTE_OFFER Value <code>\"have-remote-offer\"</code>\n *   The value of the state when remote <code>\"offer\"</code> session description is set.\n *   This should transition to <code>STABLE</code> state after local <code>\"answer\"</code>\n *   session description is set.\n *   See {@link SkylinkConstants.HANDSHAKE_PROGRESS|HANDSHAKE_PROGRESS} for a more\n *   detailed exchanging of session description states.\n * @property {String} CLOSED            Value <code>\"closed\"</code>\n *   The value of the state when Peer connection is closed and no session description can be exchanged and set.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.0\n */\nexport const PEER_CONNECTION_STATE = {\n  STABLE: 'stable',\n  HAVE_LOCAL_OFFER: 'have-local-offer',\n  HAVE_REMOTE_OFFER: 'have-remote-offer',\n  CLOSED: 'closed',\n};\n\n/**\n * The list of {@link Skylink#getConnectionStatus} retrieval states.\n * @typedef GET_CONNECTION_STATUS_STATE\n * @property {number} RETRIEVING Value <code>0</code>\n *   The value of the state when {@link Skylink#getConnectionStatus} is retrieving the Peer connection stats.\n * @property {number} RETRIEVE_SUCCESS Value <code>1</code>\n *   The value of the state when {@link Skylink#getConnectionStatus} has retrieved the Peer connection stats successfully.\n * @property {number} RETRIEVE_ERROR Value <code>-1</code>\n *   The value of the state when {@link Skylink#getConnectionStatus} has failed retrieving the Peer connection stats.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.1.0\n */\nexport const GET_CONNECTION_STATUS_STATE = {\n  RETRIEVING: 0,\n  RETRIEVE_SUCCESS: 1,\n  RETRIEVE_ERROR: -1,\n};\n\n/**\n * <blockquote class=\"info\">\n *  As there are more features getting implemented, there will be eventually more different types of\n *  server Peers.\n * </blockquote>\n * The list of available types of server Peer connections.\n * @typedef SERVER_PEER_TYPE\n * @property {String} MCU Value <code>\"mcu\"</code>\n *   The value of the server Peer type that is used for MCU connection.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.1\n */\nexport const SERVER_PEER_TYPE = {\n  MCU: 'mcu',\n  // SIP: 'sip'\n};\n\n/**\n * <blockquote class=\"info\">\n *  Learn more about how ICE works in this\n *  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * The list of available Peer connection bundle policies.\n * @typedef BUNDLE_POLICY\n * @property {String} MAX_COMPAT Value <code>\"max-compat\"</code>\n *   The value of the bundle policy to generate ICE candidates for each media type\n *   so each media type flows through different transports.\n * @property {String} MAX_BUNDLE Value <code>\"max-bundle\"</code>\n *   The value of the bundle policy to generate ICE candidates for one media type\n *   so all media type flows through a single transport.\n * @property {String} BALANCED   Value <code>\"balanced\"</code>\n *   The value of the bundle policy to use <code>MAX_BUNDLE</code> if Peer supports it,\n *   else fallback to <code>MAX_COMPAT</code>.\n * @property {String} NONE       Value <code>\"none\"</code>\n *   The value of the bundle policy to not use any media bundle.\n *   This removes the <code>a=group:BUNDLE</code> line from session descriptions.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.18\n */\nexport const BUNDLE_POLICY = {\n  MAX_COMPAT: 'max-compat',\n  BALANCED: 'balanced',\n  MAX_BUNDLE: 'max-bundle',\n  NONE: 'none',\n};\n\n/**\n * <blockquote class=\"info\">\n *  Learn more about how ICE works in this\n *  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * The list of available Peer connection RTCP mux policies.\n * @typedef RTCP_MUX_POLICY\n * @property {String} REQUIRE   Value <code>\"require\"</code>\n *   The value of the RTCP mux policy to generate ICE candidates for RTP only and RTCP shares the same ICE candidates.\n * @property {String} NEGOTIATE Value <code>\"negotiate\"</code>\n *   The value of the RTCP mux policy to generate ICE candidates for both RTP and RTCP each.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.18\n */\nexport const RTCP_MUX_POLICY = {\n  REQUIRE: 'require',\n  NEGOTIATE: 'negotiate',\n};\n\n/**\n * <blockquote class=\"info\">\n *  Learn more about how ICE works in this\n *  <a href=\"https://temasys.com.sg/ice-what-is-this-sorcery/\">article here</a>.\n * </blockquote>\n * The list of available Peer connection certificates cryptographic algorithm to use.\n * @typedef PEER_CERTIFICATE\n * @property {String} RSA   Value <code>\"RSA\"</code>\n *   The value of the Peer connection certificate algorithm to use RSA-1024.\n * @property {String} ECDSA Value <code>\"ECDSA\"</code>\n *   The value of the Peer connection certificate algorithm to use ECDSA.\n * @property {String} AUTO  Value <code>\"AUTO\"</code>\n *   The value of the Peer connection to use the default certificate generated.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.18\n */\nexport const PEER_CERTIFICATE = {\n  RSA: 'RSA',\n  ECDSA: 'ECDSA',\n  AUTO: 'AUTO',\n};\n\n/**\n * The list of Peer connection states.\n * @typedef HANDSHAKE_PROGRESS\n * @property {String} ENTER   Value <code>\"enter\"</code>\n *   The value of the connection state when Peer has just entered the Room.\n *   At this stage, {@link SkylinkConstants.PEER_JOINED|PEER_JOINED}\n *   is triggered.\n * @property {String} WELCOME Value <code>\"welcome\"</code>\n *   The value of the connection state when Peer is aware that User has entered the Room.\n *   At this stage, {@link SkylinkConstants.PEER_JOINED|PEER_JOINED}\n *   is triggered and Peer connection may commence.\n * @property {String} OFFER   Value <code>\"offer\"</code>\n *   The value of the connection state when Peer connection has set the local / remote <code>\"offer\"</code>\n *   session description to start streaming connection.\n * @property {String} ANSWER  Value <code>\"answer\"</code>\n *   The value of the connection state when Peer connection has set the local / remote <code>\"answer\"</code>\n *   session description to establish streaming connection.\n * @property {string} ANSWER_ACK  Value <code>\"answerAck\"</code>\n *   The value of the connection state when Peer connection is aware that the user has received the answer and the handshake is\n *   complete.\n * @property {string} ERROR   Value <code>\"error\"</code>\n *   The value of the connection state when Peer connection has failed to establish streaming connection.\n *   This happens when there are errors that occurs in creating local <code>\"offer\"</code> /\n *   <code>\"answer\"</code>, or when setting remote / local <code>\"offer\"</code> / <code>\"answer\"</code>.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.1.0\n */\nexport const HANDSHAKE_PROGRESS = {\n  ENTER: 'enter',\n  WELCOME: 'welcome',\n  OFFER: 'offer',\n  ANSWER: 'answer',\n  ANSWER_ACK: 'answerAck',\n  ERROR: 'error',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Note that this feature requires <code>\"isPrivileged\"</code> flag to be enabled for the App Key\n *   provided in Skylink {@link initOptions}, as only Users connecting using\n *   the App Key with this flag enabled (which we call privileged Users / Peers) can retrieve the list of\n *   Peer IDs from Rooms within the same App space.\n *   <a href=\"http://support.temasys.io/support/solutions/articles/12000012342-what-is-a-privileged-key-\">\n *   Read more about privileged App Key feature here</a>.\n * </blockquote>\n * The list of <a href=\"#method_getPeers\"><code>getPeers()</code> method</a> retrieval states.\n * @typedef GET_PEERS_STATE\n * @property {String} ENQUIRED Value <code>\"enquired\"</code>\n *   The value of the state when <code>getPeers()</code> is retrieving the list of Peer IDs\n *   from Rooms within the same App space from the Signaling server.\n * @property {String} RECEIVED Value <code>\"received\"</code>\n *   The value of the state when <code>getPeers()</code> has retrieved the list of Peer IDs\n *   from Rooms within the same App space from the Signaling server successfully.\n * @readOnly\n * @type Object\n * @constant\n * @public\n * @memberOf SkylinkConstants\n * @since 0.6.1\n */\nexport const GET_PEERS_STATE = {\n  ENQUIRED: 'enquired',\n  DISPATCHED: 'dispatched',\n  RECEIVED: 'received',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Note that this feature requires <code>\"isPrivileged\"</code> flag to be enabled and\n *   <code>\"autoIntroduce\"</code> flag to be disabled for the App Key provided in\n *   Skylink {@link initOptions}, as only Users connecting using\n *   the App Key with this flag enabled (which we call privileged Users / Peers) can retrieve the list of\n *   Peer IDs from Rooms within the same App space.\n *   <a href=\"http://support.temasys.io/support/solutions/articles/12000012342-what-is-a-privileged-key-\">\n *   Read more about privileged App Key feature here</a>.\n * </blockquote>\n * The list of {@link Skylink#introducePeer} Peer introduction request states.\n * @typedef INTRODUCE_STATE\n * @property {String} INTRODUCING Value <code>\"enquired\"</code>\n *   The value of the state when introduction request for the selected pair of Peers has been made to the Signaling server.\n * @property {String} ERROR       Value <code>\"error\"</code>\n *   The value of the state when introduction request made to the Signaling server\n *   for the selected pair of Peers has failed.\n * @readOnly\n * @constant\n * @memberOf SkylinkConstants\n * @since 0.6.1\n * @ignore\n */\nexport const INTRODUCE_STATE = {\n  INTRODUCING: 'introducing',\n  ERROR: 'error',\n};\n\n/**\n * The list of Signaling server reaction states during {@link Skylink#joinRoom}.\n * @typedef SYSTEM_ACTION\n * @property {String} WARNING Value <code>\"warning\"</code>\n *   The value of the state when Room session is about to end.\n * @property {String} REJECT  Value <code>\"reject\"</code>\n *   The value of the state when Room session has failed to start or has ended.\n * @property {String} LOCKED  Value <code>\"locked\"</code>\n *   The value of the state when Room sis locked.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.1\n */\nexport const SYSTEM_ACTION = {\n  WARNING: 'warning',\n  REJECT: 'reject',\n  LOCKED: 'locked',\n};\n\n/**\n * The list of Signaling server reaction states reason of action code during\n * {@link Skylink#joinRoom}.\n * @typedef SYSTEM_ACTION_REASON\n * @property {String} CREDENTIALS_EXPIRED Value <code>\"oldTimeStamp\"</code>\n *   The value of the reason code when Room session token has expired.\n *   Happens during {@link Skylink#joinRoom} request.\n *   Results with: <code>REJECT</code>\n * @property {String} CREDENTIALS_ERROR   Value <code>\"credentialError\"</code>\n *   The value of the reason code when Room session token provided is invalid.\n *   Happens during {@link Skylink#joinRoom} request.\n * @property {String} DUPLICATED_LOGIN    Value <code>\"duplicatedLogin\"</code>\n *   The value of the reason code when Room session token has been used already.\n *   Happens during {@link Skylink#joinRoom} request.\n *   Results with: <code>REJECT</code>\n * @property {String} ROOM_NOT_STARTED    Value <code>\"notStart\"</code>\n *   The value of the reason code when Room session has not started.\n *   Happens during {@link Skylink#joinRoom} request.\n *   Results with: <code>REJECT</code>\n * @property {String} EXPIRED             Value <code>\"expired\"</code>\n *   The value of the reason code when Room session has ended already.\n *   Happens during {@link Skylink#joinRoom} request.\n *   Results with: <code>REJECT</code>\n * @property {String} ROOM_LOCKED         Value <code>\"locked\"</code>\n *   The value of the reason code when Room is locked.\n *   Happens during {@link Skylink#joinRoom} request.\n *   Results with: <code>REJECT</code>\n * @property {String} FAST_MESSAGE        Value <code>\"fastmsg\"</code>\n *    The value of the reason code when User is flooding socket messages to the Signaling server\n *    that is sent too quickly within less than a second interval.\n *    Happens after Room session has started. This can be caused by various methods like\n *    {@link Skylink#sendMessage},\n *    {@link Skylink#muteStreams},\n *    {@link Skylink#enableAudio},\n *    {@link Skylink#enableVideo},\n *    {@link Skylink#disableAudio},\n *    {@link Skylink#disableVideo},\n *    Results with: <code>WARNING</code>\n * @property {String} ROOM_CLOSING        Value <code>\"toClose\"</code>\n *    The value of the reason code when Room session is ending.\n *    Happens after Room session has started. This serves as a prerequisite warning before\n *    <code>ROOM_CLOSED</code> occurs.\n *    Results with: <code>WARNING</code>\n * @property {String} ROOM_CLOSED         Value <code>\"roomclose\"</code>\n *    The value of the reason code when Room session has just ended.\n *    Happens after Room session has started.\n *    Results with: <code>REJECT</code>\n * @property {String} SERVER_ERROR        Value <code>\"serverError\"</code>\n *    The value of the reason code when Room session fails to start due to some technical errors.\n *    Happens during {@link Skylink#joinRoom} request.\n *    Results with: <code>REJECT</code>\n * @property {String} KEY_ERROR           Value <code>\"keyFailed\"</code>\n *    The value of the reason code when Room session fails to start due to some technical error pertaining to\n *    App Key initialization.\n *    Happens during {@link Skylink#joinRoom} request.\n *    Results with: <code>REJECT</code>\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.2\n */\nexport const SYSTEM_ACTION_REASON = {\n  CREDENTIALS_EXPIRED: 'oldTimeStamp',\n  CREDENTIALS_ERROR: 'credentialError',\n  DUPLICATED_LOGIN: 'duplicatedLogin',\n  ROOM_NOT_STARTED: 'notStart',\n  EXPIRED: 'expired',\n  ROOM_LOCKED: 'locked',\n  FAST_MESSAGE: 'fastmsg',\n  ROOM_CLOSING: 'toclose',\n  ROOM_CLOSED: 'roomclose',\n  SERVER_ERROR: 'serverError',\n  KEY_ERROR: 'keyFailed',\n};\n\n/**\n * The list of Skylink {@link initOptions} ready states.\n * @typedef READY_STATE_CHANGE\n * @property {number} INIT      Value <code>0</code>\n *   The value of the state when <code>init()</code> has just started.\n * @property {number} LOADING   Value <code>1</code>\n *   The value of the state when <code>init()</code> is authenticating App Key provided\n *   (and with credentials if provided as well) with the Auth server.\n * @property {number} COMPLETED Value <code>2</code>\n *   The value of the state when <code>init()</code> has successfully authenticated with the Auth server.\n *   Room session token is generated for joining the <codRoom</code> provided in <code>init()</code>.\n *   Room session token has to be generated each time User switches to a different Room\n *   in {@link Skylink#joinRoom}.\n * @property {number} ERROR     Value <code>-1</code>\n *   The value of the state when <code>init()</code> has failed authenticating with the Auth server.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.1.0\n */\nexport const READY_STATE_CHANGE = {\n  INIT: 0,\n  LOADING: 1,\n  COMPLETED: 2,\n  ERROR: -1,\n};\n\n/**\n * The list of Skylink {@link initOptions} ready state failure codes.\n * @typedef READY_STATE_CHANGE_ERROR\n * @property {number} API_INVALID                 Value <code>4001</code>\n *   The value of the failure code when provided App Key in <code>init()</code> does not exists.\n *   To resolve this, check that the provided App Key exists in\n *   <a href=\"https://console.temasys.io\">the Temasys Console</a>.\n * @property {number} API_DOMAIN_NOT_MATCH        Value <code>4002</code>\n *   The value of the failure code when <code>\"domainName\"</code> property in the App Key does not\n *   match the accessing server IP address.\n *   To resolve this, contact our <a href=\"http://support.temasys.io\">support portal</a>.\n * @property {number} API_CORS_DOMAIN_NOT_MATCH   Value <code>4003</code>\n *   The value of the failure code when <code>\"corsurl\"</code> property in the App Key does not match accessing CORS.\n *   To resolve this, configure the App Key CORS in\n *   <a href=\"https://console.temasys.io\">the Temasys Console</a>.\n * @property {number} API_CREDENTIALS_INVALID     Value <code>4004</code>\n *   The value of the failure code when there is no [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\n *   present in the HTTP headers during the request to the Auth server present nor\n *   <code>options.credentials.credentials</code> configuration provided in the <code>init()</code>.\n *   To resolve this, ensure that CORS are present in the HTTP headers during the request to the Auth server.\n * @property {number} API_CREDENTIALS_NOT_MATCH   Value <code>4005</code>\n *   The value of the failure code when the <code>options.credentials.credentials</code> configuration provided in the\n *   <code>init()</code> does not match up with the <code>options.credentials.startDateTime</code>,\n *   <code>options.credentials.duration</code> or that the <code>\"secret\"</code> used to generate\n *   <code>options.credentials.credentials</code> does not match the App Key's <code>\"secret</code> property provided.\n *   To resolve this, check that the <code>options.credentials.credentials</code> is generated correctly and\n *   that the <code>\"secret\"</code> used to generate it is from the App Key provided in the <code>init()</code>.\n * @property {number} API_INVALID_PARENT_KEY      Value <code>4006</code>\n *   The value of the failure code when the App Key provided does not belong to any existing App.\n *   To resolve this, check that the provided App Key exists in\n *   <a href=\"https://console.temasys.io\">the Developer Console</a>.\n * @property {number} API_NO_MEETING_RECORD_FOUND Value <code>4010</code>\n *   The value of the failure code when provided <code>options.credentials</code>\n *   does not match any scheduled meetings available for the \"Persistent Room\" enabled App Key provided.\n *   See the <a href=\"http://support.temasys.io/support/solutions/articles/\n * 12000002811-using-the-persistent-room-feature-to-configure-meetings\">Persistent Room article</a> to learn more.\n * @property {number} API_OVER_SEAT_LIMIT         Value <code>4020</code>\n *   The value of the failure code when App Key has reached its current concurrent users limit.\n *   To resolve this, use another App Key. To create App Keys dynamically, see the\n *   <a href=\"https://temasys.atlassian.net/wiki/display/TPD/SkylinkAPI+-+Application+Resources\">Application REST API\n *   docs</a> for more information.\n * @property {number} API_RETRIEVAL_FAILED        Value <code>4021</code>\n *   The value of the failure code when App Key retrieval of authentication token fails.\n *   If this happens frequently, contact our <a href=\"http://support.temasys.io\">support portal</a>.\n * @property {number} API_WRONG_ACCESS_DOMAIN     Value <code>5005</code>\n *   The value of the failure code when App Key makes request to the incorrect Auth server.\n *   To resolve this, ensure that the <code>roomServer</code> is not configured. If this persists even without\n *   <code>roomServer</code> configuration, contact our <a href=\"http://support.temasys.io\">support portal</a>.\n * @property {number} XML_HTTP_REQUEST_ERROR      Value <code>-1</code>\n *   The value of the failure code when requesting to Auth server has timed out.\n * @property {number} XML_HTTP_NO_REPONSE_ERROR      Value <code>-2</code>\n *   The value of the failure code when response from Auth server is empty or timed out.\n * @property {number} NO_SOCKET_IO                Value <code>1</code>\n *   The value of the failure code when dependency <a href=\"http://socket.io/download/\">Socket.IO client</a> is not loaded.\n *   To resolve this, ensure that the Socket.IO client dependency is loaded before the Skylink SDK.\n *   You may use the provided Socket.IO client <a href=\"http://socket.io/download/\">CDN here</a>.\n * @property {number} NO_XMLHTTPREQUEST_SUPPORT   Value <code>2</code>\n *   The value of the failure code when <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">\n *   XMLHttpRequest API</a> required to make request to Auth server is not supported.\n *   To resolve this, display in the Web UI to ask clients to switch to the list of supported browser\n *   as <a href=\"https://github.com/Temasys/SkylinkJS/tree/0.6.14#supported-browsers\">listed in here</a>.\n * @property {number} NO_WEBRTC_SUPPORT           Value <code>3</code>\n *   The value of the failure code when <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/\">\n *   RTCPeerConnection API</a> required for Peer connections is not supported.\n *   To resolve this, display in the Web UI to ask clients to switch to the list of supported browser\n *   as <a href=\"https://github.com/Temasys/SkylinkJS/tree/0.6.14#supported-browsers\">listed in here</a>.\n *   For <a href=\"http://confluence.temasys.com.sg/display/TWPP\">plugin supported browsers</a>, if the clients\n *   does not have the plugin installed, there will be an installation toolbar that will prompt for installation\n *   to support the RTCPeerConnection API.\n * @property {number} NO_PATH                     Value <code>4</code>\n *   The value of the failure code when provided <code>init()</code> configuration has errors.\n * @property {number} ADAPTER_NO_LOADED           Value <code>7</code>\n *   The value of the failure code when dependency <a href=\"https://github.com/Temasys/AdapterJS/\">AdapterJS</a>\n *   is not loaded.\n *   To resolve this, ensure that the AdapterJS dependency is loaded before the Skylink dependency.\n *   You may use the provided AdapterJS <a href=\"https://github.com/Temasys/AdapterJS/\">CDN here</a>.\n * @property {number} PARSE_CODECS                Value <code>8</code>\n *   The value of the failure code when codecs support cannot be parsed and retrieved.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.4.0\n */\nexport const READY_STATE_CHANGE_ERROR = {\n  API_INVALID: 4001,\n  API_DOMAIN_NOT_MATCH: 4002,\n  API_CORS_DOMAIN_NOT_MATCH: 4003,\n  API_CREDENTIALS_INVALID: 4004,\n  API_CREDENTIALS_NOT_MATCH: 4005,\n  API_INVALID_PARENT_KEY: 4006,\n  API_NO_MEETING_RECORD_FOUND: 4010,\n  API_OVER_SEAT_LIMIT: 4020,\n  API_RETRIEVAL_FAILED: 4021,\n  API_WRONG_ACCESS_DOMAIN: 5005,\n  XML_HTTP_REQUEST_ERROR: -1,\n  XML_HTTP_NO_REPONSE_ERROR: -2,\n  NO_SOCKET_IO: 1,\n  NO_XMLHTTPREQUEST_SUPPORT: 2,\n  NO_WEBRTC_SUPPORT: 3,\n  NO_PATH: 4,\n  ADAPTER_NO_LOADED: 7,\n  PARSE_CODECS: 8,\n};\n\n/**\n * Spoofs the REGIONAL_SERVER to prevent errors on deployed apps except the fact this no longer works.\n * Automatic regional selection has already been implemented hence REGIONAL_SERVER is no longer useful.\n * @typedef REGIONAL_SERVER\n * @constant\n * @type Object\n * @readOnly\n * @private\n * @memberOf SkylinkConstants\n * @since 0.6.16\n */\nexport const REGIONAL_SERVER = {\n  APAC1: '',\n  US1: '',\n};\n\n/**\n * The list of User's priority weight schemes for {@link Skylink#joinRoom} connections.\n * @typedef PRIORITY_WEIGHT_SCHEME\n * @property {String} ENFORCE_OFFERER  Value <code>\"enforceOfferer\"</code>\n *   The value of the priority weight scheme to enforce User as the offerer.\n * @property {String} ENFORCE_ANSWERER Value <code>\"enforceAnswerer\"</code>\n *   The value of the priority weight scheme to enforce User as the answerer.\n * @property {String} AUTO             Value <code>\"auto\"</code>\n *   The value of the priority weight scheme to let User be offerer or answerer based on Signaling server selection.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.18\n * @deprecated\n * @ignore\n */\nexport const PRIORITY_WEIGHT_SCHEME = {\n  ENFORCE_OFFERER: 'enforceOfferer',\n  ENFORCE_ANSWERER: 'enforceAnswerer',\n  AUTO: 'auto',\n};\n\n/**\n * The list of the SDK <code>console</code> API log levels.\n * @typedef LOG_LEVEL\n * @property {number} DEBUG Value <code>4</code>\n *   The value of the log level that displays <code>console</code> <code>debug</code>,\n *   <code>log</code>, <code>info</code>, <code>warn</code> and <code>error</code> logs.\n * @property {number} LOG   Value <code>3</code>\n *   The value of the log level that displays only <code>console</code> <code>log</code>,\n *   <code>info</code>, <code>warn</code> and <code>error</code> logs.\n * @property {number} INFO  Value <code>2</code>\n *   The value of the log level that displays only <code>console</code> <code>info</code>,\n *   <code>warn</code> and <code>error</code> logs.\n * @property {number} WARN  Value <code>1</code>\n *   The value of the log level that displays only <code>console</code> <code>warn</code>\n *   and <code>error</code> logs.\n * @property {number} ERROR Value <code>0</code>\n *   The value of the log level that displays only <code>console</code> <code>error</code> logs.\n * @property {number} NONE Value <code>-1</code>\n *   The value of the log level that displays no logs.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.4\n */\nexport const LOG_LEVEL = {\n  DEBUG: 4,\n  LOG: 3,\n  INFO: 2,\n  WARN: 1,\n  ERROR: 0,\n  NONE: -1,\n};\n\n/**\n * The list of {@link Skylink#joinRoom} socket connection failure states.\n * @typedef SOCKET_ERROR\n * @property {number} CONNECTION_FAILED    Value <code>0</code>\n *   The value of the failure state when <code>joinRoom()</code> socket connection failed to establish with\n *   the Signaling server at the first attempt.\n * @property {number} RECONNECTION_FAILED  Value <code>-1</code>\n *   The value of the failure state when <code>joinRoom()</code> socket connection failed to establish\n *   the Signaling server after the first attempt.\n * @property {number} CONNECTION_ABORTED   Value <code>-2</code>\n *   The value of the failure state when <code>joinRoom()</code> socket connection will not attempt\n *   to reconnect after the failure of the first attempt in <code>CONNECTION_FAILED</code> as there\n *   are no more ports or transports to attempt for reconnection.\n * @property {number} RECONNECTION_ABORTED Value <code>-3</code>\n *   The value of the failure state when <code>joinRoom()</code> socket connection will not attempt\n *   to reconnect after the failure of several attempts in <code>RECONNECTION_FAILED</code> as there\n *   are no more ports or transports to attempt for reconnection.\n * @property {number} RECONNECTION_ATTEMPT Value <code>-4</code>\n *   The value of the failure state when <code>joinRoom()</code> socket connection is attempting\n *   to reconnect with a new port or transport after the failure of attempts in\n *   <code>CONNECTION_FAILED</code> or <code>RECONNECTED_FAILED</code>.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.6\n */\nexport const SOCKET_ERROR = {\n  CONNECTION_FAILED: 0,\n  RECONNECTION_FAILED: -1,\n  CONNECTION_ABORTED: -2,\n  RECONNECTION_ABORTED: -3,\n  RECONNECTION_ATTEMPT: -4,\n};\n\n/**\n * The list of {@link Skylink#joinRoom} socket connection reconnection states.\n * @typedef SOCKET_FALLBACK\n * @property {String} NON_FALLBACK      Value <code>\"nonfallback\"</code>\n *   The value of the reconnection state when <code>joinRoom()</code> socket connection is at its initial state\n *   without transitioning to any new socket port or transports yet.\n * @property {String} FALLBACK_PORT     Value <code>\"fallbackPortNonSSL\"</code>\n *   The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n *   another new HTTP port using WebSocket transports to attempt to establish connection with Signaling server.\n * @property {String} FALLBACK_PORT_SSL Value <code>\"fallbackPortSSL\"</code>\n *   The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n *   another new HTTPS port using WebSocket transports to attempt to establish connection with Signaling server.\n * @property {String} LONG_POLLING      Value <code>\"fallbackLongPollingNonSSL\"</code>\n *   The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n *   another new HTTP port using Polling transports to attempt to establish connection with Signaling server.\n * @property {String} LONG_POLLING_SSL  Value <code>\"fallbackLongPollingSSL\"</code>\n *   The value of the reconnection state when <code>joinRoom()</code> socket connection is reconnecting with\n *   another new HTTPS port using Polling transports to attempt to establish connection with Signaling server.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.6\n */\nexport const SOCKET_FALLBACK = {\n  NON_FALLBACK: 'nonfallback',\n  FALLBACK_PORT: 'fallbackPortNonSSL',\n  FALLBACK_SSL_PORT: 'fallbackPortSSL',\n  LONG_POLLING: 'fallbackLongPollingNonSSL',\n  LONG_POLLING_SSL: 'fallbackLongPollingSSL',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Note that this is used only for SDK developer purposes.<br>\n *   Current version: <code>0.1.4</code>\n * </blockquote>\n * The value of the current version of the Signaling socket message protocol.\n * @typedef SM_PROTOCOL_VERSION\n * @constant\n * @type string\n * @memberOf SkylinkConstants\n * @since 0.6.0\n */\nexport const SM_PROTOCOL_VERSION = '2.1.0';\n\n/**\n * <blockquote class=\"info\">\n *   Note that if the video codec is not supported, the SDK will not configure the local <code>\"offer\"</code> or\n *   <code>\"answer\"</code> session description to prefer the codec.\n * </blockquote>\n * The list of available video codecs to set as the preferred video codec to use to encode\n * sending video data when available encoded video codec for Peer connections\n * configured in Skylink {@link initOptions}.\n * @typedef VIDEO_CODEC\n * @property {String} AUTO Value <code>\"auto\"</code>\n *   The value of the option to not prefer any video codec but rather use the created\n *   local <code>\"offer\"</code> / <code>\"answer\"</code> session description video codec preference.\n * @property {String} VP8  Value <code>\"VP8\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/VP8\">VP8</a> video codec.\n * @property {String} VP9  Value <code>\"VP9\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/VP9\">VP9</a> video codec.\n * @property {String} H264 Value <code>\"H264\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC\">H264</a> video codec.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.10\n */\nexport const VIDEO_CODEC = {\n  AUTO: 'auto',\n  VP8: 'VP8',\n  H264: 'H264',\n  VP9: 'VP9',\n  // H264UC: 'H264UC'\n};\n\n/**\n * <blockquote class=\"info\">\n *   Note that if the audio codec is not supported, the SDK will not configure the local <code>\"offer\"</code> or\n *   <code>\"answer\"</code> session description to prefer the codec.\n * </blockquote>\n * The list of available audio codecs to set as the preferred audio codec to use to encode\n * sending audio data when available encoded audio codec for Peer connections\n * configured in Skylink {@link initOptions}.\n * @typedef AUDIO_CODEC\n * @property {String} AUTO Value <code>\"auto\"</code>\n *   The value of the option to not prefer any audio codec but rather use the created\n *   local <code>\"offer\"</code> / <code>\"answer\"</code> session description audio codec preference.\n * @property {String} OPUS Value <code>\"opus\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/Opus_(audio_format)\">OPUS</a> audio codec.\n * @property {String} ISAC Value <code>\"ISAC\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/Internet_Speech_Audio_Codec\">ISAC</a> audio codec.\n * @property {String} ILBC Value <code>\"ILBC\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec\">iLBC</a> audio codec.\n * @property {String} G722 Value <code>\"G722\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/G.722\">G722</a> audio codec.\n * @property {String} PCMA Value <code>\"PCMA\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/G.711\">G711u</a> audio codec.\n * @property {String} PCMU Value <code>\"PCMU\"</code>\n *   The value of the option to prefer the <a href=\"https://en.wikipedia.org/wiki/G.711\">G711a</a> audio codec.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.10\n */\nexport const AUDIO_CODEC = {\n  AUTO: 'auto',\n  ISAC: 'ISAC',\n  OPUS: 'opus',\n  ILBC: 'ILBC',\n  G722: 'G722',\n  PCMU: 'PCMU',\n  PCMA: 'PCMA',\n  // SILK: 'SILK'\n};\n\n/**\n * The list of available screensharing media sources configured in the\n * {@link Skylink#shareScreen}.\n * @typedef MEDIA_SOURCE\n * @property {String} SCREEN Value <code>\"screen\"</code>\n *   The value of the option to share entire screen.\n * @property {String} WINDOW Value <code>\"window\"</code>\n *   The value of the option to share application windows.\n * @property {String} TAB Value <code>\"tab\"</code>\n *   The value of the option to share browser tab.\n *   Note that this is only supported by from Chrome 52+ and Opera 39+.\n * @property {String} TAB_AUDIO Value <code>\"audio\"</code>\n *   The value of the option to share browser tab audio.\n *   Note that this is only supported by Chrome 52+ and Opera 39+.\n *   <code>options.audio</code> has to be enabled with <code>TAB</code> also requested to enable sharing of tab audio.\n * @property {String} APPLICATION Value <code>\"application\"</code>\n *   The value of the option to share applications.\n *   Note that this is only supported by Firefox currently.\n * @property {String} BROWSER Value <code>\"browser\"</code>\n *   The value of the option to share browser.\n *   Note that this is only supported by Firefox currently, and requires toggling the <code>media.getUserMedia.browser.enabled</code>\n *   in <code>about:config</code>.\n * @property {String} CAMERA Value <code>\"camera\"</code>\n *   The value of the option to share camera.\n *   Note that this is only supported by Firefox currently.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.10\n */\nexport const MEDIA_SOURCE = {\n  SCREEN: 'screen',\n  WINDOW: 'window',\n  TAB: 'tab',\n  TAB_AUDIO: 'audio',\n  APPLICATION: 'application',\n  BROWSER: 'browser',\n  CAMERA: 'camera',\n};\n\n/**\n * <blockquote class=\"info\">\n *   Note that currently {@link Skylink#getUserMedia} only configures\n *   the maximum resolution of the Stream due to browser interopability and support.\n * </blockquote>\n * The list of <a href=\"https://en.wikipedia.org/wiki/Graphics_display_resolution#Video_Graphics_Array\">\n * video resolutions</a> sets configured in the {@link Skylink#getUserMedia}.\n * @typedef VIDEO_RESOLUTION\n * @property {Object} QQVGA Value <code>{ width: 160, height: 120 }</code>\n *   The value of the option to configure QQVGA resolution.\n *   Aspect ratio: <code>4:3</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} HQVGA Value <code>{ width: 240, height: 160 }</code>\n *   The value of the option to configure HQVGA resolution.\n *   Aspect ratio: <code>3:2</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} QVGA Value <code>{ width: 320, height: 240 }</code>\n *   The value of the option to configure QVGA resolution.\n *   Aspect ratio: <code>4:3</code>\n * @property {Object} WQVGA Value <code>{ width: 384, height: 240 }</code>\n *   The value of the option to configure WQVGA resolution.\n *   Aspect ratio: <code>16:10</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} HVGA Value <code>{ width: 480, height: 320 }</code>\n *   The value of the option to configure HVGA resolution.\n *   Aspect ratio: <code>3:2</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} VGA Value <code>{ width: 640, height: 480 }</code>\n *   The value of the option to configure VGA resolution.\n *   Aspect ratio: <code>4:3</code>\n * @property {Object} WVGA Value <code>{ width: 768, height: 480 }</code>\n *   The value of the option to configure WVGA resolution.\n *   Aspect ratio: <code>16:10</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} FWVGA Value <code>{ width: 854, height: 480 }</code>\n *   The value of the option to configure FWVGA resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} SVGA Value <code>{ width: 800, height: 600 }</code>\n *   The value of the option to configure SVGA resolution.\n *   Aspect ratio: <code>4:3</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} DVGA Value <code>{ width: 960, height: 640 }</code>\n *   The value of the option to configure DVGA resolution.\n *   Aspect ratio: <code>3:2</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} WSVGA Value <code>{ width: 1024, height: 576 }</code>\n *   The value of the option to configure WSVGA resolution.\n *   Aspect ratio: <code>16:9</code>\n * @property {Object} HD Value <code>{ width: 1280, height: 720 }</code>\n *   The value of the option to configure HD resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on device supports.\n * @property {Object} HDPLUS Value <code>{ width: 1600, height: 900 }</code>\n *   The value of the option to configure HDPLUS resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} FHD Value <code>{ width: 1920, height: 1080 }</code>\n *   The value of the option to configure FHD resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on device supports.\n * @property {Object} QHD Value <code>{ width: 2560, height: 1440 }</code>\n *   The value of the option to configure QHD resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} WQXGAPLUS Value <code>{ width: 3200, height: 1800 }</code>\n *   The value of the option to configure WQXGAPLUS resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} UHD Value <code>{ width: 3840, height: 2160 }</code>\n *   The value of the option to configure UHD resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} UHDPLUS Value <code>{ width: 5120, height: 2880 }</code>\n *   The value of the option to configure UHDPLUS resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} FUHD Value <code>{ width: 7680, height: 4320 }</code>\n *   The value of the option to configure FUHD resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @property {Object} QUHD Value <code>{ width: 15360, height: 8640 }</code>\n *   The value of the option to configure QUHD resolution.\n *   Aspect ratio: <code>16:9</code>\n *   Note that configurating this resolution may not be supported depending on browser and device supports.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.6\n */\nexport const VIDEO_RESOLUTION = {\n  QQVGA: { width: 160, height: 120 /* , aspectRatio: '4:3' */ },\n  HQVGA: { width: 240, height: 160 /* , aspectRatio: '3:2' */ },\n  QVGA: { width: 320, height: 240 /* , aspectRatio: '4:3' */ },\n  WQVGA: { width: 384, height: 240 /* , aspectRatio: '16:10' */ },\n  HVGA: { width: 480, height: 320 /* , aspectRatio: '3:2' */ },\n  VGA: { width: 640, height: 480 /* , aspectRatio: '4:3' */ },\n  WVGA: { width: 768, height: 480 /* , aspectRatio: '16:10' */ },\n  FWVGA: { width: 854, height: 480 /* , aspectRatio: '16:9' */ },\n  SVGA: { width: 800, height: 600 /* , aspectRatio: '4:3' */ },\n  DVGA: { width: 960, height: 640 /* , aspectRatio: '3:2' */ },\n  WSVGA: { width: 1024, height: 576 /* , aspectRatio: '16:9' */ },\n  HD: { width: 1280, height: 720 /* , aspectRatio: '16:9' */ },\n  HDPLUS: { width: 1600, height: 900 /* , aspectRatio: '16:9' */ },\n  FHD: { width: 1920, height: 1080 /* , aspectRatio: '16:9' */ },\n  QHD: { width: 2560, height: 1440 /* , aspectRatio: '16:9' */ },\n  WQXGAPLUS: { width: 3200, height: 1800 /* , aspectRatio: '16:9' */ },\n  UHD: { width: 3840, height: 2160 /* , aspectRatio: '16:9' */ },\n  UHDPLUS: { width: 5120, height: 2880 /* , aspectRatio: '16:9' */ },\n  FUHD: { width: 7680, height: 4320 /* , aspectRatio: '16:9' */ },\n  QUHD: { width: 15360, height: 8640 /* , aspectRatio: '16:9' */ },\n};\n\n/**\n * The list of {@link Skylink#getUserMedia} or\n * {@link Skylink#shareScreen} Stream fallback states.\n * @typedef MEDIA_ACCESS_FALLBACK_STATE\n * @property {Object} FALLBACKING Value <code>0</code>\n *   The value of the state when <code>getUserMedia()</code> will retrieve audio track only\n *   when retrieving audio and video tracks failed.\n *   This can be configured by Skylink {@link initOptions}\n *   <code>audioFallback</code> option.\n * @property {Object} FALLBACKED  Value <code>1</code>\n *   The value of the state when <code>getUserMedia()</code> or <code>shareScreen()</code>\n *   retrieves camera / screensharing Stream successfully but with missing originally required audio or video tracks.\n * @property {Object} ERROR       Value <code>-1</code>\n *   The value of the state when <code>getUserMedia()</code> failed to retrieve audio track only\n *   after retrieving audio and video tracks failed.\n * @readOnly\n * @constant\n * @type Object\n * @memberOf SkylinkConstants\n * @since 0.6.14\n */\nexport const MEDIA_ACCESS_FALLBACK_STATE = {\n  FALLBACKING: 0,\n  FALLBACKED: 1,\n  ERROR: -1,\n};\n\n/**\n * The list of recording states.\n * @typedef RECORDING_STATE\n * @property {number} START Value <code>0</code>\n *   The value of the state when recording session has started.\n * @property {number} STOP Value <code>1</code>\n *   The value of the state when recording session has stopped.<br>\n *   At this stage, the recorded videos will go through the mixin server to compile the videos.\n * @property {number} LINK Value <code>2</code>\n *   The value of the state when recording session mixin request has been completed.\n * @property {number} ERROR Value <code>-1</code>\n *   The value of the state state when recording session has errors.\n *   This can happen during recording session or during mixin of recording videos,\n *   and at this stage, any current recording session or mixin is aborted.\n * @constant\n * @type Object\n * beta\n * @memberOf SkylinkConstants\n * @since 0.6.16\n */\nexport const RECORDING_STATE = {\n  START: 0,\n  STOP: 1,\n  LINK: 2,\n  ERROR: -1,\n};\n\n/**\n * Stores the data chunk size for Blob transfers.\n * @typedef CHUNK_FILE_SIZE\n * @type Number\n * @private\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.2\n * @ignore\n */\nexport const CHUNK_FILE_SIZE = 49152;\n\n/**\n * Stores the data chunk size for Blob transfers transferring from/to\n *   Firefox browsers due to limitation tested in the past in some PCs (linx predominatly).\n * @typedef MOZ_CHUNK_FILE_SIZE\n * @type Number\n * @private\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.2\n * @ignore\n */\nexport const MOZ_CHUNK_FILE_SIZE = 12288;\n\n/**\n * Stores the data chunk size for binary Blob transfers.\n * @typedef BINARY_FILE_SIZE\n * @type Number\n * @private\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.16\n * @ignore\n */\nexport const BINARY_FILE_SIZE = 65456;\n\n/**\n * Stores the data chunk size for binary Blob transfers.\n * @typedef MOZ_BINARY_FILE_SIZE\n * @type Number\n * @private\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.16\n * @ignore\n */\nexport const MOZ_BINARY_FILE_SIZE = 16384;\n\n/**\n * Stores the data chunk size for data URI string transfers.\n * @typedef CHUNK_DATAURL_SIZE\n * @type Number\n * @private\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.2\n * @ignore\n */\nexport const CHUNK_DATAURL_SIZE = 1212;\n\n/**\n * Stores the list of data transfer protocols.\n * @typedef DC_PROTOCOL_TYPE\n * @property {String} WRQ The protocol to initiate data transfer.\n * @property {String} ACK The protocol to request for data transfer chunk.\n *   Give <code>-1</code> to reject the request at the beginning and <code>0</code> to accept\n *   the data transfer request.\n * @property {String} CANCEL The protocol to terminate data transfer.\n * @property {String} ERROR The protocol when data transfer has errors and has to be terminated.\n * @property {String} MESSAGE The protocol that is used to send P2P messages.\n * @constant\n * @type Object\n * @readOnly\n * @private\n * @memberOf SkylinkConstants\n * @since 0.5.2\n * @ignore\n */\nexport const DC_PROTOCOL_TYPE = {\n  WRQ: 'WRQ',\n  ACK: 'ACK',\n  ERROR: 'ERROR',\n  CANCEL: 'CANCEL',\n  MESSAGE: 'MESSAGE',\n};\n\n/**\n * Stores the list of socket messaging protocol types.\n * See confluence docs for the list based on the current <code>SM_PROTOCOL_VERSION</code>.\n * @typedef SIG_MESSAGE_TYPE\n * @property {String} JOIN_ROOM Value <code>joinRoom</code>\n * Message sent by peer to Signalling server to join the room.\n * @property {String} IN_ROOM Value <code>inRoom</code>\n * Message received by peer from Signalling server when peer successfully connects to the room.\n * @property {String} ENTER Value <code>enter</code>\n * Message sent by peer to all peers in the room (after <code>inRoom</code> message).\n * @property {String} WELCOME Value <code>welcome</code>\n * Message sent by peer in response to <code>enter</code> message.\n * @property {String} OFFER Value <code>offer</code>\n * Messsage sent by the peer with the higher weight to the targeted peer after the enter/welcome message.\n * Message is sent after the local offer is created and set, or after all its local ICE candidates have been gathered completely for non-trickle ICE connections (gathering process happens after the local offer is set).\n * The targeted peer will have to set the received remote offer, create and set the local answer and send to sender peer the <code>answer</code> message to end the offer/answer handshaking process.\n * @property {String} ANSWER Value <code>answer</code>\n * Message sent by the targeted peer with the lower weight back to the peer in response to <code>offer</code> message.\n * The peer will have to set the received remote answer, which ends the offer/answer handshaking process.\n * @property {String} CANDIDATE Value <code>candidate</code>\n * Message sent by peer to targeted peer when it has gathered a local ICE candidate.\n * @property {String} BYE Value <code>bye</code>\n * Message that is broadcast by Signalling server when a peer's socket connection has been disconnected. This happens when a peer leaves the room.\n * @property {String} REDIRECT Value <code>redirect</code>\n * Message received from Signalling server when a peer fails to connect to the room (after <code>joinRoom</code> message).\n * @property {String} UPDATE_USER Value <code>updateUserEvent</code>\n * Message that is broadcast by peer to all peers in the room when the peer's custom userData has changed.\n * @property {String} ROOM_LOCK Value <code>roomLockEvent</code>\n * Message that is broadcast by peer to all peers in the room to toggle the Signaling server Room lock status\n * @property {String} MUTE_VIDEO_EVENT Value <code>muteVideoEvent</code>\n * Message that is broadcast by peer to all peers in the room to inform other peers that its sent stream object video tracks muted status have changed.\n * @property {String} MUTE_AUDIO_EVENT Value <code>muteAudioEvent</code>\n * Message that is broadcast by peer to all peers in the room to inform other peers that its sent stream object audio tracks muted status have changed.\n * @property {String} PUBLIC_MESSAGE Value <code>public</code>\n * Message sent by peer to all peers in the room as a public message.\n * @property {String} PRIVATE_MESSAGE Value <code>private</code>\n * Message sent to a targeted peer as a private message.\n * @property {String} STREAM Value <code>stream</code>\n * Message that is boradcast by peer to all peers in the room to indicate the sender peer's stream object status.\n * @property {String} GROUP Value <code>group</code>\n * Message that is boradcast by peer to all peers in the room for bundled messages that was sent before a second interval.\n * @property {String} GET_PEERS Value <code>getPeers</code>\n * Message sent by peer (connecting from a Privileged Key) to the Signaling server to retrieve a list of peer IDs in each room within the same App space (app keys that have the same parent app).\n * @property {String} PEER_LIST Value <code>peerList</code>\n * Message sent by Signalling server to the peer (connecting from a Privileged Key) containing the list of peer IDs.\n * @property {String} INTRODUCE Value <code>introduce</code>\n * Message sent by peer (connecting from a Privileged Key) to the Signaling server to introduce a peer to another peer in the same room. Peers can be a Privileged Key Peer or non-Privileged Key Peer.\n * @property {String} INTRODUCE_ERROR Value <code>introduceError</code>\n * Message sent by Signaling server to requestor peer (connecting from a Privileged Key) when introducing two peers fails.\n * @property {String} APPROACH Value <code>approach</code>\n * Message sent by Signaling server to the peer defined in the \"sendingPeerId\" in the <code>introduce</code> message.\n * @property {String} START_RECORDING Value <code>startRecordingRoom</code>\n * Message sent by peer to a peer (connecting from an MCU Key) to start recording session.\n * @property {String} STOP_RECORDING Value <code>stopRecordingRooms</code>\n * Message sent by peer to a peer (connecting from an MCU Key) to stop recording session.\n * @property {String} RECORDING Value <code>recordingEvent</code>\n * Message broadcasted by peer (connecting from an MCU Key) to all peers to indicate the status of the recording session.\n * @property {String} END_OF_CANDIDATES Value <code>endOfCandidates</code>\n * Message sent by peer to the targeted peer after all its local ICE candidates gathering has completed.\n * @property {String} MEDIA_INFO_EVENT Value <code>mediaStateChangeEvent</code>\n * Message sent by peer to all peers to communicate change of media state.\n * * @property {String} MESSAGE Value <code>message</code>\n * Message sent by peer to all peers in the room as either a public or a private message.\n * @property {String} GET_STORED_MESSAGES Value <code>getStoredMessages</code>\n * Message sent by peer to Signaling server to retrieve stored (persisted) messages.\n * @private\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.5.6\n */\nexport const SIG_MESSAGE_TYPE = {\n  JOIN_ROOM: 'joinRoom',\n  IN_ROOM: 'inRoom',\n  ENTER: 'enter',\n  WELCOME: 'welcome',\n  OFFER: 'offer',\n  ANSWER: 'answer',\n  ANSWER_ACK: 'answerAck',\n  CANDIDATE: 'candidate',\n  BYE: 'bye',\n  REDIRECT: 'redirect',\n  UPDATE_USER: 'updateUserEvent',\n  ROOM_LOCK: 'roomLockEvent',\n  PUBLIC_MESSAGE: 'public',\n  PRIVATE_MESSAGE: 'private',\n  STREAM: 'stream',\n  GROUP: 'group',\n  GET_PEERS: 'getPeers',\n  PEER_LIST: 'peerList',\n  INTRODUCE: 'introduce',\n  INTRODUCE_ERROR: 'introduceError',\n  APPROACH: 'approach',\n  START_RECORDING: 'startRecordingRoom',\n  STOP_RECORDING: 'stopRecordingRoom',\n  RECORDING: 'recordingEvent',\n  END_OF_CANDIDATES: 'endOfCandidates',\n  START_SCREENSHARE: 'startScreenshare',\n  START_RTMP: 'startRTMP',\n  STOP_RTMP: 'stopRTMP',\n  RTMP: 'rtmpEvent',\n  MEDIA_INFO_EVENT: 'mediaInfoEvent',\n  MUTE_VIDEO_EVENT: 'muteVideoEvent',\n  MUTE_AUDIO_EVENT: 'muteAudioEvent',\n  MESSAGE: 'message',\n  GET_STORED_MESSAGES: 'getStoredMessages',\n  STORED_MESSAGES: 'storedMessages',\n};\n\nexport const STREAM_STATUS = {\n  ENDED: 'ended',\n  REPLACED_STREAM_ENDED: 'replacedStreamEnded',\n  SCREENSHARE_REPLACE_START: 'screenshareStart',\n  USER_MEDIA_REPLACE_START: 'userMediaReplaceStart',\n};\n\n/**\n * Stores the list of socket messaging protocol types to queue when sent less than a second interval.\n * @typedef GROUP_MESSAGE_LIST\n * @type Array\n * @readOnly\n * @private\n * @memberOf SkylinkConstants\n * @since 0.5.10\n */\nexport const GROUP_MESSAGE_LIST = [\n  SIG_MESSAGE_TYPE.STREAM,\n  SIG_MESSAGE_TYPE.UPDATE_USER,\n  SIG_MESSAGE_TYPE.MUTE_AUDIO_EVENT,\n  SIG_MESSAGE_TYPE.MUTE_VIDEO_EVENT,\n  SIG_MESSAGE_TYPE.PUBLIC_MESSAGE,\n];\n\n/**\n * The options available for video and audio bitrates (kbps) quality.\n * @typedef VIDEO_QUALITY\n * @property {Object} HD Value <code>{ video: 3200, audio: 80 }</code>\n *   The value of option to prefer high definition video and audio bitrates.\n * @property {Object} HQ Value <code>{ video: 1200, audio: 50 }</code>\n *   The value of option to prefer high quality video and audio bitrates.\n * @property {Object} SQ Value <code>{ video: 800, audio: 30 }</code>\n *   The value of option to prefer standard quality video and audio bitrates.\n * @property {Object} LQ Value <code>{ video: 500, audio: 20 }</code>\n *   The value of option to prefer low quality video and audio bitrates.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.32\n */\nexport const VIDEO_QUALITY = {\n  HD: { video: 3200, audio: 150 },\n  HQ: { video: 1200, audio: 80 },\n  SQ: { video: 800, audio: 30 },\n  LQ: { video: 400, audio: 20 },\n};\n\n/**\n * The options available for SDP sematics while create a PeerConnection.\n * @typedef SDP_SEMANTICS\n * @property {String} PLAN_B\n *   The value of option to prefer plan-b sdp.\n * @property {String} UNIFIED\n *   The value of option to prefer unified-plan sdp.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.32\n */\nexport const SDP_SEMANTICS = {\n  PLAN_B: 'plan-b',\n  UNIFIED: 'unified-plan',\n};\n\n/**\n * The list of RTMP states.\n * @typedef RTMP_STATE\n * @property {number} START Value <code>0</code>\n *   The value of the state when live streaming session has started.\n * @property {number} STOP Value <code>1</code>\n *   The value of the state when live streaming session has stopped.<br>\n *   At this stage, the recorded videos will go through the mixin server to compile the videos.\n * @property {number} ERROR Value <code>-1</code>\n *   The value of the state state when live streaming session has errors.\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 0.6.34\n */\nexport const RTMP_STATE = {\n  START: 0,\n  STOP: 1,\n  ERROR: -1,\n};\n\n/**\n * The status of media on the stream.\n * @typedef MEDIA_STATUS\n * @property {number} MUTED <small>Value <code>0</code></small>\n * The media is present in the stream and muted\n * @property {number} ACTIVE <small>Value <code>1</code></small>\n * The media is present in the stream and active\n * @property {number} UNAVAILABLE <small>Value <code>-1</code></small>\n * The media is not present in the stream\n * @constant\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 1.0\n */\nexport const MEDIA_STATUS = {\n  MUTED: 0,\n  ACTIVE: 1,\n  UNAVAILABLE: -1,\n};\n\n/**\n * The logging tags.\n * @typedef TAGS\n * @property {String} STATS_MODULE\n * @property {String} SESSION_DESCRIPTION\n * @property {String} PEER_CONNECTION\n * @property {String} CANDIDATE_HANDLER\n * @property {String} SIG_SERVER\n * @property {String} PEER_MEDIA\n * @property {String} PEER_INFORMATION\n * @property {String} MEDIA_STREAM\n * @constant\n * @private\n * @type Object\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const TAGS = {\n  SKYLINK_EVENT: 'SKYLINK EVENT',\n  SKYLINK_ERROR: 'SKYLINK ERROR',\n  STATS_MODULE: 'RTCStatsReport',\n  SESSION_DESCRIPTION: 'RTCSessionDescription',\n  PEER_CONNECTION: 'RTCPeerConnection',\n  CANDIDATE_HANDLER: 'RTCIceCandidate',\n  DATA_CHANNEL: 'RTCDataChannel',\n  SIG_SERVER: 'SIG SERVER',\n  PEER_MEDIA: 'PEER MEDIA',\n  PEER_INFORMATION: 'PEER INFORMATION',\n  ROOM: 'ROOM',\n  RECORDING: 'RECORDING',\n  MEDIA_STREAM: 'MEDIA STREAM',\n  MESSAGING: 'MESSAGING',\n  ASYNC_MESSAGING: 'ASYNC MESSAGING',\n  ENCRYPTED_MESSAGING: 'ENCRYPTED MESSAGING',\n};\n\n/**\n * The list of media types.\n * @typedef MEDIA_TYPE\n * @property {String} AUDIO_MIC - Audio from a microphone.\n * @property {String} VIDEO_CAMERA - Video from a Camera of any type.\n * @property {String} VIDEO_SCREEN - Video of the Screen captured for screen sharing.\n * @property {String} VIDEO_OTHER - Video from source other than Camera.\n * @property {String} AUDIO - Audio from an unspecified MediaType.\n * @property {String} VIDEO - Video from an unspecified MediaType.\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const MEDIA_TYPE = {\n  AUDIO_MIC: 'audioMic',\n  VIDEO_CAMERA: 'videoCamera',\n  VIDEO_SCREEN: 'videoScreen',\n  VIDEO_OTHER: 'videoOther',\n  AUDIO: 'audio',\n  VIDEO: 'video',\n};\n\n/**\n * The ready state of the track.\n * @typedef TRACK_READY_STATE\n * @type {Object}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const TRACK_READY_STATE = {\n  LIVE: 'live',\n  ENDED: 'ended',\n};\n\n/**\n * The track kind.\n * @typedef TRACK_KIND\n * @type {Object}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const TRACK_KIND = {\n  AUDIO: 'audio',\n  VIDEO: 'video',\n};\n\n/**\n * The state of the media.\n * @typedef MEDIA_STATE\n * @property {String} MUTED - The state when the MediaTrack enabled flag is set to false. The MediaTrack is sending black frames.\n * @property {String} ACTIVE - The state when the MediaTrack enabled flag and active flag is set to true. The MediaTrack is sending frames with content.\n * @property {String} STOPPED - The state when the MediaTrack active flag is false. The MediaTrack is not sending any frames.\n * @property {String} UNAVAILABLE - The state when the MediaTrack is no longer available or has been disposed.\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const MEDIA_STATE = {\n  MUTED: 'muted',\n  ACTIVE: 'active',\n  STOPPED: 'stopped',\n  UNAVAILABLE: 'unavailable',\n};\n\n/**\n * Media Info keys.\n * @typedef MEDIA_INFO\n * @type {Object}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const MEDIA_INFO = {\n  PUBLISHER_ID: 'publisherId',\n  MEDIA_ID: 'mediaId',\n  MEDIA_TYPE: 'mediaType',\n  MEDIA_STATE: 'mediaState',\n  TRANSCEIVER_MID: 'transceiverMid',\n  MEDIA_META_DATA: 'mediaMetaData',\n  SIMULCAST: 'simulcast',\n  STREAM_ID: 'streamId',\n};\n\n/**\n * The SDK version.\n * @typedef SDK_VERSION\n * @type {String}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const SDK_VERSION = '2.0.0';\n\n/**\n * The SDK type.\n * @typedef SDK_NAME\n * @type {Object}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const SDK_NAME = {\n  WEB: 'Web SDK',\n  ANDROID: 'Android SDK',\n  IOS: 'iOS SDK',\n  CPP: 'C++ SDK',\n};\n\n/**\n * The API version.\n * @typedef API_VERSION\n * @type {String}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const API_VERSION = '9.0.0';\n\n/**\n * select Signaling server version.\n * @typedef Signaling_version\n * @type {String}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const SIGNALING_VERSION = 'sig-v2';\n\n/**\n * The Browser agent type.\n * @typedef BROWSER_AGENT\n * @type {Object}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const BROWSER_AGENT = {\n  CHROME: 'chrome',\n  FIREFOX: 'firefox',\n  SAFARI: 'safari',\n  REACT_NATIVE: 'react-native',\n};\n\n/**\n * The Peer type.\n * @typedef PEER_TYPE\n * @type {Object}\n * @private\n * @constant\n * @readOnly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const PEER_TYPE = {\n  MCU: 'MCU',\n};\n\n/**\n * Events dispatched by Socket.io.\n * @typedef SOCKET_EVENTS\n * @type {Object}\n * @private\n * @constant\n * @readonly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const SOCKET_EVENTS = {\n  CONNECT: 'connect',\n  DISCONNECT: 'disconnect',\n  RECONNECT_ATTEMPT: 'reconnect_attempt',\n  RECONNECT_SUCCESS: 'reconnect_success',\n  RECONNECT_FAILED: 'reconnect_failed',\n  RECONNECT_ERROR: 'reconnect_error',\n  MESSAGE: 'message',\n  ERROR: 'error',\n};\n\n/**\n * Socket types\n * @typedef SOCKET_TYPE\n * @type {Object}\n * @private\n * @constant\n * @readonly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const SOCKET_TYPE = {\n  POLLING: 'Polling',\n  WEBSOCKET: 'WebSocket',\n  XHR_POLLING: 'xhr-polling',\n  JSONP_POLLING: 'jsonp-polling',\n};\n\n/**\n * The state of the SDK.\n * @typedef STATES\n * @type {Object}\n * @private\n * @constant\n * @readonly\n * @memberOf SkylinkConstants\n * @since 2.0\n */\nexport const STATES = {\n  SIGNALING: SOCKET_EVENTS,\n};\n\n/**\n * @namespace SkylinkConstants.EVENTS\n * @type {object}\n * @property {String} ON_INCOMING_STREAM - 'onIncomingStream'\n * @property {String} ON_INCOMING_SCREEN_STREAM - 'onIncomingScreenStream'\n * @property {String} STREAM_ENDED - 'streamEnded'\n * @property {String} PEER_UPDATED - 'peerUpdated'\n * @property {String} PEER_JOINED - 'peerJoined'\n * @property {String} PEER_LEFT - 'peerLeft'\n * @property {String} PEER_CONNECTION_STATE - 'peerConnectionState'\n * @property {String} DATA_CHANNEL_STATE - 'dataChannelState'\n * @property {String} ON_INCOMING_MESSAGE - 'onIncomingMessage'\n * @property {String} HANDSHAKE_PROGRESS - 'handshakeProgress'\n * @property {String} SERVER_PEER_JOINED - 'serverPeerJoined'\n * @property {String} SERVER_PEER_LEFT - 'serverPeerLeft'\n * @property {String} CANDIDATE_PROCESSING_STATE - 'candidateProcessingState'\n * @property {String} CANDIDATE_GENERATION_STATE - 'candidateGenerationState'\n * @property {String} CANDIDATES_GATHERED - 'candidatesGathered'\n * @property {String} ON_INCOMING_DATA - 'onIncomingData'\n * @property {String} GET_PEERS_STATE_CHANGE - 'getPeersStateChange'\n * @property {String} SESSION_DISCONNECT - 'sessionDisconnect'\n * @property {String} STREAM_MUTED - 'streamMuted'\n * @property {String} CHANNEL_OPEN - 'channelOpen'\n * @property {String} CHANNEL_CLOSE - 'channelClose'\n * @property {String} CHANNEL_MESSAGE - 'channelMessage'\n * @property {String} CHANNEL_ERROR - 'channelError'\n * @property {String} CHANNEL_RETRY - 'channelRetry'\n * @property {String} SOCKET_ERROR - 'socketError'\n * @property {String} SYSTEM_ACTION - 'systemAction'\n * @property {String} MEDIA_ACCESS_FALLBACK - 'mediaAccessFallback'\n * @property {String} MEDIA_ACCESS_REQUIRED - 'mediaAccessRequired'\n * @property {String} MEDIA_ACCESS_STOPPED - 'mediaAccessStopped'\n * @property {String} MEDIA_ACCESS_SUCCESS - 'mediaAccessSuccess'\n * @property {String} RECORDING_STATE - 'recordingState'\n * @property {String} LOCAL_MEDIA_MUTED - 'localMediaMuted'\n * @property {String} MEDIA_ACCESS_ERROR - 'mediaAccessError'\n * @property {String} GET_CONNECTION_STATUS_STATE_CHANGE - 'getConnectionStatusStateChange'\n * @property {String} READY_STATE_CHANGE - 'readyStateChange'\n * @property {String} ROOM_LOCK - 'roomLock'\n * @property {String} ICE_CONNECTION_STATE - 'iceConnectionState'\n * @property {String} BYE - 'bye'\n * @property {String} RTMP_STATE - 'rtmpState'\n * @property {String} STORED_MESSAGES - 'storedMessages'\n * @property {String} ENCRYPT_SECRETS_UPDATED - 'encryptSecretsUpdated'\n * @memberOf SkylinkConstants\n * @constant\n * @readonly\n * @since 2.0\n */\nexport const EVENTS = SkylinkEventsConstants;\n","const MESSAGES = {\n  INIT: {\n    ERRORS: {\n      NO_ADAPTER: 'AdapterJS dependency is not loaded or incorrect AdapterJS dependency is used',\n      NO_SOCKET_IO: 'Socket.io not loaded - Please load socket.io',\n      NO_FETCH_SUPPORT: 'Fetch API is not supported in your browser. Please make sure you are using a modern browser: https://caniuse.com/#search=fetch',\n      NO_APP_KEY: 'Please provide an App Key - Get one at console.temasys.io!',\n      AUTH_CORS: 'Promise rejected due to CORS forbidden request - Please visit: http://support.temasys.com.sg/support/solutions/articles/12000006761-i-get-a-403-forbidden-access-is-denied-when-i-load-the-application-why-',\n      AUTH_GENERAL: 'Promise rejected due to network issue',\n      SOCKET_CREATE_FAILED: 'Failed creating socket connection object ->',\n      SOCKET_ERROR_ABORT: 'Reconnection aborted as the connection timed out or there no more available ports, transports and final attempts left',\n    },\n    INFO: {\n      API_SUCCESS: 'Promise resolved: APP Authenticated Successfully!',\n    },\n  },\n  JOIN_ROOM: {\n    ERRORS: {\n      CODEC_SUPPORT: 'No audio/video codecs available to start connection',\n    },\n  },\n  ROOM: {\n    ERRORS: {\n      STOP: {\n        SCREEN_SHARE: 'Error stopping screenshare',\n      },\n      NOT_IN_ROOM: 'User is not in room',\n      NO_PEERS: 'No peers in room',\n    },\n    LEAVE_ROOM: {\n      ERROR: 'Leave room error -->',\n      NO_PEERS: 'No peers in room',\n      DROPPING_HANGUP: 'Dropping hang-up from remote peer',\n      LEAVE_ALL_ROOMS: {\n        SUCCESS: 'Successfully left all rooms',\n        ERROR: 'Leave all rooms error -->',\n      },\n      PEER_LEFT: {\n        START: 'Initiating peer left process',\n        SUCCESS: 'Successfully completed peer left process',\n        ERROR: 'Failed peer left process',\n      },\n      SENDING_BYE: 'Sending bye message to all peers',\n      DISCONNECT_SOCKET: {\n        SUCCESS: 'Successfully disconnected socket',\n      },\n      REMOVE_STATE: {\n        SUCCESS: 'Successfully removed room state',\n      },\n    },\n  },\n  ROOM_STATE: {\n    NOT_FOUND: 'Could not retrieve room state for room name/key',\n    LEFT: 'Peer left room',\n    NO_ROOM_NAME: 'No room name specified',\n  },\n  PEER_INFORMATIONS: {\n    NO_PEER_INFO: 'Not able to retrieve Peer Information for peerId:',\n    UPDATE_USER_DATA: 'Peer updated userData: ',\n    OUTDATED_MSG: 'Dropping outdated status ->',\n    USER_DATA_NOT_JSON: 'UserData is not JSON',\n  },\n  PEER_CONNECTION: {\n    NO_PEER_CONNECTION: 'No Peer Connection detected',\n    ERRORS: {\n      REMOVE_TRACK: 'Error removing track from peer connection',\n      REPLACE_TRACK: 'Error replacing track in peer connection',\n      REFRESH: 'Error refreshing peer connection',\n    },\n    end_of_candidates: 'Signaling of end-of-candidates remote ICE gathering',\n    end_of_candidate_failure: 'Failed signaling end-of-candidates ->',\n    not_initialised: 'Peer connection is not initialised',\n    getstats_api_not_available: 'getStats() API is not available',\n    connection_status_no_pc: 'There is currently no peer connections to retrieve connection status',\n    ice_connection_state: 'Ice connection state changed ->',\n    peer_connection_state: 'Peer connection state changed ->',\n    ice_gathering_state: 'Ice gathering state changed ->',\n    refresh_start: 'START: Refreshing peer connections',\n    refresh_failed: 'FAILED: Refreshing peer connections',\n    refresh_completed: 'All peer connections refreshed with resolve or errors',\n    refresh_peer_failed: 'Peer connection failed to refresh: ',\n    refresh_peer_success: 'Peer connection refreshed successfully: ',\n    refresh_no_peer_connection: 'There is currently no peer connections to restart',\n    refresh_peerId_no_match: 'PeerId does not match existing peer connections',\n    refresh_no_edge_support: 'Edge browser currently does not support renegotiation',\n    refresh_not_supported: 'Failed restarting with other agents connecting from other SDKs as re-negotiation is not supported by other SDKs',\n    peerId_does_not_exist: 'Peer Id does not exist ->',\n  },\n  PEER_PRIVILEGED: {\n    not_privileged: 'Please upgrade your key to privileged to use this function',\n    no_appkey: 'App key is not defined - Please authenticate again',\n    getPeerListFromServer: 'Enquired server for peers within the App space',\n  },\n  ICE_CANDIDATE: {\n    CANDIDATE_HANDLER: {\n      DROPPING_CANDIDATE: 'Dropping ICE candidate',\n      INVALID_CANDIDATE: 'Received invalid ICE candidate message ->',\n      VALID_CANDIDATE: 'Received ICE candidate ->',\n      FILTERED_CANDIDATE: 'Dropping received ICE candidate as it matches ICE candidate filtering flag ->',\n      FILTERING_FLAG_NOT_HONOURED: 'Not dropping received ICE candidate as TURN connections are enforced as MCU is present (and act as a TURN itself) so filtering of ICE candidate flags are not honoured ->',\n      CANDIDATE_ADDED: 'Added ICE candidate successfully',\n      ADDING_CANDIDATE: 'Adding ICE Candidate',\n      FAILED_ADDING_CANDIDATE: 'Failed adding ICE candidate ->',\n      ADD_BUFFERED_CANDIDATE: 'Adding buffered ICE candidate',\n      ADD_CANDIDATE_TO_BUFFER: 'Adding ICE candidate to buffer',\n      END_OF_CANDIDATES_SUCCESS: 'Signaling of end-of-candidates remote ICE gathering',\n      END_OF_CANDIDATES_FAILURE: 'Failed signaling of end-of-candidates remote ICE gathering',\n      ICE_GATHERING_STARTED: 'ICE gathering has started',\n      ICE_GATHERING_COMPLETED: 'ICE gathering has completed',\n      CANDIDATE_GENERATED: 'Generated ICE candidate ->',\n      DROP_EOC: 'Dropping of sending ICE candidate end-of-candidates signal or unused ICE candidates ->',\n      ICE_TRICKLE_DISABLED: 'Dropping of sending ICE candidate as trickle ICE is disabled ->',\n      SENDING_CANDIDATE: 'Sending ICE candidate ->',\n      NO_SDP: 'Not sending any session description after ICE gathering completed as it is not present',\n    },\n  },\n  SESSION_DESCRIPTION: {\n    parsing_media_ssrc: 'Parsing session description media SSRCs ->',\n  },\n  DATA_CHANNEL: {\n    reviving_dataChannel: 'Reviving Datachannel connection',\n    refresh_error: 'Not a valid Datachannel connection',\n    CLOSING: 'Closing DataChannel',\n    closed: 'Datachannel has closed',\n    onclose_error: 'Error in data-channel onclose callback',\n    NO_REMOTE_DATA_CHANNEL: 'Remote peer does not have data channel',\n    ERRORS: {\n      FAILED_CLOSING: 'Failed closing DataChannels --> ',\n      NO_SESSIONS: 'Peer Connection does not have DataChannel sessions',\n    },\n  },\n  NEGOTIATION_PROGRESS: {\n    SET_LOCAL_DESCRIPTION: 'Successfully set local description -->',\n    SET_REMOTE_DESCRIPTION: 'Successfully set remote description -->',\n    APPLYING_BUFFERED_REMOTE_OFFER: 'Applying buffered remote offer',\n    ERRORS: {\n      FAILED_SET_LOCAL_DESCRIPTION: 'Failed setting local description -->',\n      FAILED_SET_REMOTE_DESCRIPTION: 'Failed setting remote description -->',\n      FAILED_SET_REMOTE_ANSWER: 'Peer failed to set remote answer.',\n      FAILED_RENEGOTIATION: 'Failed renegotiation after answerAck',\n      NOT_STABLE: 'Dropping of message as signaling state is not stable',\n      PROCESSING_EXISTING_SDP: 'Dropping message as there is another sessionDescription being processed -->',\n      OFFER_TIEBREAKER: 'Dropping the received offer: self weight is greater than incoming offer weight -->',\n      NO_LOCAL_BUFFERED_OFFER: 'FATAL: No buffered local offer found - Unable to setLocalDescription',\n      ADDING_REMOTE_OFFER_TO_BUFFER: 'Adding remote offer received to buffer as current negotiation has not completed',\n    },\n  },\n  SIGNALING: {\n    MESSAGE_ADDED_TO_BUFFER: 'Message buffered as enter message has not been sent',\n    ENTER_LISTENER: 'Enter listener initialized',\n    BUFFERED_MESSAGES_SENT: 'Buffered messages sent',\n    BUFFERED_MESSAGES_DROPPED: 'Buffered messages dropped - no mid',\n    OUTDATED_MSG: 'Dropping outdated status ->',\n    DROPPING_MUTE_EVENT: 'Dropping mute audio / video event message as it is processed by mediaInfoEvent',\n    BUFFER_NOT_NEEDED: 'Enter message sent. Messages do not need to be buffered',\n    ABORTING_OFFER: 'Aborting offer as current negotiation has not completed',\n  },\n  MESSAGING: {\n    PRIVATE_MESSAGE: 'Sending private message to Peer',\n    BROADCAST_MESSAGE: 'Broadcasting message to Peers',\n    RECEIVED_MESSAGE: 'Received message from Peer',\n    PERSISTENCE: {\n      SEND_MESSAGE: 'Sending persisted message',\n      NOT_PERSISTED: 'Message will not be persisted as persistent flag is set to false',\n      STORED_MESSAGES: 'Received stored messages for room',\n      IS_PERSISTENT_CONFIG: 'Persistent message flag is set to',\n      ERRORS: {\n        FAILED_SETTING_PERSISTENCE: 'Failed setting persistent message flag',\n        INVALID_TYPE: 'Persistent message flag must be of type boolean',\n        PRIVATE_MESSAGE: 'Cannot persist private messages',\n        PERSISTENT_MESSAGE_FEATURE_NOT_ENABLED: 'Persistent Message feature is not enabled. Enable'\n          + ' this feature on the key under \\'Advanced Settings\\' in the Temasys Console',\n      },\n    },\n    ENCRYPTION: {\n      SEND_MESSAGE: 'Sending encrypted message',\n      DELETE_ALL: 'Deleting all stored secrets',\n      ERRORS: {\n        FAILED_DECRYPTING_MESSAGE: 'Failed decrypting message',\n        ENCRYPT_SECRET: 'Incorrect secret provided',\n        INVALID_SECRETS: 'No or invalid secret and secret id provided',\n        SET_SELECTED_SECRET: 'Failed setting selected secret',\n        DELETE_ENCRYPT_SECRETS: 'Failed deleting secret',\n        SET_ENCRYPT_SECRET: 'Failed setting secret',\n        SECRET_ID_NOT_FOUND: 'Secret id not found',\n        NO_SECRET_OR_SECRET_ID: 'Secret and / or secret id not provided',\n        INVALID_TYPE: 'Secret and secret id must be of type string and not empty',\n        SECRET_ID_NOT_UNIQUE: 'Secret id provided is not unique',\n        SECRET_ID_NOT_SELECTED: 'Secret id not selected',\n        SECRET_ID_NOT_PROVIDED: 'Secret id not provided',\n        SECRETS_NOT_PROVIDED: 'Secrets not provided',\n      },\n    },\n    ERRORS: {\n      DROPPING_MESSAGE: 'Dropping message',\n      FAILED_SENDING_MESSAGE: 'Failed to send user message',\n    },\n  },\n  MEDIA_INFO: {\n    UPDATE_SUCCESS: 'Successfully updated media info',\n    ERRORS: {\n      NO_ASSOCIATED_STREAM_ID: 'There is no streamId associated with the mediaId and transceiverMid pair',\n      FAILED_PROCESSING_MEDIA_INFO_EVENT: 'Failed to process mediaInfoEvent message',\n      FAILED_UPDATING: 'Failed to update media info',\n      FAILED_PROCESSING_PEER_MEDIA: 'Failed to process media info',\n      FAILED_UPDATING_TRANSCEIVER_MID: 'Failed updating media info transceiverMid after setLocalDescription',\n      FAILED_SETTING_PEER_MEDIA_INFO: 'Failed setting peer media at offer / answer',\n    },\n    WARN: {\n      READ_ONLY_VALUE: 'Attempting to change media info read only value: ',\n      INVALID_MEDIA_TYPE: 'Invalid media info media type: ',\n    },\n    VIDEO_STATE_CHANGE: 'Peers\\'s video state changed to ->',\n    AUDIO_STATE_CHANGE: 'Peers\\'s audio state changed to ->',\n    VIDEO_SCREEN_STATE_CHANGE: 'Peers\\'s video screen state changed to ->',\n  },\n  MEDIA_STREAM: {\n    STOP_SETTINGS: 'Stopped streams with settings:',\n    STOP_SUCCESS: 'Successfully stopped and removed stream from state',\n    REMOTE_TRACK_REMOVED: 'Remote MediaStreamTrack removed',\n    START_FALLBACK: 'Fall back to retrieve audio only stream',\n    NO_OPTIONS: 'No user media options provided',\n    DEFAULT_OPTIONS: 'Using default options',\n    FALLBACK_SUCCESS: 'Successfully retrieved audio fallback stream',\n    START_SCREEN_SUCCESS: 'Successfully retrieved screen share stream',\n    STOP_SCREEN_SUCCESS: 'Successfully stopped screen share stream',\n    UPDATE_MUTED_SETTINGS: 'Updated stream muted setting',\n    UPDATE_MEDIA_STATUS: 'Updated stream media status',\n    AUDIO_MUTED: 'Peers\\'s audio muted: ',\n    VIDEO_MUTED: 'Peers\\'s video muted: ',\n    ERRORS: {\n      STOP_SCREEN: 'Error stopping screen share stream',\n      START_SCREEN: 'Error starting screen share stream',\n      STOP_ADDED_STREAM: 'Error stopping added stream',\n      STOP_REPLACED_STREAM: 'Error stopping replaced stream',\n      STOP_USER_MEDIA: 'Error stopping user media',\n      STOP_AUDIO_TRACK: 'Error stopping audio tracks in stream',\n      STOP_VIDEO_TRACK: 'Error stopping video tracks in stream',\n      STOP_MEDIA_TRACK: 'Error stopping MediaTrack',\n      STOP_SCREEN_TRACK: 'Error stopping screen track in stream',\n      DROPPING_ONREMOVETRACK: 'Dropping onremovetrack',\n      NO_STREAM: 'No stream to process',\n      INVALID_STREAM_ID: 'No stream detected with stream id',\n      NO_USER_MEDIA_STREAMS: 'No user media streams detected',\n      INVALID_STREAM_ID_TYPE: 'Stream id is not a string',\n      NO_STREAM_ID: 'No stream id provided',\n      PEER_SCREEN_ACTIVE: 'Peer has existing screen share',\n      REPLACE_SCREEN: 'Error replacing user media stream with screenshare stream',\n      FALLBACK: 'Error retrieving fallback audio stream',\n      INVALID_GUM_OPTIONS: 'Invalid user media options',\n      GET_USER_MEDIA: 'Error retrieving stream from \\'getUserMedia\\' method',\n      INVALID_MUTE_OPTIONS: 'Invalid muteStreams options provided',\n      NO_STREAMS_MUTED: 'No streams to mute',\n      SEND_STREAM: 'Error sending stream',\n      INVALID_MEDIA_STREAM_ARRAY: 'Array is not of type MediaStream',\n      ACTIVE_STREAMS: 'There are currently active streams being sent to remote peers. Please stop streams.',\n    },\n  },\n  STATS_MODULE: {\n    NOT_INITIATED: 'Stats Module is not initiated',\n    STATS_DISCARDED: 'Stats report discarded as peer has left the room',\n    ERRORS: {\n      RETRIEVE_STATS_FAILED: 'Failed retrieving stats',\n      POST_FAILED: 'Failed posting to stats api',\n      PARSE_FAILED: 'Failed parsing stats report',\n      STATS_IS_NULL: 'Stats object is null',\n      INVALID_TRACK_KIND: 'Media kind is not audio or video',\n    },\n    HANDLE_ICE_GATHERING_STATS: {\n      PROCESS_FAILED: 'process_failed',\n      PROCESS_SUCCESS: 'process_success',\n      PROCESSING: 'processing',\n      DROPPED: 'dropped',\n      BUFFERED: 'buffered',\n    },\n    HANDLE_NEGOTIATION_STATS: {\n      OFFER: {\n        create: 'create_offer',\n        create_error: 'error_create_offer',\n        set: 'set_offer',\n        set_error: 'error_set_offer',\n        offer: 'offer',\n        dropped: 'dropped_offer',\n      },\n      ANSWER: {\n        create: 'create_answer',\n        create_error: 'error_create_answer',\n        set: 'set_answer',\n        set_error: 'error_set_ANSWER',\n        answer: 'answer',\n        dropped: 'dropped_answer',\n      },\n    },\n    HANDLE_DATA_CHANNEL_STATS: {\n      open: 'open',\n      closed: 'closed',\n      reconnecting: 'reconnecting',\n    },\n    HANDLE_CONNECTION_STATS: {},\n    HANDLE_BANDWIDTH_STATS: {\n      RETRIEVE_FAILED: 'Failed posting bandwidth stats: ',\n      NO_STATE: 'No room state',\n    },\n    HANDLE_ICE_CONNECTION_STATS: {\n      RETRIEVE_FAILED: 'Failed retrieving stats: ',\n      SEND_FAILED: 'Failed sending ice connection stats: ',\n    },\n    HANDLE_RECORDING_STATS: {\n      START: 'start',\n      STOP: 'stop',\n      REQUEST_START: 'request-start',\n      REQUEST_STOP: 'request-stop',\n      ERROR_NO_MCU_START: 'error-no-mcu-start',\n      ERROR_NO_MCU_STOP: 'error-no-mcu-stop',\n      ERROR_START_ACTIVE: 'error-start-when-active',\n      ERROR_STOP_ACTIVE: 'error-stop-when-active',\n      ERROR_MIN_STOP: 'error-min-stop',\n      MCU_RECORDING_ERROR: 'mcu-recording-error',\n    },\n  },\n  RECORDING: {\n    START_SUCCESS: 'Started recording',\n    STOP_SUCCESS: 'Stopped recording',\n    START_FAILED: 'Failed to start recording',\n    STOP_FAILED: 'Failed to stop recording',\n    MIN_RECORDING_TIME_REACHED: '4 seconds has been recorded - Recording can be stopped now',\n    ERRORS: {\n      MCU_NOT_CONNECTED: 'MCU is not connected',\n      EXISTING_RECORDING_IN_PROGRESS: 'There is an existing recording in-progress',\n      NO_RECORDING_IN_PROGRESS: 'There is no existing recording in-progress',\n      MIN_RECORDING_TIME: '4 seconds has not been recorded yet',\n      STOP_ABRUPT: 'Recording stopped abruptly before 4 seconds',\n      SESSION_EMPTY: 'Received request of \"off\" but the session is empty',\n      MCU_RECORDING_ERROR: 'Recording error received from MCU',\n    },\n  },\n  RTMP: {\n    start_no_mcu: 'Unable to start RTMP session as MCU is not connected',\n    stop_no_mcu: 'Unable to stop RTMP as MCU is not connected',\n    start_no_stream_id: 'Unable to start RTMP Session stream id is missing',\n    start_no_endpoint: 'Unable to start RTMP Session as Endpoint is missing',\n    starting_rtmp: 'Starting RTMP Session',\n    stopping_rtmp: 'Stopping RTMP Session',\n    message_received_from_sig: 'Received RTMP Session message ->',\n    stop_session_empty: 'Received request of \"off\" but the session is empty',\n    stopped_success: 'Stopped RTMP Session',\n    started_success: 'Started RTMP Session',\n    error_session_empty: 'Received error but the session is empty ->',\n    error_session: 'RTMP session failure ->',\n    error_Session_abrupt: 'Stopped RTMP session abruptly',\n  },\n  PERSISTENT_MESSAGE: {\n    ERRORS: {\n      NO_DEPENDENCY: 'CryptoJS is not available',\n    },\n  },\n  UTILS: {\n    INVALID_BROWSER_AGENT: 'Invalid browser agent',\n  },\n  LOGGER: {\n    EVENT_DISPATCHED: 'Event dispatched',\n    EVENT_REGISTERED: 'Event successfully registered',\n    EVENT_UNREGISTERED: 'Event successfully unregistered',\n    EVENT_DISPATCH_ERROR: 'Error dispatching event',\n    EVENT_REGISTER_ERROR: 'Error registering event',\n    EVENT_UNREGISTER_ERROR: 'Error unregistering event',\n    LOGS_NOT_STORED: 'Store logs feature is not enabled. Enable it via SkylinkLogger.setLevel(logLevel, storeLogs)',\n    LOGS_CLEARED: 'Stored logs cleared',\n    INVALID_CB: 'Dropping listener as it is not a function',\n  },\n  BROWSER_AGENT: {\n    REACT_NATIVE: {\n      ERRORS: {\n        DROPPING_ONREMOVETRACK: 'Dropping onremovetrack as trackInfo is malformed',\n      },\n    },\n  },\n};\n\nexport default MESSAGES;\n","import Skylink from '../../index';\nimport { BUNDLE_POLICY, RTCP_MUX_POLICY, PEER_CERTIFICATE } from '../../constants';\n\n/**\n * @param {GetUserMediaOptions} options\n * @param {SkylinkState} roomState\n * @return {SkylinkState}\n * @memberOf MediaStreamHelpers\n * @private\n */\nconst parseMediaOptions = (options, roomState) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const mediaOptions = options || {};\n\n  state.userData = mediaOptions.userData || state.userData || '';\n  state.streamsBandwidthSettings = {\n    googleX: {},\n    bAS: {},\n  };\n  state.publishOnly = false;\n  state.sdpSettings = {\n    connection: {\n      audio: true,\n      video: true,\n      data: true,\n    },\n    direction: {\n      audio: { send: true, receive: true },\n      video: { send: true, receive: true },\n    },\n  };\n  state.voiceActivityDetection = typeof mediaOptions.voiceActivityDetection === 'boolean' ? mediaOptions.voiceActivityDetection : true;\n  state.peerConnectionConfig = {\n    bundlePolicy: BUNDLE_POLICY.BALANCED,\n    rtcpMuxPolicy: RTCP_MUX_POLICY.REQUIRE,\n    iceCandidatePoolSize: 0,\n    certificate: PEER_CERTIFICATE.AUTO,\n    disableBundle: false,\n  };\n  state.bandwidthAdjuster = null;\n\n  if (mediaOptions.bandwidth) {\n    if (typeof mediaOptions.bandwidth.audio === 'number') {\n      state.streamsBandwidthSettings.bAS.audio = mediaOptions.bandwidth.audio;\n    }\n\n    if (typeof mediaOptions.bandwidth.video === 'number') {\n      state.streamsBandwidthSettings.bAS.video = mediaOptions.bandwidth.video;\n    }\n\n    if (typeof mediaOptions.bandwidth.data === 'number') {\n      state.streamsBandwidthSettings.bAS.data = mediaOptions.bandwidth.data;\n    }\n  }\n\n  if (mediaOptions.googleXBandwidth) {\n    if (typeof mediaOptions.googleXBandwidth.min === 'number') {\n      state.streamsBandwidthSettings.googleX.min = mediaOptions.googleXBandwidth.min;\n    }\n\n    if (typeof mediaOptions.googleXBandwidth.max === 'number') {\n      state.streamsBandwidthSettings.googleX.max = mediaOptions.googleXBandwidth.max;\n    }\n  }\n\n  if (mediaOptions.sdpSettings) {\n    if (mediaOptions.sdpSettings.direction) {\n      if (mediaOptions.sdpSettings.direction.audio) {\n        state.sdpSettings.direction.audio.receive = typeof mediaOptions.sdpSettings.direction.audio.receive === 'boolean' ? mediaOptions.sdpSettings.direction.audio.receive : true;\n        state.sdpSettings.direction.audio.send = typeof mediaOptions.sdpSettings.direction.audio.send === 'boolean' ? mediaOptions.sdpSettings.direction.audio.send : true;\n      }\n\n      if (mediaOptions.sdpSettings.direction.video) {\n        state.sdpSettings.direction.video.receive = typeof mediaOptions.sdpSettings.direction.video.receive === 'boolean' ? mediaOptions.sdpSettings.direction.video.receive : true;\n        state.sdpSettings.direction.video.send = typeof mediaOptions.sdpSettings.direction.video.send === 'boolean' ? mediaOptions.sdpSettings.direction.video.send : true;\n      }\n    }\n    if (mediaOptions.sdpSettings.connection) {\n      state.sdpSettings.connection.audio = typeof mediaOptions.sdpSettings.connection.audio === 'boolean' ? mediaOptions.sdpSettings.connection.audio : true;\n      state.sdpSettings.connection.video = typeof mediaOptions.sdpSettings.connection.video === 'boolean' ? mediaOptions.sdpSettings.connection.video : true;\n      state.sdpSettings.connection.data = typeof mediaOptions.sdpSettings.connection.data === 'boolean' ? mediaOptions.sdpSettings.connection.data : true;\n    }\n  }\n\n  if (mediaOptions.publishOnly) {\n    state.sdpSettings.direction.audio.send = true;\n    state.sdpSettings.direction.audio.receive = false;\n    state.sdpSettings.direction.video.send = true;\n    state.sdpSettings.direction.video.receive = false;\n    state.publishOnly = true;\n  }\n\n  /* eslint-disable no-restricted-syntax */\n  /* eslint-disable no-prototype-builtins */\n  if (mediaOptions.peerConnection && typeof mediaOptions.peerConnection === 'object') {\n    if (typeof mediaOptions.peerConnection.bundlePolicy === 'string') {\n      for (const bpProp in BUNDLE_POLICY) {\n        if (BUNDLE_POLICY.hasOwnProperty(bpProp) && BUNDLE_POLICY[bpProp] === mediaOptions.peerConnection.bundlePolicy) {\n          state.peerConnectionConfig.bundlePolicy = mediaOptions.peerConnection.bundlePolicy;\n        }\n      }\n    }\n    if (typeof mediaOptions.peerConnection.rtcpMuxPolicy === 'string') {\n      for (const rmpProp in RTCP_MUX_POLICY) {\n        if (RTCP_MUX_POLICY.hasOwnProperty(rmpProp) && RTCP_MUX_POLICY[rmpProp] === mediaOptions.peerConnection.rtcpMuxPolicy) {\n          state.peerConnectionConfig.rtcpMuxPolicy = mediaOptions.peerConnection.rtcpMuxPolicy;\n        }\n      }\n    }\n    if (typeof mediaOptions.peerConnection.iceCandidatePoolSize === 'number' && mediaOptions.peerConnection.iceCandidatePoolSize > 0) {\n      state.peerConnectionConfig.iceCandidatePoolSize = mediaOptions.peerConnection.iceCandidatePoolSize;\n    }\n    if (typeof mediaOptions.peerConnection.certificate === 'string') {\n      for (const pcProp in PEER_CERTIFICATE) {\n        if (PEER_CERTIFICATE.hasOwnProperty(pcProp) && PEER_CERTIFICATE[pcProp] === mediaOptions.peerConnection.certificate) {\n          state.peerConnectionConfig.certificate = mediaOptions.peerConnection.certificate;\n        }\n      }\n    }\n    state.peerConnectionConfig.disableBundle = mediaOptions.peerConnection.disableBundle === true;\n  }\n\n  if (mediaOptions.autoBandwidthAdjustment) {\n    state.bandwidthAdjuster = {\n      interval: 10,\n      limitAtPercentage: 100,\n      useUploadBwOnly: false,\n    };\n\n    if (typeof mediaOptions.autoBandwidthAdjustment === 'object') {\n      if (typeof mediaOptions.autoBandwidthAdjustment.interval === 'number' && mediaOptions.autoBandwidthAdjustment.interval >= 10) {\n        state.bandwidthAdjuster.interval = mediaOptions.autoBandwidthAdjustment.interval;\n      }\n      if (typeof mediaOptions.autoBandwidthAdjustment.limitAtPercentage === 'number' && (mediaOptions.autoBandwidthAdjustment.limitAtPercentage >= 0 && mediaOptions.autoBandwidthAdjustment.limitAtPercentage <= 100)) {\n        state.bandwidthAdjuster.limitAtPercentage = mediaOptions.autoBandwidthAdjustment.limitAtPercentage;\n      }\n      if (typeof mediaOptions.autoBandwidthAdjustment.useUploadBwOnly === 'boolean') {\n        state.bandwidthAdjuster.useUploadBwOnly = mediaOptions.autoBandwidthAdjustment.useUploadBwOnly;\n      }\n    }\n  }\n  return state;\n};\n\nexport default parseMediaOptions;\n","import Skylink from '../../index';\n\n// requires the mid to be set after setOffer both local or remote\nconst retrieveTransceiverMid = (room, track) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = roomState;\n  const RTCPeerConnections = Object.values(peerConnections);\n  let transceiverMid = null;\n\n  for (let p = 0; p < RTCPeerConnections.length; p += 1) {\n    const transceivers = RTCPeerConnections[p].getTransceivers();\n    for (let t = 0; t < transceivers.length; t += 1) {\n      if (transceivers[t].sender.track && transceivers[t].sender.track.id === track.id) {\n        transceiverMid = transceivers[t].mid;\n        break;\n      }\n    }\n  }\n  return transceiverMid;\n};\n\nexport default retrieveTransceiverMid;\n","import { MEDIA_STATE, TRACK_READY_STATE } from '../../constants';\n\nconst retrieveMediaState = (track) => {\n  if (track.readyState === TRACK_READY_STATE.ENDED) {\n    return MEDIA_STATE.UNAVAILABLE;\n  } if (track.muted) {\n    return MEDIA_STATE.MUTED;\n  }\n  return MEDIA_STATE.ACTIVE;\n};\n\nexport default retrieveMediaState;\n","import { TRACK_KIND } from '../../constants';\n\nconst retrieveMediaId = (trackKind, streamId) => {\n  const prefix = trackKind === TRACK_KIND.AUDIO ? 'AUDIO' : 'VIDEO';\n  return `${prefix}_${streamId}`;\n};\n\nexport default retrieveMediaId;\n","import helpers from './index';\n\nconst buildPeerMediaInfo = (room, mid, track, streamId, mediaType) => ({\n  publisherId: mid,\n  mediaId: helpers.retrieveMediaId(track.kind, streamId),\n  mediaType,\n  mediaState: helpers.retrieveMediaState(track),\n  transceiverMid: helpers.retrieveTransceiverMid(room, track),\n  streamId,\n  trackId: track.id,\n  mediaMetaData: '',\n  simulcast: '',\n});\n\nexport default buildPeerMediaInfo;\n","import Skylink from '../../index';\n\nconst isMatchedTrack = (streamTrack, track) => streamTrack.id === track.id;\n\nconst retrieveStreamIdOfTrack = (room, track) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { streams } = state;\n  const streamObjs = Object.values(streams.userMedia);\n  let streamId = null;\n\n  for (let i = 0; i < streamObjs.length; i += 1) {\n    const tracks = streamObjs[i].stream.getTracks();\n\n    for (let j = 0; j < tracks.length; j += 1) {\n      if (isMatchedTrack(tracks[j], track)) {\n        streamId = streamObjs[i].id;\n        break;\n      }\n    }\n  }\n\n  return streamId;\n};\n\nexport default retrieveStreamIdOfTrack;\n","import Skylink from '../../index';\n\nconst retrieveTracks = (room) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { streams } = state;\n  const tracks = [];\n\n  const fStreams = Object.values(streams.userMedia).map(streamObj => streamObj.stream);\n  fStreams.forEach((stream) => {\n    stream.getTracks().forEach((track) => {\n      tracks.push(track);\n    });\n  });\n\n  return tracks;\n};\n\nexport default retrieveTracks;\n","import Skylink from '../../index';\nimport helpers from './index';\nimport logger from '../../logger/index';\nimport { TAGS } from '../../constants';\nimport MESSAGES from '../../messages';\n\nconst doUpdate = (room, peerId, dispatchEvent, mediaId, key = false, value = false, mediaInfo = false) => {\n  const updatedState = Skylink.getSkylinkState(room.id);\n  // Check for key + value || mediaInfo but not both\n  if (!mediaInfo && key && value) {\n    updatedState.peerMedias[peerId][mediaId][key] = value;\n    logger.log.INFO([peerId, TAGS.PEER_MEDIA, null, `${MESSAGES.MEDIA_INFO.UPDATE_SUCCESS} -- ${mediaId} - ${key}: ${value}`]);\n  } else if (mediaInfo && !key && !value) {\n    updatedState.peerMedias[peerId] = updatedState.peerMedias[peerId] || {};\n    updatedState.peerMedias[peerId][mediaId] = mediaInfo;\n  } else {\n    // log if !key && !value && !mediaInfo - nothing to update or if all present which to update?\n  }\n\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nconst dispatchMediaInfoMsg = (room, peerId, dispatchEvent, mediaId) => {\n  const updatedState = Skylink.getSkylinkState(room.id);\n  if (updatedState.user.sid === peerId && dispatchEvent) {\n    helpers.sendMediaInfoMsg(room, updatedState.peerMedias[peerId][mediaId]);\n  }\n};\n\n// dispatch event when:\n// 1) not from offer and answer\n// 2) self mediaInfo is updated\n// 3) self a new stream (with new mediaInfo obj) will replace an existing stream - e.g. screen share, send stream\n\nconst updatePeerMediaInfo = (room, peerId, dispatchEvent, mediaId, key = false, value = false, mediaInfo = false) => {\n  try {\n    doUpdate(room, peerId, dispatchEvent, mediaId, key, value, mediaInfo);\n    dispatchMediaInfoMsg(room, peerId, dispatchEvent, mediaId);\n  } catch (err) {\n    const msg = mediaInfo ? JSON.stringify(mediaInfo) : `${mediaId} - ${key}: ${value}`;\n    logger.log.ERROR([peerId, TAGS.PEER_MEDIA, null, `${MESSAGES.MEDIA_INFO.ERRORS.FAILED_UPDATING} -- ${msg}`], err);\n  }\n};\n\nexport default updatePeerMediaInfo;\n","import {\n  API_VERSION, SDK_NAME, SDK_VERSION, SIGNALING_VERSION, SOCKET_TYPE,\n} from '../constants';\n\nconst SOCKET_DEFAULTS = {\n  RECONNECTION_ATTEMPTS: {\n    WEBSOCKET: 5,\n    POLLING: 4,\n  },\n  RECONNECTION_DELAY_MAX: 5000,\n  RECONNECTION_DELAY: 1000,\n  RECONNECTION_FINAL_ATTEMPTS: 10,\n};\n\nconst SOCKET_CONFIG = options => ({\n  forceNew: true,\n  reconnection: true,\n  timeout: options.socketTimeout,\n  path: options.socketServerPath,\n  reconnectionAttempts: SOCKET_DEFAULTS.RECONNECTION_ATTEMPTS.WEBSOCKET,\n  reconnectionDelayMax: SOCKET_DEFAULTS.RECONNECTION_DELAY_MAX,\n  reconnectionDelay: SOCKET_DEFAULTS.RECONNECTION_DELAY,\n  transports: [SOCKET_TYPE.WEBSOCKET.toLowerCase()],\n  query: {\n    Skylink_SDK_type: SDK_NAME.WEB,\n    Skylink_SDK_version: SDK_VERSION,\n    Skylink_API_version: API_VERSION,\n    'X-Server-Select': SIGNALING_VERSION,\n  },\n  extraHeaders: {\n    Skylink_SDK_type: SDK_NAME.WEB,\n    Skylink_SDK_version: SDK_VERSION,\n    Skylink_API_version: API_VERSION,\n    'X-Server-Select': SIGNALING_VERSION,\n  },\n});\n\nexport default SOCKET_CONFIG;\nexport { SOCKET_DEFAULTS };\n","import SOCKET_CONFIG, { SOCKET_DEFAULTS } from './socketConfig';\n\nconst CONFIGS = {\n  SOCKET: SOCKET_CONFIG,\n};\n\nconst DEFAULTS = {\n  SOCKET: SOCKET_DEFAULTS,\n};\n\nconst retrieveConfig = (name, options) => CONFIGS[name](options);\n\nexport default retrieveConfig;\nexport { DEFAULTS };\n","/* eslint-disable prefer-destructuring */\nimport Skylink from '../../../index';\nimport { SOCKET_FALLBACK, SOCKET_TYPE } from '../../../constants';\nimport retrieveConfig, { DEFAULTS } from '../../../defaults/index';\nimport { isAString, isAObj } from '../../../utils/helpers';\n\nconst isFirstConnectionAttempt = config => !config.signalingServerPort;\n\nconst isLastPort = (ports, config) => ports.indexOf(config.signalingServerPort) === ports.length - 1;\n\nconst getSignalingServerUrl = (params) => {\n  const {\n    signalingServerProtocol,\n    signalingServer,\n    signalingServerPort,\n    socketServer,\n  } = params;\n\n  let url = '';\n\n  if (isAString(signalingServer)) {\n    url = `${signalingServerProtocol}//${signalingServer}`;\n  } else if (signalingServer && isAObj(signalingServer) && signalingServer.protocol) {\n    url = `${signalingServer.protocol}//${socketServer.url}:${signalingServerPort}?rand=${Date.now()}`;\n  } else {\n    url = `${signalingServerProtocol}//${signalingServer}:${signalingServerPort}?rand=${Date.now()}`;\n  }\n\n  return url;\n};\n\nconst createSocket = (params) => {\n  const skylinkState = Skylink.getSkylinkState(params.roomKey);\n  const initOptions = Skylink.getInitOptions();\n  const { config } = params;\n  const { socketServer, socketTimeout, socketServerPath } = initOptions;\n  const { socketPorts } = skylinkState;\n  const socketConfig = retrieveConfig('SOCKET', { socketTimeout, socketServerPath });\n\n  let ports = [];\n\n  if (socketServer && isAObj(socketServer) && Array.isArray(socketServer.ports) && socketServer.ports.length) {\n    ({ ports } = socketServer);\n  } else {\n    ports = socketPorts[config.signalingServerProtocol];\n  }\n\n  if (isFirstConnectionAttempt(config)) {\n    config.signalingServerPort = ports[0];\n    config.fallbackType = SOCKET_FALLBACK.NON_FALLBACK;\n  } else if (isLastPort(ports, config) || isAString(initOptions.socketServer)) {\n    // re-refresh to long-polling port\n    if (config.socketType === SOCKET_TYPE.WEBSOCKET) {\n      config.socketType = SOCKET_TYPE.POLLING;\n      config.signalingServerPort = ports[0];\n    } else {\n      config.socketSession.finalAttempts += 1;\n      config.signalingServerPort = ports[0];\n    }\n  // move to the next port\n  } else {\n    config.signalingServerPort = ports[ports.indexOf(config.signalingServerPort) + 1];\n  }\n\n  if (config.socketType === SOCKET_TYPE.POLLING) {\n    socketConfig.reconnectionDelayMax = DEFAULTS.SOCKET.RECONNECTION_DELAY_MAX;\n    socketConfig.reconnectionAttempts = DEFAULTS.SOCKET.RECONNECTION_ATTEMPTS.POLLING;\n    socketConfig.transports = [SOCKET_TYPE.XHR_POLLING, SOCKET_TYPE.JSONP_POLLING, SOCKET_TYPE.POLLING.toLowerCase()];\n  }\n\n  const url = getSignalingServerUrl({\n    signalingServerProtocol: config.signalingServerProtocol,\n    signalingServer: skylinkState.socketServer,\n    signalingServerPort: config.signalingServerPort,\n    socketServer,\n  });\n\n  config.socketServer = socketServer;\n  config.socketServerPath = socketServerPath;\n  skylinkState.socketSession = config;\n  Skylink.setSkylinkState(skylinkState, params.roomKey);\n\n  return window.io(url, socketConfig);\n};\n\nexport default createSocket;\n","import { SIG_MESSAGE_TYPE } from '../../../constants';\nimport logger from '../../../logger';\n\nconst processSignalingMessage = (messageHandler, message) => {\n  const { type } = message;\n  logger.log.INFO(['SIG SERVER', null, type, 'received']);\n  switch (type) {\n    case SIG_MESSAGE_TYPE.IN_ROOM: messageHandler.inRoomHandler(message); break;\n    case SIG_MESSAGE_TYPE.ENTER: messageHandler.enterRoomHandler(message); break;\n    case SIG_MESSAGE_TYPE.OFFER: messageHandler.offerHandler(message); break;\n    case SIG_MESSAGE_TYPE.WELCOME: messageHandler.welcomeHandler(message); break;\n    case SIG_MESSAGE_TYPE.ANSWER: messageHandler.answerHandler(message); break;\n    case SIG_MESSAGE_TYPE.ANSWER_ACK: messageHandler.answerAckHandler(message); break;\n    case SIG_MESSAGE_TYPE.CANDIDATE: messageHandler.candidateHandler(message); break;\n    case SIG_MESSAGE_TYPE.PEER_LIST: messageHandler.getPeerListHandler(message); break;\n    case SIG_MESSAGE_TYPE.INTRODUCE_ERROR: messageHandler.introduceError(message); break;\n    case SIG_MESSAGE_TYPE.BYE: messageHandler.byeHandler(message); break;\n    case SIG_MESSAGE_TYPE.STREAM: messageHandler.streamHandler(message); break;\n    case SIG_MESSAGE_TYPE.RECORDING: messageHandler.recordingHandler(message); break;\n    case SIG_MESSAGE_TYPE.REDIRECT: messageHandler.redirectHandler(message); break;\n    case SIG_MESSAGE_TYPE.RTMP: messageHandler.rtmpHandler(message); break;\n    case SIG_MESSAGE_TYPE.UPDATE_USER: messageHandler.setUserDataHandler(message); break;\n    case SIG_MESSAGE_TYPE.MEDIA_INFO_EVENT: messageHandler.mediaInfoEventHandler(message); break;\n    case SIG_MESSAGE_TYPE.MESSAGE: messageHandler.userMessageHandler(message, null); break;\n    case SIG_MESSAGE_TYPE.STORED_MESSAGES: messageHandler.storedMessagesHandler(message); break;\n    // Backward compatibility for 0.9.x\n    case SIG_MESSAGE_TYPE.MUTE_AUDIO_EVENT: messageHandler.muteAudioEventHandler(message); break;\n    case SIG_MESSAGE_TYPE.MUTE_VIDEO_EVENT: messageHandler.muteVideoEventHandler(message); break;\n    // Backward compatibility for public and private message protocol\n    case SIG_MESSAGE_TYPE.PUBLIC_MESSAGE: messageHandler.userMessageHandler(message, true); break;\n    case SIG_MESSAGE_TYPE.PRIVATE_MESSAGE: messageHandler.userMessageHandler(message, false); break;\n    default: break;\n  }\n};\n\nexport default processSignalingMessage;\n","import clone from 'clone';\nimport Skylink from '../../index';\nimport logger from '../../logger';\nimport messages from '../../messages';\nimport { DATA_CHANNEL_STATE, PEER_TYPE } from '../../constants';\nimport PeerData from '../index';\n\nconst isUser = (peerId, roomState) => {\n  const { user } = roomState;\n  return peerId === user.sid;\n};\n\n/**\n * @description Function that returns the User / Peer current session information.\n * @private\n * @param {String} peerId\n * @param {SkylinkRoom} room\n * @return {peerInfo}\n * @memberOf PeerDataHelpers\n */\nconst getPeerInfo = (peerId, room) => {\n  let peerInfo = null;\n  if (!peerId) {\n    return null;\n  }\n  const state = Skylink.getSkylinkState(room.id);\n\n  if (!state) {\n    Skylink.logNoRoomState(room.id);\n    return peerInfo;\n  }\n\n  if (isUser(peerId, state)) {\n    return PeerData.getCurrentSessionInfo(room);\n  }\n\n  peerInfo = clone(state.peerInformations[peerId]);\n\n  if (!peerInfo) {\n    logger.log.ERROR(`${messages.PEER_INFORMATIONS.NO_PEER_INFO} ${peerId}`);\n    return peerInfo;\n  }\n\n  // FIXME: would there ever be a case of !peerInfo.settings?\n  // if (!peerInfo.settings) {\n  //   peerInfo.settings = {};\n  // }\n\n  // if (!peerInfo.mediaStatus) {\n  //   peerInfo.mediaStatus = {};\n  // }\n\n  peerInfo.room = clone(room.roomName);\n\n  peerInfo.settings.data = !!(state.dataChannels[peerId] && state.dataChannels[peerId].main && state.dataChannels[peerId].main.channel && state.dataChannels[peerId].main.channel.readyState === DATA_CHANNEL_STATE.OPEN);\n  peerInfo.connected = state.peerConnStatus[peerId] && !!state.peerConnStatus[peerId].connected;\n  peerInfo.init = state.peerConnStatus[peerId] && !!state.peerConnStatus[peerId].init;\n\n  // peerInfo.settings.bandwidth = peerInfo.settings.bandwidth || {};\n  // peerInfo.settings.googleXBandwidth = peerInfo.settings.googleXBandwidth || {};\n\n  // if (!(typeof peerInfo.settings.video === 'boolean' || typeof peerInfo.settings.video === 'object')) {\n  //   // peerInfo.settings.video = false;\n  //   peerInfo.mediaStatus.audioMuted = true;\n  // }\n\n  // if (!(typeof peerInfo.settings.audio === 'boolean' || typeof peerInfo.settings.audio === 'object')) {\n  //   // peerInfo.settings.audio = false;\n  //   peerInfo.mediaStatus.audioMuted = true;\n  // }\n\n  // if (typeof peerInfo.mediaStatus.audioMuted !== 'boolean') {\n  //   peerInfo.mediaStatus.audioMuted = true;\n  // }\n\n  // if (typeof peerInfo.mediaStatus.videoMuted !== 'boolean') {\n  //   peerInfo.mediaStatus.videoMuted = true;\n  // }\n\n  // if (peerInfo.settings.maxBandwidth) {\n  //   peerInfo.settings.bandwidth = clone(peerInfo.settings.maxBandwidth);\n  //   delete peerInfo.settings.maxBandwidth;\n  // }\n\n  // if (peerInfo.settings.video && typeof peerInfo.settings.video === 'object' && peerInfo.settings.video.customSettings && typeof peerInfo.settings.video.customSettings === 'object') {\n  // // if (peerInfo.settings.video.customSettings && typeof peerInfo.settings.video.customSettings === 'object') {\n  //   if (peerInfo.settings.video.customSettings.frameRate) {\n  //     peerInfo.settings.video.frameRate = clone(peerInfo.settings.video.customSettings.frameRate);\n  //   }\n  //   if (peerInfo.settings.video.customSettings.facingMode) {\n  //     peerInfo.settings.video.facingMode = clone(peerInfo.settings.video.customSettings.facingMode);\n  //   }\n  //   if (peerInfo.settings.video.customSettings.width) {\n  //     peerInfo.settings.video.resolution = peerInfo.settings.video.resolution || {};\n  //     peerInfo.settings.video.resolution.width = clone(peerInfo.settings.video.customSettings.width);\n  //   }\n  //   if (peerInfo.settings.video.customSettings.height) {\n  //     peerInfo.settings.video.resolution = peerInfo.settings.video.resolution || {};\n  //     peerInfo.settings.video.resolution.height = clone(peerInfo.settings.video.customSettings.height);\n  //   }\n  // }\n\n  // if (peerInfo.settings.audio && typeof peerInfo.settings.audio === 'object') {\n  //   peerInfo.settings.audio.stereo = peerInfo.settings.audio.stereo === true;\n  // }\n\n  // TODO: check if receiveOnly and publishOnly is required\n  if (peerId === PEER_TYPE.MCU) {\n    peerInfo.config.receiveOnly = true;\n    peerInfo.config.publishOnly = false;\n  } else if (state.hasMCU) {\n    peerInfo.config.receiveOnly = false;\n    peerInfo.config.publishOnly = true;\n  }\n\n  // TODO: check if the sdp parsing is required\n  // parse sdp to update media settings and status\n  // if (!state.sdpSettings.direction.audio.receive) {\n  //   peerInfo.settings.audio = false;\n  //   peerInfo.mediaStatus.audioMuted = true;\n  // }\n  //\n  // if (!state.sdpSettings.direction.video.receive) {\n  //   peerInfo.settings.video = false;\n  //   peerInfo.mediaStatus.videoMuted = true;\n  // }\n  //\n  // if (!state.sdpSettings.connection.audio) {\n  //   peerInfo.settings.audio = false;\n  //   peerInfo.mediaStatus.audioMuted = true;\n  // }\n  //\n  // if (!state.sdpSettings.connection.video) {\n  //   peerInfo.settings.video = false;\n  //   peerInfo.mediaStatus.videoMuted = true;\n  // }\n\n  // Makes sense to be send direction since we are retrieving information if Peer is sending anything to us\n  // if (state.sdpSessions[peerId] && state.sdpSessions[peerId].remote && state.sdpSessions[peerId].remote.connection && typeof state.sdpSessions[peerId].remote.connection === 'object') {\n  //   if (!(state.sdpSessions[peerId].remote.connection.audio && state.sdpSessions[peerId].remote.connection.audio.indexOf('send') > -1)) {\n  //     peerInfo.settings.audio = false;\n  //     peerInfo.mediaStatus.audioMuted = true;\n  //   }\n  //   if (!(state.sdpSessions[peerId].remote.connection.video && state.sdpSessions[peerId].remote.connection.video.indexOf('send') > -1)) {\n  //     peerInfo.settings.video = false;\n  //     peerInfo.mediaStatus.videoMuted = true;\n  //   }\n  //   if (!(state.sdpSessions[peerId].remote.connection.data && state.sdpSessions[peerId].remote.connection.data.indexOf('send') > -1)) {\n  //     peerInfo.settings.data = false;\n  //   }\n  // }\n\n  // if (!(peerInfo.userData !== null && typeof peerInfo.userData !== 'undefined')) {\n  //   peerInfo.userData = '';\n  // }\n\n  // if (!peerInfo.settings.audio) {\n  //   peerInfo.mediaStatus.audioMuted = true;\n  // }\n  //\n  // if (!peerInfo.settings.video) {\n  //   peerInfo.mediaStatus.videoMuted = true;\n  // }\n\n  if (!peerInfo.settings.audio && !peerInfo.settings.video) {\n    peerInfo.config.receiveOnly = true;\n    peerInfo.config.publishOnly = false;\n  }\n\n  return peerInfo;\n};\n\nexport default getPeerInfo;\n","import clone from 'clone';\nimport Skylink from '../../index';\nimport { isAObj, isABoolean, isANumber } from '../../utils/helpers';\nimport { SDK_VERSION } from '../../constants';\n\n/**\n * @description Function that returns the current session peerInfo is peer isSelf.\n * @private\n * @param {SkylinkRoom} room\n * @return {peerInfo}\n * @memberOf PeerDataHelpers\n */\nconst getCurrentSessionInfo = (room) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const initOptions = Skylink.getInitOptions();\n  const { AdapterJS } = window;\n  const { enableDataChannel, codecParams } = initOptions;\n  const { roomName } = room;\n  const {\n    streamsMediaStatus,\n    userData,\n    peerPriorityWeight,\n    enableIceRestart,\n    publishOnly,\n    SMProtocolVersion,\n    DTProtocolVersion,\n    streams,\n    streamsBandwidthSettings,\n    sdpSettings,\n    user,\n  } = state;\n\n  const peerInfo = {\n    userData,\n    settings: {\n      audio: false,\n      video: false,\n    },\n    mediaStatus: {},\n    agent: {\n      name: AdapterJS.webrtcDetectedBrowser,\n      version: AdapterJS.webrtcDetectedVersion,\n      os: window.navigator.platform,\n      pluginVersion: AdapterJS.WebRTCPlugin.plugin ? AdapterJS.WebRTCPlugin.plugin.VERSION : null,\n      SMProtocolVersion,\n      DTProtocolVersion,\n      SDKVersion: SDK_VERSION,\n    },\n    room: roomName,\n    config: {\n      enableDataChannel,\n      enableIceRestart,\n      priorityWeight: peerPriorityWeight,\n      receiveOnly: false,\n      publishOnly,\n    },\n    sid: user.sid,\n    screenshare: false,\n  };\n\n  if (streams && streams.userMedia) {\n    const streamIds = Object.keys(streams.userMedia);\n    if (streams.userMedia[streamIds[0]]) { // assume that all the streams have the same settings\n      peerInfo.settings = clone(streams.userMedia[streamIds[0]].settings);\n    }\n  }\n\n  peerInfo.mediaStatus = streamsMediaStatus;\n\n  peerInfo.userData = userData || null;\n\n  peerInfo.config.receiveOnly = !peerInfo.settings.video && !peerInfo.settings.audio;\n\n  if (streams.screenshare) {\n    peerInfo.screenshare = true;\n  }\n\n  peerInfo.settings.maxBandwidth = clone(streamsBandwidthSettings.bAS);\n  peerInfo.settings.googleXBandwidth = clone(streamsBandwidthSettings.googleX);\n\n  if (peerInfo.settings.bandwidth) {\n    peerInfo.settings.maxBandwidth = clone(peerInfo.settings.bandwidth);\n    delete peerInfo.settings.bandwidth;\n  }\n\n  peerInfo.settings.data = enableDataChannel && sdpSettings.connection.data;\n\n  if (peerInfo.settings.audio && isAObj(peerInfo.settings.audio)) {\n    // Override the settings.audio.usedtx\n    if (isABoolean(typeof codecParams.audio.opus.stereo)) {\n      peerInfo.settings.audio.stereo = codecParams.audio.opus.stereo;\n    }\n    // Override the settings.audio.usedtx\n    if (isABoolean(codecParams.audio.opus.usedtx)) {\n      peerInfo.settings.audio.usedtx = codecParams.audio.opus.usedtx;\n    }\n    // Override the settings.audio.maxplaybackrate\n    if (isANumber(codecParams.audio.opus.maxplaybackrate)) {\n      peerInfo.settings.audio.maxplaybackrate = codecParams.audio.opus.maxplaybackrate;\n    }\n    // Override the settings.audio.useinbandfec\n    if (isABoolean(codecParams.audio.opus.useinbandfec)) {\n      peerInfo.settings.audio.useinbandfec = codecParams.audio.opus.useinbandfec;\n    }\n  }\n\n  if (peerInfo.settings.video && isAObj(peerInfo.settings.video)) {\n    peerInfo.settings.video.customSettings = {};\n\n    if (peerInfo.settings.video.frameRate && isAObj(peerInfo.settings.video.frameRate)) {\n      peerInfo.settings.video.customSettings.frameRate = clone(peerInfo.settings.video.frameRate);\n      peerInfo.settings.video.frameRate = -1;\n    }\n\n    if (peerInfo.settings.video.facingMode && isAObj(peerInfo.settings.video.facingMode)) {\n      peerInfo.settings.video.customSettings.facingMode = clone(peerInfo.settings.video.facingMode);\n      peerInfo.settings.video.facingMode = '-1';\n    }\n\n    if (peerInfo.settings.video.resolution && isAObj(peerInfo.settings.video.resolution)) {\n      if (peerInfo.settings.video.resolution.width && isAObj(peerInfo.settings.video.resolution.width)) {\n        peerInfo.settings.video.customSettings.width = clone(peerInfo.settings.video.width);\n        peerInfo.settings.video.resolution.width = -1;\n      }\n\n      if (peerInfo.settings.video.resolution.height && isAObj(peerInfo.settings.video.resolution.height)) {\n        peerInfo.settings.video.customSettings.height = clone(peerInfo.settings.video.height);\n        peerInfo.settings.video.resolution.height = -1;\n      }\n    }\n  }\n\n  if (!peerInfo.settings.audio && !peerInfo.settings.video) {\n    peerInfo.config.receiveOnly = true;\n    peerInfo.config.publishOnly = false;\n  }\n\n  return clone(peerInfo);\n};\n\nexport default getCurrentSessionInfo;\n","import helpers from './index';\n\n/**\n * @description Function that returns the userInfo to be sent to Signaling.\n * @private\n * @param {SkylinkRoom} room\n * @return {Object}\n * @memberOf PeerDataHelpers\n */\nconst getUserInfo = (room) => {\n  const userInfo = helpers.getCurrentSessionInfo(room);\n  delete userInfo.room;\n  // delete userInfo.config;\n  // delete userInfo.settings.data;\n  return userInfo;\n};\n\nexport default getUserInfo;\n","/**\n * @description Function that returns the User / Peer current custom data.\n * @private\n * @param {Skylink} roomState\n * @param {String} peerId\n * @return {roomState.userData}\n * @memberOf PeerDataHelpers\n */\nconst getUserData = (roomState, peerId) => {\n  if (peerId && roomState.peerInformations[peerId]) {\n    let peerUserData = roomState.peerInformations[peerId].userData;\n\n    if (!peerUserData) {\n      peerUserData = '';\n    }\n    return peerUserData;\n  }\n  return roomState.userData;\n};\n\nexport default getUserData;\n","import Skylink from '../../index';\nimport SkylinkSignalingServer from '../../server-communication/signaling-server';\nimport helpers from './index';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { peerUpdated } from '../../skylink-events';\nimport logger from '../../logger';\nimport MESSAGES from '../../messages';\n\n/**\n * @description Function that overwrites the User current custom data.\n * @private\n * @param {SkylinkRoom} room\n * @param {String | Object} userData\n * @memberOf PeerDataHelpers\n * @fires peerUpdated\n */\nconst setUserData = (room, userData) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  const { PEER_INFORMATIONS: { UPDATE_USER_DATA } } = MESSAGES;\n  const updatedUserData = userData || '';\n\n  roomState.userData = updatedUserData;\n  Skylink.setSkylinkState(roomState, roomState.room.id);\n\n  new SkylinkSignalingServer().setUserData(roomState);\n\n  dispatchEvent(peerUpdated({\n    peerId: roomState.user.sid,\n    peerInfo: helpers.getCurrentSessionInfo(room),\n    isSelf: true,\n  }));\n\n  logger.log.INFO(UPDATE_USER_DATA, updatedUserData);\n};\n\nexport default setUserData;\n","import logger from '../../../logger';\nimport { TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\nimport stopStreamHelpers from './index';\n\nconst hasStreamBeenReplaced = (state, stoppedStream) => {\n  const { streams } = state;\n\n  if (!streams.userMedia) {\n    return false;\n  }\n\n  const streamObjs = Object.values(streams.userMedia);\n\n  return streamObjs.some(streamObj => streamObj.isReplaced && (streamObj.id === stoppedStream.id));\n};\n\nconst filterUserMediaStreams = (state) => {\n  const { streams } = state;\n  const filteredStreams = {\n    replacedStreams: [],\n    addedStreams: [],\n  };\n  const streamIds = Object.keys(streams.userMedia);\n  streamIds.forEach((userMediaStreamId) => {\n    if (hasStreamBeenReplaced(state, streams.userMedia[userMediaStreamId].stream)) {\n      filteredStreams.replacedStreams.push(streams.userMedia[userMediaStreamId].stream);\n    } else {\n      filteredStreams.addedStreams.push(streams.userMedia[userMediaStreamId].stream);\n    }\n  });\n\n  return filteredStreams;\n};\n\n// eslint-disable-next-line consistent-return\nconst prepStopUserMediaStreams = (state, streamId, fromLeaveRoom) => new Promise((resolve, reject) => {\n  const { user } = state;\n  const filteredStreams = filterUserMediaStreams(state);\n  const isScreensharing = false;\n\n  try {\n    if (!streamId) {\n      stopStreamHelpers.stopAddedStreams(state, filteredStreams.addedStreams, isScreensharing, fromLeaveRoom);\n\n      // TODO:\n      // added streams must be stopped first and renegotiation started before replaced streams are stopped\n      // add event listener to listen for handshake offer to trigger stopReplacedStreams\n\n      stopStreamHelpers.stopReplacedStreams(state, filteredStreams.replacedStreams, isScreensharing, fromLeaveRoom);\n    } else {\n      const { stream } = state.streams.userMedia[streamId];\n      if (hasStreamBeenReplaced(state, stream)) {\n        // TODO\n        stopStreamHelpers.stopReplacedStream(state, stream, fromLeaveRoom);\n      } else {\n        stopStreamHelpers.stopAddedStream(state, stream, isScreensharing, fromLeaveRoom);\n      }\n    }\n\n    return stopStreamHelpers.initRefreshConnectionAndResolve(state.room, fromLeaveRoom, resolve, reject);\n  } catch (error) {\n    logger.log.DEBUG([user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.STOP_USER_MEDIA], error);\n    reject(MESSAGES.MEDIA_STREAM.ERRORS.STOP_USER_MEDIA);\n  }\n});\n\nexport default prepStopUserMediaStreams;\n","import logger from '../../../logger';\nimport { TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\n\nexport const stopMediaTracks = (tracks, peerId) => {\n  if (!tracks || !tracks[0]) {\n    return false;\n  }\n\n  tracks.forEach((track) => {\n    try {\n      track.stop();\n    } catch (error) {\n      logger.log.ERROR([peerId, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.ERRORS.STOP_MEDIA_TRACK} - track id: ${track.id}`], error);\n    }\n  });\n\n  return true;\n};\n\nconst tryStopStream = (stream, peerId) => {\n  if (!stream) return;\n\n  try {\n    stopMediaTracks(stream.getAudioTracks());\n  } catch (error) {\n    logger.log.ERROR([peerId, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.ERRORS.STOP_AUDIO_TRACK} - stream id: ${stream.id}`], error);\n  }\n\n  try {\n    stopMediaTracks(stream.getVideoTracks());\n  } catch (error) {\n    logger.log.ERROR([peerId, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.ERRORS.STOP_VIDEO_TRACK} - stream id: ${stream.id}`], error);\n  }\n};\n\nexport default tryStopStream;\n","import logger from '../../logger';\nimport Skylink from '../../index';\n\nconst removeSenderFromList = (state, peerId, sender) => {\n  const { room } = state;\n  const updatedState = state;\n  let indexToRemove = -1;\n\n  if (!updatedState.currentRTCRTPSenders[peerId]) {\n    return;\n  }\n\n  const listOfSenders = updatedState.currentRTCRTPSenders[peerId];\n\n  for (let i = 0; i < listOfSenders.length; i += 1) {\n    if (sender === listOfSenders[i]) {\n      indexToRemove = i;\n      break;\n    }\n  }\n\n  if (indexToRemove !== -1) {\n    listOfSenders.splice(indexToRemove, 1);\n    updatedState.currentRTCRTPSenders[peerId] = listOfSenders;\n    Skylink.setSkylinkState(updatedState, room.id);\n  } else {\n    logger.log.WARN([peerId, null, null, 'No matching sender was found for the peer.'], sender);\n  }\n};\n\nexport default removeSenderFromList;\n","import stopStreamHelpers from './index';\nimport logger from '../../../logger';\nimport { TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\nimport Skylink from '../../../index';\n\nconst hasStreamBeenReplaced = (state, stoppedStream) => {\n  const { streams } = state;\n\n  if (!streams.userMedia) {\n    return false;\n  }\n\n  const streamObjs = Object.values(streams.userMedia);\n\n  return streamObjs.some(streamObj => streamObj.isReplaced && (streamObj.id === stoppedStream.id));\n};\n\nconst prepStopScreenStream = (room, streamId, fromLeaveRoom = false) => new Promise((resolve, reject) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { user, streams } = state;\n  const screenStream = streams.screenshare.stream;\n  const isScreensharing = true;\n\n  try {\n    if (hasStreamBeenReplaced(state, screenStream)) {\n      stopStreamHelpers.stopReplacedStream(state, screenStream, isScreensharing, fromLeaveRoom);\n    } else {\n      stopStreamHelpers.stopAddedStream(state, screenStream, isScreensharing, fromLeaveRoom);\n    }\n\n    stopStreamHelpers.initRefreshConnectionAndResolve(state.room, fromLeaveRoom, resolve, reject);\n  } catch (error) {\n    logger.log.DEBUG([user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.STOP_SCREEN], error);\n    reject(new Error(MESSAGES.MEDIA_STREAM.ERRORS.STOP_SCREEN));\n  }\n});\n\nexport default prepStopScreenStream;\n","import prepStopStreams from './prepStopStreams';\nimport prepStopUserMediaStreams from './prepStopUserMediaStreams';\nimport stopAddedStream from './stopAddedStream';\nimport tryStopStream from './tryStopStream';\nimport removeTracks from './removeTracks';\nimport listenForEventAndDeleteMediaInfo from './listenForEventAndDeleteMediaInfo';\nimport stopAddedStreams from './stopAddedStreams';\nimport updateMediaInfoMediaState from './updateMediaInfoMediaState';\nimport deleteStreamFromState from './deleteStreamFromState';\nimport dispatchOnLocalStreamEnded from './dispatchOnLocalStreamEnded';\nimport prepStopScreenStream from './prepStopScreenStream';\nimport initRefreshConnectionAndResolve from './initRefreshConnectionAndResolve';\nimport stopReplacedStream from './stopReplacedStream';\nimport stopReplacedStreams from './stopReplacedStreams';\n\nconst stopStreamHelpers = {\n  prepStopStreams,\n  prepStopUserMediaStreams,\n  stopAddedStream,\n  tryStopStream,\n  removeTracks,\n  listenForEventAndDeleteMediaInfo,\n  stopAddedStreams,\n  updateMediaInfoMediaState,\n  deleteStreamFromState,\n  dispatchOnLocalStreamEnded,\n  prepStopScreenStream,\n  initRefreshConnectionAndResolve,\n  stopReplacedStream,\n  stopReplacedStreams,\n};\n\nexport default stopStreamHelpers;\n","import Skylink from '../../../index';\nimport stopStreamHelpers from './index';\nimport MESSAGES from '../../../messages';\n\n// eslint-disable-next-line consistent-return\nconst prepStopStreams = (roomId, streamId, fromLeaveRoom = false, isScreensharing = false) => new Promise((resolve, reject) => {\n  const state = Skylink.getSkylinkState(roomId);\n  const { streams } = state;\n\n  if (!state || !streams) {\n    reject(new Error(`${MESSAGES.ROOM_STATE.NOT_FOUND} - ${roomId}`));\n  }\n\n  if (!streams || (!isScreensharing && !streams.userMedia) || (isScreensharing && !streams.screenshare) || (isScreensharing && streams.screenshare && (streams.screenshare.id !== streamId))) {\n    reject(new Error(`${MESSAGES.MEDIA_STREAM.ERRORS.NO_STREAM} - ${streamId}`));\n  }\n\n  if (isScreensharing) {\n    stopStreamHelpers.prepStopScreenStream(state.room, streamId, fromLeaveRoom)\n      .then(() => resolve())\n      .catch(rej => reject(rej));\n  } else {\n    stopStreamHelpers.prepStopUserMediaStreams(state, streamId, fromLeaveRoom)\n      .then(() => resolve())\n      .catch(rej => reject(rej));\n  }\n});\n\nexport default prepStopStreams;\n","import logger from '../../../logger';\nimport { TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\nimport stopStreamHelpers from './index';\nimport ScreenSharing from '../../../features/screen-sharing';\n\nconst stopAddedStream = (state, stream, isScreensharing = false, fromLeaveRoom = false) => {\n  const { room, user } = state;\n\n  try {\n    stopStreamHelpers.tryStopStream(stream, user.sid);\n\n    if (!fromLeaveRoom) {\n      stopStreamHelpers.removeTracks(room, stream);\n      stopStreamHelpers.updateMediaInfoMediaState(room, stream);\n      stopStreamHelpers.deleteStreamFromState(room, stream, isScreensharing);\n      stopStreamHelpers.listenForEventAndDeleteMediaInfo(room, stream);\n      stopStreamHelpers.dispatchOnLocalStreamEnded(room, stream, isScreensharing);\n\n      if (isScreensharing) {\n        new ScreenSharing(state).deleteScreensharingInstance(room);\n      }\n    }\n  } catch (err) {\n    logger.log.ERROR([user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.STOP_ADDED_STREAM], err);\n  }\n};\n\nexport default stopAddedStream;\n","import Skylink from '../../../index';\nimport logger from '../../../logger';\nimport MESSAGES from '../../../messages';\nimport removeSenderFromList from '../../../peer-connection/helpers/removeSenderFromList';\nimport { PEER_CONNECTION_STATE, TAGS } from '../../../constants';\n\nconst removeTrack = (state, peerConnections, track) => {\n  const trackId = track.id;\n  const peerIds = Object.keys(peerConnections);\n\n  for (let i = 0; i < peerIds.length; i += 1) {\n    try {\n      const targetMid = peerIds[i];\n      const peerConnection = peerConnections[targetMid];\n\n      if (peerConnection.connectionState === PEER_CONNECTION_STATE.CLOSED) {\n        break;\n      }\n\n      const senders = peerConnection.getSenders();\n      let sender = null;\n      for (let y = 0; y < senders.length; y += 1) {\n        if (senders[y].track && senders[y].track.id === trackId) {\n          sender = senders[y];\n          peerConnection.removeTrack(sender);\n          removeSenderFromList(state, targetMid, sender);\n        }\n      }\n    } catch (error) {\n      logger.log.ERROR([peerIds[i], TAGS.PEER_CONNECTION, null, MESSAGES.PEER_CONNECTION.ERRORS.REMOVE_TRACK], error);\n    }\n  }\n};\n\n/**\n * Function that removes the tracks from the peer connection.\n * @param {SkylinkRoom} room\n * @param {MediaStream} stream\n * @memberOf MediaStreamHelpers\n */\nconst removeTracks = (room, stream) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections, user } = state;\n  const tracks = stream.getTracks();\n\n  try {\n    tracks.forEach((track) => {\n      removeTrack(state, peerConnections, track);\n    });\n  } catch (error) {\n    logger.log.ERROR([user.sid, TAGS.PEER_CONNECTION, null, MESSAGES.PEER_CONNECTION.ERRORS.REMOVE_TRACK], error);\n  }\n};\n\nexport default removeTracks;\n","import { EVENTS, HANDSHAKE_PROGRESS, TRACK_KIND } from '../../../constants';\nimport PeerMedia from '../../../peer-media';\nimport Skylink from '../../../index';\nimport { addEventListener, removeEventListener } from '../../../utils/skylinkEventManager';\nimport { hasAudioTrack } from '../../../utils/helpers';\n\nconst listenForEventAndDeleteMediaInfo = (room, stream) => {\n  const state = Skylink.getSkylinkState(room.id);\n\n  const executeOfferCallback = (evt) => {\n    const s = stream;\n    const { user } = state;\n    const { detail } = evt;\n    if (detail.state === HANDSHAKE_PROGRESS.OFFER) {\n      const mediaId = PeerMedia.retrieveMediaId(hasAudioTrack(s) ? TRACK_KIND.AUDIO : TRACK_KIND.VIDEO, s.id);\n      PeerMedia.deleteUnavailableMedia(room, user.sid, mediaId);\n    }\n  };\n\n  const executeMediaDeletedCallback = () => {\n    removeEventListener(EVENTS.HANDSHAKE_PROGRESS, executeOfferCallback);\n    removeEventListener(EVENTS.MEDIA_INFO_DELETED, executeMediaDeletedCallback);\n  };\n\n  addEventListener(EVENTS.HANDSHAKE_PROGRESS, executeOfferCallback);\n  addEventListener(EVENTS.MEDIA_INFO_DELETED, executeMediaDeletedCallback);\n};\n\nexport default listenForEventAndDeleteMediaInfo;\n","import stopStreamHelpers from './index';\n\nconst stopAddedStreams = (state, streams, isScreensharing, fromLeaveRoom) => {\n  streams.forEach((stream) => {\n    stopStreamHelpers.stopAddedStream(state, stream, isScreensharing, fromLeaveRoom);\n  });\n};\n\nexport default stopAddedStreams;\n","import Skylink from '../../../index';\nimport PeerMedia from '../../../peer-media';\n\nconst updateMediaInfoMediaState = (room, stream) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { user } = state;\n  const streamId = stream.id;\n  const mediaId = PeerMedia.retrieveMediaId(stream.getTracks()[0].kind, streamId);\n  PeerMedia.setMediaStateToUnavailable(room, user.sid, mediaId);\n};\n\nexport default updateMediaInfoMediaState;\n","import { isEmptyObj } from '../../../utils/helpers';\nimport logger from '../../../logger';\nimport { TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\nimport Skylink from '../../../index';\n\nconst deleteStreamFromState = (room, stream, isScreensharing = null) => {\n  const updatedState = Skylink.getSkylinkState(room.id);\n  const { user } = updatedState;\n  const streamIdToRemove = stream.id;\n\n  if (isScreensharing) {\n    delete updatedState.streams.screenshare;\n    delete updatedState.streamsMediaStatus[stream.id];\n    delete updatedState.streamsMutedSettings[stream.id];\n    updatedState.streams.screenshare = null;\n\n    logger.log.INFO([user.sid, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.STOP_SUCCESS} - stream id: ${stream.id} (screenshare)`]);\n  } else {\n    delete updatedState.streams.userMedia[streamIdToRemove];\n    delete updatedState.streamsMediaStatus[stream.id];\n    delete updatedState.streamsMutedSettings[stream.id];\n\n    if (isEmptyObj(updatedState.streams.userMedia)) {\n      updatedState.streams.userMedia = null;\n    }\n\n    logger.log.INFO([user.sid, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.STOP_SUCCESS} - stream id: ${stream.id}`]);\n  }\n\n  Skylink.setSkylinkState(updatedState, updatedState.room.id);\n};\n\nexport default deleteStreamFromState;\n","import { mediaAccessStopped, peerUpdated, streamEnded } from '../../../skylink-events';\nimport Skylink from '../../../index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { hasVideoTrack, hasAudioTrack } from '../../../utils/helpers';\nimport logger from '../../../logger';\nimport MESSAGES from '../../../messages';\nimport PeerData from '../../../peer-data/index';\nimport helpers from '../../../peer-data/helpers';\nimport { TAGS } from '../../../constants';\n\n/**\n * Function that handles the <code>RTCPeerConnection.removeTracks(sender)</code> on the local MediaStream.\n * @param {SkylinkRoom} room\n * @param {MediaStream} stream - The stream.\n * @param {boolean} isScreensharing\n * @memberOf MediaStreamHelpers\n * @fires streamEnded\n */\nconst dispatchOnLocalStreamEnded = (room, stream, isScreensharing = false) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { MEDIA_STREAM } = MESSAGES;\n  const { user } = state;\n  const isSelf = true;\n\n  logger.log.INFO([user.sid, TAGS.MEDIA_STREAM, null, MEDIA_STREAM.STOP_SETTINGS], {\n    peerId: user.sid, isSelf, isScreensharing, stream,\n  });\n\n  dispatchEvent(streamEnded({\n    room,\n    peerId: user.sid,\n    peerInfo: PeerData.getCurrentSessionInfo(room),\n    isSelf,\n    isScreensharing,\n    streamId: stream.id,\n    isVideo: hasVideoTrack(stream),\n    isAudio: hasAudioTrack(stream),\n  }));\n\n  dispatchEvent(mediaAccessStopped({\n    isScreensharing,\n    streamId: stream.id,\n  }));\n\n  dispatchEvent(peerUpdated({\n    peerId: user.sid,\n    peerInfo: helpers.getCurrentSessionInfo(room),\n    isSelf: true,\n  }));\n};\n\nexport default dispatchOnLocalStreamEnded;\n","import { isEmptyArray } from '../../../utils/helpers';\nimport PeerConnection from '../../../peer-connection';\nimport Skylink from '../../../index';\nimport { addEventListener, dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { peerUpdated } from '../../../skylink-events';\nimport PeerData from '../../../peer-data';\nimport PeerMedia from '../../../peer-media/index';\nimport { EVENTS, HANDSHAKE_PROGRESS } from '../../../constants';\n\nconst dispatchPeerUpdatedEvent = (roomState) => {\n  const { room, user } = roomState;\n\n  dispatchEvent(peerUpdated({\n    peerId: user.sid,\n    isSelf: true,\n    peerInfo: PeerData.getCurrentSessionInfo(room),\n  }));\n};\n\n// eslint-disable-next-line consistent-return\nconst initRefreshConnectionAndResolve = (room, fromLeaveRoom, resolve, reject) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = state;\n\n  try {\n    if (!fromLeaveRoom) {\n      if (!isEmptyArray(Object.keys(peerConnections))) {\n        // eslint-disable-next-line consistent-return\n        const executeAnswerAckCallback = (evt) => {\n          const { detail } = evt;\n          if (detail.state === HANDSHAKE_PROGRESS.ANSWER_ACK) {\n            return (resolve());\n          }\n        };\n\n        addEventListener(EVENTS.HANDSHAKE_PROGRESS, executeAnswerAckCallback);\n\n        PeerConnection.refreshConnection(state);\n      } else {\n        dispatchPeerUpdatedEvent(state);\n        PeerMedia.deleteUnavailableMedia(state.room, state.user.sid);\n        return resolve();\n      }\n    }\n  } catch (err) {\n    reject(err);\n  }\n};\n\nexport default initRefreshConnectionAndResolve;\n","import logger from '../../../logger';\nimport { STREAM_STATUS, TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\nimport stopStreamHelpers from './index';\nimport SkylinkSignalingServer from '../../../server-communication/signaling-server';\n\nconst sendStreamReplaceEndedMsg = (state, stoppedStream) => {\n  const { room, user } = state;\n  const signaling = new SkylinkSignalingServer();\n  signaling.stream(room.id, user, stoppedStream, STREAM_STATUS.REPLACED_STREAM_ENDED, null);\n};\n\n// TODO:\n//  implement stop user media stream\n//  stop screen stream will be implemented diff - need to replace the screen stream with the original user media stream\n//  ref: onScreenStreamEnded for previous implementation\nconst stopReplacedStream = (state, stream, isScreensharing, fromLeaveRoom) => {\n  const { user, room } = state;\n\n  try {\n    stopStreamHelpers.tryStopStream(stream);\n\n    if (!fromLeaveRoom) {\n      sendStreamReplaceEndedMsg(state, stream);\n      stopStreamHelpers.deleteStreamFromState(room, stream, isScreensharing);\n      stopStreamHelpers.dispatchOnLocalStreamEnded(room, stream);\n    }\n  } catch (err) {\n    logger.log.ERROR([user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.STOP_REPLACED_STREAM], err);\n  }\n};\n\nexport default stopReplacedStream;\n","import stopStreamHelpers from './index';\n\nconst stopReplacedStreams = (state, streams, isScreensharing, fromLeaveRoom) => {\n  streams.forEach((stream) => {\n    stopStreamHelpers.stopReplacedStream(state, stream, isScreensharing, fromLeaveRoom);\n  });\n};\n\nexport default stopReplacedStreams;\n","import Skylink from '../index';\nimport helpers from './helpers/index';\nimport stopStreamHelpers from './helpers/stopStream/index';\nimport logger from '../logger';\nimport MESSAGES from '../messages';\nimport { isAObj } from '../utils/helpers';\nimport { TAGS, TRACK_KIND } from '../constants';\n\n/**\n * @private\n * @classdesc Class used for handling RTCMediaStream. Helper methods are listed inside <code>{@link MediaStreamHelpers}</code>.\n * @class\n */\nclass MediaStream {\n  /**\n   * @description Function that retrieves camera Stream.\n   * @param {SkylinkState} state\n   * @param {GetUserMediaOptions} mediaOptions - The camera Stream configuration options.\n   * @return {Promise}\n   */\n  static getUserMedia(state, mediaOptions = {}) {\n    const { room } = state;\n    const updatedRoomState = helpers.parseMediaOptions(mediaOptions, state);\n    const { audio, video } = mediaOptions;\n    const useExactConstraints = !!mediaOptions.useExactConstraints;\n    Skylink.setSkylinkState(updatedRoomState, room.id);\n\n    return helpers.prepMediaAccessRequest({\n      useExactConstraints,\n      audio,\n      video,\n      roomKey: room.id,\n    });\n  }\n\n  /**\n   * @description Function that filters user input from getUserMedia public method\n   * @param {SkylinkState} roomState\n   * @param {GetUserMediaOptions} options\n   */\n  static getUserMediaLayer(roomState, options = null) {\n    return new Promise((resolve, reject) => {\n      let mediaOptions = {\n        audio: true,\n        video: true,\n      };\n\n      if (!options) {\n        logger.log.WARN([roomState.user.sid, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.NO_OPTIONS} - ${MESSAGES.MEDIA_STREAM.DEFAULT_OPTIONS}`], mediaOptions);\n      }\n\n      if (!isAObj(options)) {\n        logger.log.ERROR([roomState.user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.INVALID_GUM_OPTIONS], options);\n        reject(new Error(MESSAGES.MEDIA_STREAM.ERRORS.INVALID_GUM_OPTIONS), null);\n      }\n\n      mediaOptions = options;\n\n      const getUserMediaPromise = MediaStream.getUserMedia(roomState, mediaOptions);\n      getUserMediaPromise.then((stream) => {\n        resolve(stream);\n      }).catch((error) => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Function that stops the getUserMedia() streams.\n   * @param {SkylinkState} roomState\n   * @param {String} streamId - The id of the stream to stop if there is more than one getUserMedia stream.\n   */\n  static stopStreams(roomState, streamId) {\n    return stopStreamHelpers.prepStopStreams(roomState.room.id, streamId);\n  }\n\n  /**\n   * Function that sets User's Stream to send to Peer connection.\n   * @param {String} targetMid - The mid of the target peer\n   * @param {SkylinkState} roomState - Skylink State of current room\n   */\n  static addLocalMediaStreams(targetMid, roomState) {\n    helpers.addLocalMediaStreams(targetMid, roomState);\n  }\n\n  /**\n   * Function that handles the <code>RTCPeerConnection.ontrack</code> event on remote stream added.\n   * @param {MediaStream} stream - {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaStream}\n   * @param {SkylinkState} currentRoomState - Current room state\n   * @param {String} targetMid - The mid of the target peer\n   * @param {boolean} [isScreensharing=false] - The flag if stream is a screenshare stream.\n   */\n  static onRemoteTrackAdded(stream, currentRoomState, targetMid, isScreensharing, isVideo, isAudio) {\n    helpers.onRemoteTrackAdded(stream, currentRoomState, targetMid, isScreensharing, isVideo, isAudio);\n  }\n\n  /**\n   * Function that mutes the stream.\n   * @param {SkylinkState} roomState\n   * @param {Object} options\n   * @param {boolean} options.audioMuted\n   * @param {boolean} options.videoMuted\n   * @param {String} streamId\n   */\n  static muteStreams(roomState, options, streamId) {\n    return helpers.muteStreams(roomState, options, streamId);\n  }\n\n  /**\n   * Function that sends the MediaStream object if present or mediaStream settings.\n   * @param {SkylinkState} roomState\n   * @param {MediaStream|Object} options\n   */\n  static sendStream(roomState, options) {\n    return helpers.sendStream(roomState, options);\n  }\n\n  static getStreamSources() {\n    return helpers.getStreamSources();\n  }\n\n  static getScreenSources() {\n    return helpers.getScreenSources();\n  }\n\n  static updateRemoteStreams(room, peerId, stream) {\n    return helpers.updateRemoteStreams(room, peerId, stream);\n  }\n\n  /**\n   * Function that returns all active streams including screenshare stream if present.\n   * @param {SkylinkState} roomState\n   * @return {streamList} streamList\n   */\n  static getStreams(roomState) {\n    return helpers.getStreams(roomState);\n  }\n\n  static usePrefetchedStream(roomKey, stream, options = null) {\n    return new Promise((resolve) => {\n      if (!stream && (options.id && options.active)) {\n        // eslint-disable-next-line no-param-reassign\n        stream = options;\n      }\n\n      const streamOptions = { audio: stream.getAudioTracks().length !== 0, video: stream.getVideoTracks().length !== 0 };\n      const audioSettings = helpers.parseStreamSettings(streamOptions, TRACK_KIND.AUDIO);\n      const videoSettings = helpers.parseStreamSettings(streamOptions, TRACK_KIND.VIDEO);\n      const isAudioFallback = false;\n      return helpers.onStreamAccessSuccess(roomKey, stream, audioSettings, videoSettings, isAudioFallback, resolve);\n    });\n  }\n}\n\nexport default MediaStream;\n","import { isEmptyObj } from '../../utils/helpers';\nimport MediaStream from '../../media-stream';\n\nconst hasPeerConnections = (peerConnections, hasMCU) => (hasMCU ? !!peerConnections.MCU.maps : !isEmptyObj(peerConnections));\n\nconst getSelfStreams = (streams) => {\n  if (streams.userMedia) {\n    return streams.userMedia;\n  }\n  return null;\n};\n\nconst getSelfScreen = (streams) => {\n  if (streams.screenshare) {\n    return streams.screenshare;\n  }\n  return null;\n};\n\n/**\n * @description Function that gets the list of connected Peers Streams in the Room.\n * @param {SkylinkState} roomState\n * @param {boolean} [includeSelf=true] - The flag if self streams are included.\n * @return {Object}\n * @memberOf PeerDataHelpers\n */\nconst getPeersStreams = (roomState, includeSelf = true) => {\n  const listOfPeersStreams = {};\n  const {\n    peerConnections,\n    user,\n    streams,\n    hasMCU,\n  } = roomState;\n\n  if (user && user.sid && includeSelf) {\n    const selfStreams = getSelfStreams(streams);\n    const selfScreen = getSelfScreen(streams);\n    listOfPeersStreams[user.sid] = selfStreams || selfScreen ? {} : null;\n\n    if (selfStreams) {\n      Object.keys(selfStreams).forEach((streamId) => {\n        listOfPeersStreams[user.sid].isSelf = true;\n        listOfPeersStreams[user.sid][streamId] = selfStreams[streamId].stream;\n      });\n    }\n\n    if (selfScreen) {\n      listOfPeersStreams[user.sid].isSelf = true;\n      listOfPeersStreams[user.sid][selfScreen.id] = selfScreen;\n    }\n  }\n\n  if (hasPeerConnections(peerConnections, hasMCU)) {\n    const listOfPeers = hasMCU ? Object.keys(peerConnections.MCU.maps) : Object.keys(peerConnections);\n    for (let i = 0; i < listOfPeers.length; i += 1) {\n      listOfPeersStreams[listOfPeers[i]] = {};\n      const remoteStreams = MediaStream.retrieveRemoteStreams(roomState, listOfPeers[i]);\n      remoteStreams.forEach((stream) => {\n        listOfPeersStreams[listOfPeers[i]][stream.id] = stream;\n      });\n    }\n  }\n\n  return isEmptyObj(listOfPeersStreams) ? null : listOfPeersStreams;\n};\n\nexport default getPeersStreams;\n","import { isEmptyObj } from '../../utils/helpers';\nimport { SkylinkConstants } from '../../index';\nimport PeerConnection from '../../peer-connection';\n\nconst hasPeerDataChannels = dataChannels => !isEmptyObj(dataChannels);\n\n/**\n * @description Function that gets the current list of connected Peers Datachannel connections in the Room.\n * @private\n * @param {SkylinkState} roomState\n * @return {Object} listOfPeersDataChannels\n * @memberOf PeerDataHelpers\n */\nconst getPeersDataChannels = (roomState) => {\n  const { dataChannels } = roomState;\n  const listOfPeersDataChannels = {};\n  const listOfPeers = Object.keys(dataChannels);\n\n  for (let i = 0; i < listOfPeers.length; i += 1) {\n    const peerId = listOfPeers[i];\n    listOfPeersDataChannels[peerId] = {};\n\n    if (hasPeerDataChannels(dataChannels)) {\n      const channelProp = Object.keys(dataChannels[peerId]);\n      for (let y = 0; y < channelProp.length; y += 1) {\n        const channel = dataChannels[peerId][channelProp[y]];\n        const {\n          channelName,\n          channelType,\n          transferId,\n          streamId,\n        } = channel;\n        let peerChannel = null;\n        peerChannel = PeerConnection.getDataChannelBuffer(channel);\n        peerChannel.channelProp = channelProp[y];\n        peerChannel.channelName = channelName;\n        peerChannel.channelType = channelType;\n        peerChannel.currentTransferId = transferId;\n        peerChannel.currentStreamId = streamId;\n        peerChannel.readyState = channel.channel\n          ? channel.channel.readyState : SkylinkConstants.DATA_CHANNEL_STATE.CREATE_ERROR;\n\n        listOfPeersDataChannels[peerId][channelName] = peerChannel;\n      }\n    }\n  }\n\n  return listOfPeersDataChannels;\n};\n\nexport default getPeersDataChannels;\n","import clone from 'clone';\nimport {\n  isEmptyObj, isAObj, isANumber,\n} from '../../utils/helpers';\nimport { PEER_CONNECTION_STATE, PEER_TYPE } from '../../constants';\nimport Skylink from '../..';\nimport PeerData from '../index';\n\nconst hasPeers = peerInformations => !isEmptyObj(peerInformations);\n\n/**\n * Function that gets a current custom Peer settings.\n * @param {SkylinkState} state\n * @param {String} peerId\n * @private\n * @return {Object}\n * @memberOf PeerDataHelpers\n */\nconst getPeerCustomSettings = (state, peerId) => {\n  const { streams } = state;\n  const customSettings = {};\n  customSettings.settings = {\n    audio: false,\n    video: false,\n    data: false,\n    bandwidth: clone(state.streamsBandwidthSettings.bAS),\n    googleXBandwidth: clone(state.streamsBandwidthSettings.googleX),\n  };\n\n  const usePeerId = state.hasMCU ? PEER_TYPE.MCU : peerId;\n\n  if (state.peerConnections[usePeerId].signalingState !== PEER_CONNECTION_STATE.CLOSED) {\n    const initOptions = Skylink.getInitOptions();\n    const peerInfo = PeerData.getPeerInfo(usePeerId, state.room);\n\n    customSettings.settings = clone(peerInfo.settings);\n    customSettings.settings.data = initOptions.enableDataChannel && state.peerInformations[usePeerId].config.enableDataChannel;\n\n    // TODO: check logic - why the need to build again and not take from getPeerInfo since the signature is the same\n    if (streams.userMedia || streams.screenshare) {\n      // if (state.streams.userMedia) {\n      //   const streamIds = Object.keys(streams.userMedia);\n      //   selectedStream = state.streams.userMedia[streamIds[0]];\n      // } else if (state.streams.screenshare) {\n      //   selectedStream = state.streams.screenshare;\n      // }\n\n      // customSettings.settings.audio = clone(selectedStream.settings.audio);\n      // customSettings.settings.video = clone(selectedStream.settings.video);\n      // customSettings.mediaStatus = clone(state.streamsMutedSettings);\n\n      // typeof state.peerConnections[peerId].getSenders === 'function' - native function\n      // if (!initOptions.useEdgeWebRTC && !window.msRTCPeerConnection) {\n      //   const senders = state.peerConnections[usePeerId].getSenders();\n      //   let hasSendAudio = false;\n      //   let hasSendVideo = false;\n      //\n      //   if (senders.length !== 0) {\n      //     for (let i = 0; i < senders.length; i += 1) {\n      //       if (senders[i].track && senders[i].track.kind === 'audio') {\n      //         hasSendAudio = true;\n      //       } else if (senders[i].track && senders[i].track.kind === 'video') {\n      //         hasSendVideo = true;\n      //       }\n      //     }\n      //\n      //     if (!hasSendAudio) {\n      //       customSettings.settings.audio = false;\n      //       customSettings.mediaStatus.audioMuted = true;\n      //     }\n      //\n      //     if (!hasSendVideo) {\n      //       customSettings.settings.video = false;\n      //       customSettings.mediaStatus.videoMuted = true;\n      //     }\n      //   }\n      // }\n    }\n  }\n\n  //  update default conifg with peer custom config TODO: check if parsing of state.peerCustomConfigs is required or if it can be assigned directly\n  if (state.peerCustomConfigs[usePeerId]) {\n    if (Object.hasOwnProperty.call(state.peerCustomConfigs[usePeerId], 'bandwidth')) {\n      const peerCustomConfigBandwidth = state.peerCustomConfigs[usePeerId].bandwidth;\n\n      if (isAObj(peerCustomConfigBandwidth)) {\n        if (isANumber(peerCustomConfigBandwidth.audio)) {\n          customSettings.settings.bandwidth.audio = peerCustomConfigBandwidth.audio;\n        }\n        if (isANumber(peerCustomConfigBandwidth.video)) {\n          customSettings.settings.bandwidth.video = peerCustomConfigBandwidth.video;\n        }\n        if (isANumber(peerCustomConfigBandwidth.data)) {\n          customSettings.settings.bandwidth.data = peerCustomConfigBandwidth.data;\n        }\n      }\n    }\n\n    if (Object.hasOwnProperty.call(state.peerCustomConfigs[usePeerId], 'googleXBandwidth')) {\n      const peerCustomConfigGoogleXBandwidth = state.peerCustomConfigs[usePeerId].googleXBandwidth;\n\n      if (isAObj(peerCustomConfigGoogleXBandwidth)) {\n        if (isANumber(peerCustomConfigGoogleXBandwidth.min)) {\n          customSettings.settings.googleXBandwidth.min = peerCustomConfigGoogleXBandwidth.min;\n        }\n        if (isANumber(peerCustomConfigGoogleXBandwidth.max)) {\n          customSettings.settings.googleXBandwidth.max = peerCustomConfigGoogleXBandwidth.max;\n        }\n      }\n    }\n  }\n\n  // Check we are going to send data to peer // TODO: is the above check enough or do we need to parse it from sdp\n  // if (state.sdpSessions[usePeerId]) {\n  //   const peerLocalConnection = state.sdpSessions[usePeerId].local.connection;\n  //   if (isAObj(peerLocalConnection)) {\n  //     if (state.sdpSessions[usePeerId].local.connection.audio\n  //       && state.sdpSessions[usePeerId].local.connection.audio.indexOf('send') > -1) {\n  //       customSettings.settings.audio = true;\n  //       customSettings.mediaStatus.audioMuted = false;\n  //     }\n  //     if (state.sdpSessions[usePeerId].local.connection.video\n  //       && state.sdpSessions[usePeerId].local.connection.video.indexOf('send') > -1) {\n  //       customSettings.settings.video = true;\n  //       customSettings.mediaStatus.videoMuted = false;\n  //     }\n  //     if (state.sdpSessions[usePeerId].local.connection.data\n  //       && state.sdpSessions[usePeerId].local.connection.data.indexOf('send') > -1) {\n  //       customSettings.settings.data = true;\n  //     }\n  //   }\n  // }\n\n  return customSettings;\n};\n\n/**\n * @description Function that gets the list of current custom Peer settings sent and set.\n * @param {SkylinkState} roomState\n * @return {Object} customSettingsList\n * @memberOf PeerDataHelpers\n */\nconst getPeersCustomSettings = (roomState) => {\n  const { peerInformations } = roomState;\n  const customSettingsList = {};\n\n  if (hasPeers(peerInformations)) {\n    const peerIds = Object.keys(peerInformations);\n\n    for (let peerId = 0; peerId < peerIds.length; peerId += 1) {\n      customSettingsList[peerIds[peerId]] = getPeerCustomSettings(roomState, peerIds[peerId]);\n    }\n\n    return customSettingsList;\n  }\n\n  return customSettingsList;\n};\n\nexport default getPeersCustomSettings;\n","import getPeerInfo from './getPeerInfo';\nimport getCurrentSessionInfo from './getCurrentSessionInfo';\nimport getUserInfo from './getUserInfo';\nimport getUserData from './getUserData';\nimport setUserData from './setUserData';\nimport getPeersStreams from './getPeersStreams';\nimport getPeersDataChannels from './getPeersDataChannels';\nimport getPeersCustomSettings from './getPeersCustomSettings';\nimport setGreatestPeerPriorityWeight from './setGreatestPeerPriorityWeight';\n\n/**\n * @namespace PeerDataHelpers\n * @description All helper and utility functions for <code>{@link PeerData}</code> class are listed here.\n * @private\n * @type {{getCurrentSessionInfo, getPeerInfo, getUserData, getUserInfo, setUserData, getPeersStreams, getPeersDataChannels, getPeersCustomSettings, setGreatestPeerPriorityWeight}}\n */\nconst helpers = {\n  getPeerInfo,\n  getCurrentSessionInfo,\n  getUserInfo,\n  getUserData,\n  setUserData,\n  getPeersStreams,\n  getPeersDataChannels,\n  getPeersCustomSettings,\n  setGreatestPeerPriorityWeight,\n};\n\nexport default helpers;\n","import Skylink from '../../index';\nimport logger from '../../logger';\n\n/**\n * Iterates through all connected peers to find the greatest peerPriorityWeight and sets the current users peerPriorityWeight to max.\n * @param {SkylinkState} roomState\n * @private\n */\nconst setGreatestPeerPriorityWeight = (roomState) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const { peerInformations } = state;\n  const informationList = Object.entries(peerInformations);\n  const selfPriorityWeight = state.peerPriorityWeight;\n\n  let maxPeerPriority = selfPriorityWeight;\n  for (let i = 0; i < informationList.length; i += 1) {\n    const peerInformation = informationList[i][1];\n    const { config: { priorityWeight } } = peerInformation;\n\n    if (priorityWeight > maxPeerPriority) {\n      maxPeerPriority = priorityWeight;\n      state.peerPriorityWeight = maxPeerPriority + 1;\n    }\n  }\n  Skylink.setSkylinkState(state, state.room.id);\n  logger.log.DEBUG(`User's priorityWeight is set to ${maxPeerPriority}`);\n};\n\nexport default setGreatestPeerPriorityWeight;\n","import helpers from './helpers';\n\n/**\n * @classdesc Class that represents PeerData methods\n * @class\n * @private\n */\nclass PeerData {\n  /**\n   * @description Function that returns the User / Peer current session information.\n   * @private\n   * @param {String} peerId\n   * @param {SkylinkRoom} room\n   * @return {peerInfo}\n   */\n  static getPeerInfo(peerId, room) {\n    return helpers.getPeerInfo(peerId, room);\n  }\n\n  /**\n   * @private\n   * @param {SkylinkRoom} room\n   * @return {peerInfo}\n   */\n  static getCurrentSessionInfo(room) {\n    return helpers.getCurrentSessionInfo(room);\n  }\n\n  /**\n   * @description Function that returns the User session information to be sent to Peers.\n   * @private\n   * @param {SkylinkRoom} room\n   * @return {Object}\n   */\n  static getUserInfo(room) {\n    return helpers.getUserInfo(room);\n  }\n\n  /**\n   * @description Function that returns the User / Peer current custom data.\n   * @private\n   * @param {Skylink} roomState\n   * @param {String} peerId\n   * @return {roomState.userData}\n   */\n  static getUserData(roomState, peerId) {\n    return helpers.getUserData(roomState, peerId);\n  }\n\n  /**\n   * @description Function that overwrites the User current custom data.\n   * @private\n   * @param {SkylinkRoom} room\n   * @param {String | Object} userData\n   */\n  static setUserData(room, userData) {\n    helpers.setUserData(room, userData);\n  }\n\n  /**\n   * @description  Function that gets the list of connected Peers Streams in the Room.\n   * @private\n   * @param {SkylinkState} roomState\n   * @param {boolean} [includeSelf=true] - The flag if self streams are included.\n   * @return {Object}\n   */\n  static getPeersStreams(roomState, includeSelf) {\n    return helpers.getPeersStreams(roomState, includeSelf);\n  }\n\n  /**\n   * @description Function that gets the current list of connected Peers Datachannel connections in the Room.\n   * @private\n   * @param {SkylinkState} roomState\n   * @return {Object} listOfPeersDataChannels\n   */\n  static getPeersDataChannels(roomState) {\n    return helpers.getPeersDataChannels(roomState);\n  }\n\n  /**\n   * @description Function that gets the list of current custom Peer settings sent and set.\n   * @param {SkylinkState} roomState\n   * @return {Object}\n   */\n  static getPeersCustomSettings(roomState) {\n    return helpers.getPeersCustomSettings(roomState);\n  }\n\n  /**\n   * Iterates through all connected peers to find the greatest peerPriorityWeight and sets the current users peerPriorityWeight to max.\n   * @param {SkylinkState} roomState\n   * @return {*|void}\n   */\n  static setGreatestPeerPriorityWeight(roomState) {\n    return helpers.setGreatestPeerPriorityWeight(roomState);\n  }\n}\n\nexport default PeerData;\n","import clone from 'clone';\nimport Skylink from '../../../index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { channelClose, sessionDisconnect } from '../../../skylink-events';\nimport logger from '../../../logger';\nimport PeerData from '../../../peer-data';\n\nconst handleSocketClose = (roomKey, reason) => {\n  const state = Skylink.getSkylinkState(roomKey) || Object.values(Skylink.getSkylinkState())[0]; // to handle leaveAllRooms method\n\n  const {\n    socketSession, inRoom, room, user,\n  } = state;\n\n  logger.log.INFO([null, 'Socket', null, `Channel closed. Reason - ${reason}`]);\n\n  state.channelOpen = false;\n  Skylink.setSkylinkState(state, roomKey);\n\n  dispatchEvent(channelClose({\n    socketSession: clone(socketSession),\n  }));\n\n  if (inRoom && user && user.sid) {\n    dispatchEvent(sessionDisconnect({\n      peerId: user.sid,\n      peerInfo: PeerData.getCurrentSessionInfo(room),\n    }));\n  }\n};\n\nexport default handleSocketClose;\n","import Skylink from '../../../index';\nimport SkylinkSignalingServer from '../index';\n\nconst closeSocket = (roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { channelOpen } = state;\n  const signaling = new SkylinkSignalingServer();\n\n  if (channelOpen) {\n    if (signaling.socket) {\n      signaling.socket.disconnect();\n    }\n  }\n};\n\nexport default closeSocket;\n","const config = {\n  apiBase: 'https://api.temasys.io',\n  stats: {\n    endPoints: {\n      client: '/client',\n      session: '/session',\n      auth: '/auth',\n      signaling: '/signaling',\n      iceConnection: '/client/iceconnection',\n      iceCandidate: '/client/icecandidate',\n      iceGathering: '/client/icegathering',\n      negotiation: '/client/negotiation',\n      bandwidth: '/client/bandwidth',\n      recording: '/client/recording',\n      dataChannel: '/client/datachannel',\n    },\n  },\n};\n\nconfig.stats.statsBase = `${config.apiBase}/rest/stats`;\n\nexport default config;\n","import appConfig from '../../configs/app';\nimport Skylink from '../index';\nimport logger from '../logger';\nimport MESSAGES from '../messages';\n\n/* eslint-disable class-methods-use-this */\n/**\n * @class\n * @classdesc This class is used to post the stats data.\n * @private\n */\nclass SkylinkStats {\n  constructor() {\n    this.endpoints = appConfig.stats.endPoints;\n    this.stats_buffer = {};\n    this.bufferTimeout = false;\n  }\n\n  postStats(endpoint, data) {\n    const { STATS_MODULE } = MESSAGES;\n    const { fetch } = window;\n\n    try {\n      if (!data.client_id) {\n        return;\n      }\n      const initOptions = Skylink.getInitOptions();\n      const { enableStatsGathering } = initOptions;\n\n      if (enableStatsGathering) {\n        fetch(`${appConfig.stats.statsBase}${endpoint}`, {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        });\n      }\n    } catch (err) {\n      logger.log.WARN(STATS_MODULE.ERRORS.POST_FAILED, err);\n    }\n  }\n\n  addToStatsBuffer(operation, data, url) {\n    if (!this.stats_buffer[operation]) {\n      this.stats_buffer[operation] = {};\n      this.stats_buffer[operation].url = url;\n      this.stats_buffer[operation].data = [];\n    }\n\n    const cloneData = Object.assign({}, data);\n    this.stats_buffer[operation].data.push(cloneData);\n  }\n\n  manageStatsBuffer() {\n    if (!this.bufferTimeout) {\n      this.bufferTimeout = true;\n      setInterval(() => {\n        const operations = Object.keys(this.stats_buffer);\n        for (let i = 0; i < operations.length; i += 1) {\n          if (this.stats_buffer[operations[i]].data.length > 0) {\n            this.postStats(this.stats_buffer[operations[i]].url, this.stats_buffer[operations[i]].data);\n            this.stats_buffer[operations[i]].data = [];\n          }\n        }\n      }, 5000);\n    }\n  }\n}\n\nexport default SkylinkStats;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\n\nclass HandleSignalingStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      state: null,\n      signaling_url: null,\n      signaling_transport: null,\n      attempts: null,\n      error: null,\n    };\n  }\n\n  send(roomKey, state, error) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n    const { socketSession } = roomState;\n\n    this.model.room_id = roomKey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n    this.model.client_id = roomState.clientId;\n    this.model.state = state;\n    this.model.signaling_url = roomState.socketSession.socketServer;\n    this.model.signaling_transport = roomState.socketSession.socketType.toLowerCase();\n    this.model.attempts = socketSession.socketSession.finalAttempts === 0 ? socketSession.socketSession.attempts : (socketSession.socketSession.finalAttempts * 2) + socketSession.socketSession.attempts;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n    this.attempts = typeof error === 'number' ? error : null;\n    this.model.error = (typeof error === 'string' ? error : (error && error.message)) || null;\n\n    this.postStats(this.endpoints.signaling, this.model);\n  }\n}\n\nexport default HandleSignalingStats;\n","import clone from 'clone';\nimport Skylink from '../../../index';\nimport HandleSignalingStats from '../../../skylink-stats/handleSignalingStats';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { channelOpen, channelReopen } from '../../../skylink-events';\nimport { STATES } from '../../../constants';\n\nconst onConnection = (resolve, roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { socketSession } = state;\n\n  new HandleSignalingStats().send(roomKey, STATES.SIGNALING.CONNECT, null);\n\n  if (!state.channelOpen) {\n    state.channelOpen = true;\n    Skylink.setSkylinkState(state, roomKey);\n  }\n\n  if (socketSession.socketSession.finalAttempts !== 0 || socketSession.socketSession.attempts !== 0) {\n    dispatchEvent(channelReopen({\n      socketSession: clone(socketSession),\n    }));\n\n    new HandleSignalingStats().send(roomKey, STATES.SIGNALING.RECONNECT_SUCCESS);\n  } else {\n    dispatchEvent(channelOpen({\n      socketSession: clone(socketSession),\n    }));\n  }\n\n  resolve();\n};\n\nexport default onConnection;\n","import Skylink from '../../../index';\nimport HandleSignalingStats from '../../../skylink-stats/handleSignalingStats';\nimport { handleSocketClose } from '../signaling-server-helpers';\nimport { STATES } from '../../../constants';\n\nconst onDisconnect = (roomKey, reason) => {\n  const state = Skylink.getSkylinkState(roomKey) || Object.values(Skylink.getSkylinkState())[0]; // to handle leaveAllRooms method\n  const isChannelOpen = state.channelOpen;\n  const { room } = state;\n\n  new HandleSignalingStats().send(room.id, STATES.SIGNALING.DISCONNECT, null);\n\n  if (isChannelOpen || (!isChannelOpen && roomKey !== room.roomName)) { // to handle leaveAllRooms method\n    handleSocketClose(room.id, reason);\n  }\n};\n\nexport default onDisconnect;\n","import clone from 'clone';\nimport HandleSignalingStats from '../../../skylink-stats/handleSignalingStats';\nimport Skylink from '../../../index';\nimport logger from '../../../logger/index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { channelError } from '../../../skylink-events/index';\nimport { STATES } from '../../../constants';\n\nconst onError = (roomKey, error) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { socketSession } = state;\n\n  new HandleSignalingStats().send(roomKey, STATES.SIGNALING.ERROR, error);\n\n  logger.log.ERROR([null, 'Socket', null, 'Exception occurred ->'], error);\n\n  dispatchEvent(channelError({\n    error,\n    socketSession: clone(socketSession),\n  }));\n};\n\nexport default onError;\n","import clone from 'clone';\nimport SkylinkSignalingServer from '../index';\nimport Skylink from '../../../index';\nimport HandleSignalingStats from '../../../skylink-stats/handleSignalingStats';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { channelRetry } from '../../../skylink-events/index';\nimport { STATES } from '../../../constants';\n\n// eslint-disable-next-line no-unused-vars\nconst onReconnectAttempt = (roomKey, attempt) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { socketSession } = state;\n  const signaling = new SkylinkSignalingServer();\n  let currentAttempt = 0;\n\n  signaling.updateAttempts(roomKey, 'attempts', attempt);\n\n  if (socketSession.socketSession.finalAttempts === 0) {\n    currentAttempt = attempt;\n  } else {\n    currentAttempt = (socketSession.socketSession.finalAttempts * 2) + socketSession.socketSession.attempts;\n  }\n\n  new HandleSignalingStats().send(roomKey, STATES.SIGNALING.RECONNECT_ATTEMPT, currentAttempt);\n\n  dispatchEvent(channelRetry({\n    fallbackType: socketSession.fallbackType,\n    currentAttempt,\n    session: clone(Skylink.getSkylinkState(roomKey).socketSession),\n  }));\n};\n\nexport default onReconnectAttempt;\n","import clone from 'clone';\nimport Skylink from '../../../index';\nimport { STATES, SOCKET_ERROR } from '../../../constants';\nimport HandleSignalingStats from '../../../skylink-stats/handleSignalingStats';\nimport MESSAGES from '../../../messages';\nimport SkylinkSignalingServer from '../index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { socketError } from '../../../skylink-events';\nimport { DEFAULTS } from '../../../defaults/index';\n\nconst onReconnectFailed = (resolve, reject, roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { socketSession } = state;\n  const signaling = new SkylinkSignalingServer();\n\n  // try next port or transport\n  if (socketSession.socketSession.attempts === DEFAULTS.SOCKET.RECONNECTION_ATTEMPTS.WEBSOCKET && socketSession.socketSession.finalAttempts < DEFAULTS.SOCKET.RECONNECTION_FINAL_ATTEMPTS && !socketSession.socketTimeout) {\n    signaling.socket.connect();\n    signaling.updateAttempts(roomKey, 'attempts', socketSession.socketSession.attempts === DEFAULTS.SOCKET.RECONNECTION_ATTEMPTS.WEBSOCKET ? 0 : socketSession.socketSession.attempts += 1);\n    signaling.updateAttempts(roomKey, 'finalAttempts', socketSession.socketSession.finalAttempts += 1);\n  } else {\n    new HandleSignalingStats().send(roomKey, STATES.SIGNALING.RECONNECT_FAILED, MESSAGES.INIT.ERRORS.SOCKET_ERROR_ABORT);\n\n    dispatchEvent(socketError({\n      session: clone(socketSession),\n      errorCode: SOCKET_ERROR.RECONNECTION_ABORTED,\n      type: socketSession.fallbackType,\n      error: new Error(MESSAGES.INIT.ERRORS.SOCKET_ERROR_ABORT),\n    }));\n\n    reject(new Error(MESSAGES.INIT.ERRORS.SOCKET_ERROR_ABORT));\n  }\n};\n\nexport default onReconnectFailed;\n","import HandleSignalingStats from '../../../skylink-stats/handleSignalingStats';\nimport Skylink from '../../../index';\nimport logger from '../../../logger';\nimport { STATES } from '../../../constants';\n\nconst onReconnectError = (roomKey, error) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { socketSession } = state;\n\n  new HandleSignalingStats().send(roomKey, STATES.SIGNALING.RECONNECT_ERROR, error);\n\n  if (!socketSession.socketTimeout && error ? error === 'timeout' : false) {\n    logger.log.ERROR([null, 'Socket', null, `${socketSession.socketType} connection timed out.`]);\n    socketSession.socketTimeout = true;\n    Skylink.setSkylinkState(state, roomKey);\n  }\n};\n\nexport default onReconnectError;\n","import onConnection from './onconnect';\nimport onDisconnect from './ondisconnect';\nimport onError from './onerror';\nimport onReconnectAttempt from './onreconnectattempt';\nimport onReconnectFailed from './onreconnectfailed';\nimport onReconnectError from './onreconnecterror';\n\nconst callbacks = {\n  onConnection,\n  onDisconnect,\n  onError,\n  onReconnectAttempt,\n  onReconnectFailed,\n  onReconnectError,\n};\n\nexport default callbacks;\n","import { SOCKET_EVENTS } from '../../../constants';\nimport callbacks from '../callbacks';\n\nconst setSocketCallbacks = (roomKey, signaling, resolve, reject) => {\n  signaling.socket.on(SOCKET_EVENTS.CONNECT, callbacks.onConnection.bind(signaling, resolve, roomKey));\n  signaling.socket.on(SOCKET_EVENTS.MESSAGE, signaling.onMessage.bind(signaling));\n  signaling.socket.on(SOCKET_EVENTS.DISCONNECT, callbacks.onDisconnect.bind(signaling, roomKey));\n  signaling.socket.on(SOCKET_EVENTS.ERROR, callbacks.onError.bind(signaling, roomKey));\n  signaling.socket.on(SOCKET_EVENTS.RECONNECT_ATTEMPT, callbacks.onReconnectAttempt.bind(signaling, roomKey));\n  signaling.socket.on(SOCKET_EVENTS.RECONNECT_ERROR, callbacks.onReconnectError.bind(signaling, roomKey));\n  signaling.socket.on(SOCKET_EVENTS.RECONNECT_FAILED, callbacks.onReconnectFailed.bind(signaling, resolve, reject, roomKey));\n};\n\nexport default setSocketCallbacks;\n","import clone from 'clone';\nimport Skylink, { SkylinkEventManager } from '../../../index';\nimport {\n  SIG_MESSAGE_TYPE, EVENTS, HANDSHAKE_PROGRESS, TAGS,\n} from '../../../constants';\nimport { isABoolean, isNull } from '../../../utils/helpers';\nimport logger from '../../../logger';\nimport MESSAGES from '../../../messages';\nimport SkylinkSignalingServer from '../index';\n\nconst isNegotiationTypeMsg = (message) => {\n  const {\n    JOIN_ROOM, ENTER, WELCOME, OFFER, ANSWER, ANSWER_ACK, CANDIDATE, END_OF_CANDIDATES,\n  } = SIG_MESSAGE_TYPE;\n  const negTypeMessages = [JOIN_ROOM, ENTER, WELCOME, OFFER, ANSWER, ANSWER_ACK, CANDIDATE, END_OF_CANDIDATES];\n  return negTypeMessages.indexOf(message.type) > -1;\n};\n\nconst sendBufferedMsg = (state, currentBufferedMsgs) => {\n  const signaling = new SkylinkSignalingServer();\n  for (let i = currentBufferedMsgs.length - 1; i >= 0; i -= 1) {\n    const message = currentBufferedMsgs[i];\n    if (!message.mid) {\n      if (!state.user.sid) {\n        logger.log.DEBUG([state.user.sid, TAGS.SIG_SERVER, null, `${MESSAGES.SIGNALING.BUFFERED_MESSAGES_DROPPED}`]);\n        return;\n      }\n      message.mid = state.user.sid;\n    }\n    signaling.sendMessage(message);\n    currentBufferedMsgs.splice(i, 1);\n  }\n};\n\nconst initAndTrue = value => isABoolean(value) && value;\n\nconst executeCallbackAndRemoveListener = (rid, evt) => {\n  const state = Skylink.getSkylinkState(rid);\n  const { detail } = evt;\n\n  if (detail.state === HANDSHAKE_PROGRESS.ENTER) {\n    const currentBufferedMsgs = clone(state.socketMessageQueue);\n    state.user.bufferMessage = false;\n    state.socketMessageQueue = [];\n    Skylink.setSkylinkState(state, state.room.id);\n\n    logger.log.DEBUG([state.user.sid, TAGS.SIG_SERVER, null, `${MESSAGES.SIGNALING.BUFFERED_MESSAGES_SENT}: ${currentBufferedMsgs.length}`]);\n    sendBufferedMsg(state, currentBufferedMsgs);\n    SkylinkEventManager.removeEventListener(EVENTS.HANDSHAKE_PROGRESS, executeCallbackAndRemoveListener);\n  }\n};\n\nconst shouldBufferMessage = (message) => {\n  const { rid } = message;\n  const updatedState = Skylink.getSkylinkState(rid);\n  const { user, room } = updatedState;\n\n  if ((isNull(user.bufferMessage) || initAndTrue(user.bufferMessage)) && !isNegotiationTypeMsg(message)) {\n    logger.log.DEBUG([user.sid, TAGS.SIG_SERVER, null, MESSAGES.SIGNALING.MESSAGE_ADDED_TO_BUFFER]);\n    updatedState.socketMessageQueue.unshift(message);\n\n    if (!initAndTrue(user.bufferMessage)) {\n      updatedState.user.bufferMessage = true;\n      logger.log.DEBUG([user.sid, TAGS.SIG_SERVER, null, MESSAGES.SIGNALING.ENTER_LISTENER]);\n      SkylinkEventManager.addEventListener(EVENTS.HANDSHAKE_PROGRESS, executeCallbackAndRemoveListener.bind(this, rid));\n    }\n\n    Skylink.setSkylinkState(updatedState, room.id);\n\n    return true;\n  }\n\n  if (message.type === HANDSHAKE_PROGRESS.ENTER && isNull(user.bufferMessage)) {\n    logger.log.DEBUG([user.sid, TAGS.SIG_SERVER, null, MESSAGES.SIGNALING.BUFFER_NOT_NEEDED]);\n    updatedState.user.bufferMessage = false;\n    updatedState.socketMessageQueue = [];\n    Skylink.setSkylinkState(updatedState, updatedState.room.id);\n  }\n\n  return false;\n};\n\nexport default shouldBufferMessage;\n","\nimport * as helpers from './helpers/index';\n\nexport const createSocket = params => helpers.createSocket(params);\n\nexport const processSignalingMessage = (...args) => {\n  helpers.processSignalingMessage(...args);\n};\n\nexport const sendChannelMessage = (socket, message) => {\n  socket.send(JSON.stringify(message));\n};\n\nexport const handleSocketClose = (...args) => {\n  helpers.handleSocketClose(...args);\n};\n\nexport const closeSocket = (...args) => {\n  helpers.closeSocket(...args);\n};\n\nexport const setSocketCallbacks = (...args) => {\n  helpers.setSocketCallbacks(...args);\n};\n\nexport const shouldBufferMessage = (...args) => helpers.shouldBufferMessage(...args);\n","import MESSAGES from '../../../../messages';\nimport logger from '../../../../logger';\nimport { TAGS } from '../../../../constants';\nimport helpers from './index';\n\n/**\n * Method that deletes the encryption secret associated with the given secretId. If the secretId is not provided all encryption secrets are deleted.\n * @param encryptSecrets\n * @param selectedSecretId\n * @param secretId\n * @returns {object}\n * @private\n */\nconst deleteEncryptSecrets = (encryptSecrets, selectedSecretId, secretId) => {\n  const updatedData = {\n    encryptSecrets,\n    selectedSecretId,\n  };\n\n  if (secretId) {\n    if (!updatedData.encryptSecrets[secretId]) {\n      throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRET_ID_NOT_FOUND);\n    }\n\n    // selectedSecretId should be set to default if there are no encryptSecrets stored\n    if (updatedData.selectedSecretId === secretId) {\n      updatedData.selectedSecretId = helpers.setSelectedSecretId();\n    }\n\n    delete updatedData.encryptSecrets[secretId];\n  } else {\n    logger.log.DEBUG([null, TAGS.ENCRYPTED_MESSAGING, null, `${MESSAGES.MESSAGING.ENCRYPTION.DELETE_ALL}`]);\n    updatedData.selectedSecretId = helpers.setSelectedSecretId();\n    updatedData.encryptSecrets = {};\n  }\n\n  return updatedData;\n};\n\nexport default deleteEncryptSecrets;\n","import MESSAGES from '../../../../messages';\nimport helpers from './index';\n\nconst isValidSecret = (secret) => {\n  if (!secret) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.NO_SECRET_OR_SECRET_ID);\n  }\n\n  if (!helpers.utils.isValidString(secret)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.INVALID_TYPE);\n  }\n\n  return true;\n};\n\nconst isValidSecretId = (secretId, updatedEncryptSecrets) => {\n  if (!secretId) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.NO_SECRET_OR_SECRET_ID);\n  }\n\n  if (!helpers.utils.isValidString(secretId)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.INVALID_TYPE);\n  }\n\n  if (helpers.utils.isExisting(secretId, updatedEncryptSecrets)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRET_ID_NOT_UNIQUE);\n  }\n\n  return true;\n};\n\n\n// eslint-disable-next-line consistent-return\nconst setEncryptSecret = (encryptSecrets, secret, secretId) => {\n  const updatedEncryptSecrets = encryptSecrets;\n\n  if (isValidSecret(secret) && isValidSecretId(secretId, updatedEncryptSecrets)) {\n    updatedEncryptSecrets[secretId] = secret;\n    return updatedEncryptSecrets;\n  }\n};\n\nexport default setEncryptSecret;\n","import CryptoJS from 'crypto-js';\nimport { isAString, isEmptyObj, isEmptyString } from '../../../../utils/helpers';\nimport MESSAGES from '../../../../messages';\nimport logger from '../../../../logger';\nimport { TAGS } from '../../../../constants';\n\nconst isExisting = (encryptionParam, updatedEncryptSecrets) => {\n  const duplicates = Object.keys(updatedEncryptSecrets).filter(id => id === encryptionParam);\n  return duplicates.length > 0;\n};\n\n// conditions for encryption - encryptSecrets must not be empty obj AND selected secret must not be empty string\nconst canEncrypt = (selectedSecretId, encryptSecrets) => {\n  if (isEmptyObj(encryptSecrets) && isEmptyString(selectedSecretId)) {\n    throw new Error(`${MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRETS_NOT_PROVIDED}, ${MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRET_ID_NOT_PROVIDED}`);\n  } else if (isEmptyString(selectedSecretId)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRET_ID_NOT_SELECTED);\n  } else if (isEmptyObj(encryptSecrets)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRETS_NOT_PROVIDED);\n  }\n\n  return true;\n};\n\n// conditions for decryption - encrypt secrets must not be empty obj\nconst canDecrypt = (encryptSecrets) => {\n  if (isEmptyObj(encryptSecrets)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRETS_NOT_PROVIDED);\n  }\n\n  return true;\n};\n\nconst isValidString = (encryptionParam) => {\n  if (!isAString(encryptionParam) || !isAString(encryptionParam) || isEmptyString(encryptionParam)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.INVALID_TYPE);\n  }\n\n  return true;\n};\n\nconst hasCrypto = () => {\n  if (!CryptoJS) {\n    logger.log.ERROR([null, TAGS.ASYNC_MESSAGING, null, MESSAGES.PERSISTENT_MESSAGE.ERRORS.NO_DEPENDENCY]);\n    return false;\n  }\n\n  return CryptoJS;\n};\n\nconst utils = {\n  isExisting,\n  isValidString,\n  hasCrypto,\n  canEncrypt,\n  canDecrypt,\n};\n\nexport default utils;\n","import helpers from './index';\nimport MESSAGES from '../../../../messages';\n\nconst setSelectedSecretId = (encryptSecrets, secretId) => {\n  if (!secretId) {\n    return '';\n  }\n\n  if (!helpers.utils.isValidString(secretId)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.INVALID_TYPE);\n  }\n\n  if (!encryptSecrets[secretId]) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRET_ID_NOT_FOUND);\n  }\n\n  return secretId;\n};\n\nexport default setSelectedSecretId;\n","import { isAString, isEmptyArray } from '../../../utils/helpers';\nimport logger from '../../../logger';\nimport { PEER_TYPE, TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\n\nconst getMessageConfig = (roomState, targetPeerId) => {\n  const {\n    peerInformations,\n    inRoom,\n    user,\n  } = roomState;\n  let listOfPeers;\n  let isPrivate = false;\n\n  if (!inRoom || !user) {\n    throw Error(MESSAGES.ROOM.ERRORS.NOT_IN_ROOM);\n  }\n\n  if (Array.isArray(targetPeerId) && !isEmptyArray(targetPeerId)) {\n    listOfPeers = targetPeerId;\n    isPrivate = true;\n  } else if (targetPeerId && isAString(targetPeerId)) {\n    listOfPeers = [targetPeerId];\n    isPrivate = true;\n  } else {\n    listOfPeers = Object.keys(peerInformations);\n  }\n\n  listOfPeers.forEach((peerId, i) => {\n    if (!peerInformations[peerId]) {\n      logger.log.WARN([peerId, TAGS.MESSAGING, null, `${MESSAGES.MESSAGING.ERRORS.DROPPING_MESSAGE} - ${MESSAGES.PEER_CONNECTION.NO_PEER_CONNECTION}`]);\n      listOfPeers.splice(i, 1);\n    } else if (peerId === PEER_TYPE.MCU) {\n      listOfPeers.splice(i, 1);\n    }\n  });\n\n  if (listOfPeers.length === 0) {\n    logger.log.WARN([null, TAGS.MESSAGING, null, MESSAGES.PEER_CONNECTION.NO_PEER_CONNECTION]);\n  }\n\n  return { listOfPeers, isPrivate };\n};\n\nexport default getMessageConfig;\n","import SkylinkSignalingServer from '../../../server-communication/signaling-server';\nimport messagingHelpers from './index';\n\nconst sendMessageToSig = (roomState, config, message, encryptedMessage = '', targetPeerId) => {\n  const signaling = new SkylinkSignalingServer();\n  signaling.sendUserMessage(roomState, config, encryptedMessage || message);\n  messagingHelpers.dispatchOnIncomingMessage(roomState, config, message, true, targetPeerId);\n};\n\nexport default sendMessageToSig;\n","import { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { onIncomingMessage } from '../../../skylink-events';\nimport { generateISOStringTimesStamp } from '../../../utils/helpers';\nimport PeerData from '../../../peer-data';\nimport logger from '../../../logger';\nimport { TAGS } from '../../../constants';\nimport MESSAGES from '../../../messages';\n\n// if isSelf = true, targetPeerId is the peer id targeted in sendMessage\n// else targetPeerId is the targetMid of the incoming sig msg\nconst dispatchOnIncomingMessage = (roomState, config, messageContent, isSelf, targetPeerId) => {\n  const { room, user } = roomState;\n\n  logger.log.DEBUG([isSelf ? null : targetPeerId, TAGS.MESSAGING, null, `${MESSAGES.MESSAGING.RECEIVED_MESSAGE} - isPrivate: ${config.isPrivate}`]);\n  const message = {\n    // eslint-disable-next-line no-nested-ternary\n    targetPeerId: isSelf ? (config.isPrivate ? targetPeerId : null) : user.sid,\n    content: messageContent,\n    senderPeerId: isSelf ? user.sid : targetPeerId,\n    isDataChannel: false,\n    isPrivate: config.isPrivate,\n    timeStamp: generateISOStringTimesStamp(),\n  };\n\n  if (isSelf) {\n    message.listOfPeers = config.listOfPeers;\n  }\n\n  dispatchEvent(onIncomingMessage({\n    room,\n    message,\n    isSelf,\n    peerId: isSelf ? user.sid : targetPeerId,\n    peerInfo: isSelf ? PeerData.getCurrentSessionInfo(room) : PeerData.getPeerInfo(targetPeerId, room),\n  }));\n};\n\nexport default dispatchOnIncomingMessage;\n","import logger from '../logger';\nimport { TAGS } from '../constants';\n\nclass SkylinkError {\n  static throwError(errorLog = '', message = '') {\n    logger.log.ERROR([null, TAGS.SKYLINK_ERROR, null, `${errorLog}${(message ? ` - ${message}` : '')}`]);\n    throw new Error(`${errorLog}${(message ? ` - ${message}` : '')}`);\n  }\n}\n\nexport default SkylinkError;\n","import SkylinkError from '../../../utils/skylinkError';\nimport messagingHelpers from './index';\nimport MESSAGES from '../../../messages';\n\nconst trySendMessage = (roomState, message, targetPeerId) => {\n  try {\n    const config = messagingHelpers.getMessageConfig(roomState, targetPeerId);\n    messagingHelpers.sendMessageToSig(roomState, config, message, null, targetPeerId);\n  } catch (error) {\n    SkylinkError.throwError(MESSAGES.MESSAGING.ERRORS.FAILED_SENDING_MESSAGE);\n  }\n};\n\nexport default trySendMessage;\n","import getMessageConfig from './getMessageConfig';\nimport sendMessageToSig from './sendMessageToSig';\nimport dispatchOnIncomingMessage from './dispatchOnIncomingMessage';\nimport trySendMessage from './trySendMessage';\n\nconst helpers = {\n  getMessageConfig,\n  sendMessageToSig,\n  dispatchOnIncomingMessage,\n  trySendMessage,\n};\n\nexport default helpers;\n","import messagingHelpers from '../../helpers/index';\nimport encryptHelpers from './index';\n\nconst getMessageConfig = (roomState, targetPeerId, encryptSecrets, selectedSecretId, isPersistent) => {\n  const config = messagingHelpers.getMessageConfig(roomState, targetPeerId);\n\n  if (encryptHelpers.utils.hasCrypto() && encryptHelpers.utils.canEncrypt(selectedSecretId, encryptSecrets)) {\n    config.secretId = selectedSecretId;\n  }\n\n  if (isPersistent) {\n    config.isPersistent = isPersistent;\n  }\n\n  return config;\n};\n\nexport default getMessageConfig;\n","import CryptoJS from 'crypto-js';\nimport MESSAGES from '../../../../messages';\n\nconst encryptMessage = (message, secret, decrypt = false) => {\n  if (decrypt) {\n    try {\n      const decipher = CryptoJS.AES.decrypt(message, secret);\n\n      return decipher.toString(CryptoJS.enc.Utf8);\n    } catch (error) {\n      throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.ENCRYPT_SECRET);\n    }\n  }\n\n  const cipher = CryptoJS.AES.encrypt(message, secret);\n\n  return cipher.toString();\n};\n\nexport default encryptMessage;\n","import encryptHelpers from './index';\nimport { isEmptyString } from '../../../../utils/helpers';\nimport MESSAGES from '../../../../messages';\n\nconst tryDecryptMessage = (message, secretId, encryptSecrets) => {\n  const decryptedMessage = encryptHelpers.encryptMessage(message, encryptSecrets[secretId], true);\n  if (isEmptyString(decryptedMessage)) {\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.ENCRYPT_SECRET);\n  } else {\n    return decryptedMessage;\n  }\n};\n\nexport default tryDecryptMessage;\n","import deleteEncryptSecrets from './deleteEncryptSecrets';\nimport setEncryptSecret from './setEncryptSecrets';\nimport utils from './utils';\nimport setSelectedSecretId from './setSelectedSecretId';\nimport getMessageConfig from './getMessageConfig';\nimport encryptMessage from './encryptMessage';\nimport tryDecryptMessage from './tryDecryptMessage';\n\nconst helpers = {\n  deleteEncryptSecrets,\n  setEncryptSecret,\n  setSelectedSecretId,\n  utils,\n  getMessageConfig,\n  encryptMessage,\n  tryDecryptMessage,\n};\n\nexport default helpers;\n","import encryptHelpers from './helpers/index';\nimport messagingHelpers from '../helpers/index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { encryptionSecretsUpdated } from '../../../skylink-events';\nimport MESSAGES from '../../../messages';\nimport getUserInfo from '../../../peer-data/helpers/getUserInfo';\nimport { getParamValidity, getRoomStateByName } from '../../../utils/helpers';\nimport SkylinkError from '../../../utils/skylinkError';\nimport logger from '../../../logger';\nimport { TAGS } from '../../../constants';\n\nconst instance = {};\n/**\n * @classdesc Class used for handling encryption\n * @class\n * @private\n */\nclass EncryptedMessaging {\n  constructor(roomState) {\n    const { room, user } = roomState;\n\n    if (!instance[room.id]) {\n      instance[room.id] = this;\n    }\n\n    this.room = room;\n    this.peerId = user.sid;\n\n    /**\n     * The secret id and encrypt secret key-value pair.\n     * @type {Object|{}}\n     */\n    this.encryptSecrets = {};\n\n    /**\n     * The selected secret id.\n     * @type {String}\n     */\n    this.selectedSecretId = '';\n\n    return instance[room.id];\n  }\n\n  setEncryptSecret(secret, secretId) {\n    try {\n      this.encryptSecrets = encryptHelpers.setEncryptSecret(this.encryptSecrets, secret, secretId);\n      this.dispatchEncryptSecretEvent();\n    } catch (error) {\n      SkylinkError.throwError(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SET_ENCRYPT_SECRET, error.message);\n    }\n  }\n\n  getEncryptSecrets() {\n    return this.encryptSecrets;\n  }\n\n  deleteEncryptSecrets(secretId) {\n    try {\n      const updatedData = encryptHelpers.deleteEncryptSecrets(this.encryptSecrets, this.selectedSecretId, secretId);\n      this.encryptSecrets = updatedData.encryptSecrets;\n      this.selectedSecretId = updatedData.selectedSecretId;\n      this.dispatchEncryptSecretEvent();\n    } catch (error) {\n      SkylinkError.throwError(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.DELETE_ENCRYPT_SECRETS, error.message);\n    }\n  }\n\n  setSelectedSecretId(secretId) {\n    try {\n      this.selectedSecretId = encryptHelpers.setSelectedSecretId(this.encryptSecrets, secretId);\n      this.dispatchEncryptSecretEvent();\n    } catch (error) {\n      SkylinkError.throwError(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SET_SELECTED_SECRET, error.message);\n    }\n  }\n\n  getSelectedSecretId() {\n    return this.selectedSecretId;\n  }\n\n  dispatchEncryptSecretEvent() {\n    dispatchEvent(encryptionSecretsUpdated({\n      room: this.room,\n      encryptSecrets: this.encryptSecrets,\n      selectedSecretId: this.selectedSecretId,\n      peerInfo: getUserInfo(this.room),\n      peerId: this.peerId,\n    }));\n  }\n\n  canEncrypt(throwError) {\n    try {\n      if (encryptHelpers.utils.canEncrypt(this.selectedSecretId, this.encryptSecrets)) {\n        return encryptHelpers.utils.isValidString(this.selectedSecretId) && encryptHelpers.utils.isValidString(this.encryptSecrets[this.selectedSecretId]);\n      }\n\n      return false;\n    } catch (err) {\n      if (throwError) {\n        throw new Error(err.message);\n      }\n      return false;\n    }\n  }\n\n  decryptStoredMessages(message, secretId) {\n    if (encryptHelpers.utils.canEncrypt(secretId, this.encryptSecrets) && !Object.keys(this.encryptSecrets).filter(key => key === secretId).length) {\n      throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.SECRET_ID_NOT_FOUND);\n    }\n\n    return this.decryptMessage(message, secretId);\n  }\n\n  decryptMessage(message, secretId = '') {\n    if (secretId && encryptHelpers.utils.canDecrypt(this.encryptSecrets)) {\n      return encryptHelpers.tryDecryptMessage(message, secretId, this.encryptSecrets);\n    }\n\n    throw new Error(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.INVALID_SECRETS);\n  }\n\n  sendMessage(roomName, message, targetPeerId, isPersistent = false) {\n    const roomState = getRoomStateByName(roomName);\n    if (getParamValidity(message, 'message', 'sendMessage') && roomState) {\n      try {\n        logger.log.DEBUG([null, TAGS.ASYNC_MESSAGING, null, MESSAGES.MESSAGING.ENCRYPTION.SEND_MESSAGE]);\n        const config = encryptHelpers.getMessageConfig(roomState, targetPeerId, this.encryptSecrets, this.selectedSecretId, isPersistent);\n        const encryptedMessage = encryptHelpers.encryptMessage(message, this.encryptSecrets[this.selectedSecretId]);\n        messagingHelpers.sendMessageToSig(roomState, config, message, encryptedMessage, targetPeerId);\n      } catch (error) {\n        SkylinkError.throwError(MESSAGES.MESSAGING.ERRORS.DROPPING_MESSAGE, error.message);\n      }\n    }\n  }\n\n  static deleteEncryptedInstance(room) {\n    delete instance[room.id];\n  }\n}\n\nexport default EncryptedMessaging;\n","import encryptHelpers from '../../encrypted-messaging/helpers';\n\nconst getMessageConfig = (roomState, targetPeerId) => {\n  const config = encryptHelpers.getMessageConfig(roomState, targetPeerId);\n  config.isPersistent = true;\n\n  return config;\n};\n\nexport default getMessageConfig;\n","import { parseUNIXTimeStamp } from '../../../../utils/helpers';\n\nconst parseDecryptedMessageData = (message, targetMid) => ({\n  targetPeerId: targetMid,\n  senderPeerId: message.mid,\n  content: message.data,\n  timeStamp: parseUNIXTimeStamp(message.timeStamp),\n  isPrivate: false,\n  isDataChannel: false,\n});\n\nexport default parseDecryptedMessageData;\n","import getMessageConfig from './getMessageConfig';\nimport parseDecryptedMessageData from './parseDecryptedMessageData';\n\nconst helpers = {\n  getMessageConfig,\n  parseDecryptedMessageData,\n};\n\nexport default helpers;\n","import { TAGS } from '../../../constants';\nimport logger from '../../../logger';\nimport MESSAGES from '../../../messages';\nimport SkylinkSignalingServer from '../../../server-communication/signaling-server';\nimport {\n  getParamValidity, getRoomStateByName, isABoolean, isEmptyArray,\n} from '../../../utils/helpers';\nimport SkylinkError from '../../../utils/skylinkError';\nimport Skylink from '../../../index';\nimport EncryptedMessaging from '../encrypted-messaging';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { storedMessages, persistentMessageState } from '../../../skylink-events';\nimport PeerData from '../../../peer-data';\nimport asyncHelpers from './helpers/index';\nimport getUserInfo from '../../../peer-data/helpers/getUserInfo';\n\nconst instance = {};\n\n/**\n * @classdesc Class used for handling the asynchronous messaging feature\n * @class\n * @private\n */\nclass AsyncMessaging {\n  constructor(roomState) {\n    const { user, room, hasPersistentMessage } = roomState;\n\n    if (!instance[room.id]) {\n      instance[room.id] = this;\n    }\n\n    this.room = room;\n    this.peerId = user.sid;\n    this.isPersistent = hasPersistentMessage; // Value defaults to hasPersistentMessage\n    this.hasPersistentMessage = hasPersistentMessage;\n\n    return instance[room.id];\n  }\n\n  setMessagePersistence(isPersistent) {\n    if (!isABoolean(isPersistent)) {\n      throw SkylinkError.throwError(MESSAGES.MESSAGING.PERSISTENCE.ERRORS.FAILED_SETTING_PERSISTENCE, MESSAGES.MESSAGING.PERSISTENCE.ERRORS.INVALID_TYPE);\n    } else if (!this.hasPersistentMessage) {\n      this.isPersistent = isPersistent;\n      throw SkylinkError.throwError(MESSAGES.MESSAGING.PERSISTENCE.ERRORS.PERSISTENT_MESSAGE_FEATURE_NOT_ENABLED);\n    }\n\n    this.isPersistent = isPersistent;\n\n    dispatchEvent(persistentMessageState({\n      room: this.room,\n      isPersistent: this.isPersistent,\n      peerInfo: getUserInfo(this.room),\n      peerId: this.peerId,\n    }));\n  }\n\n  getMessagePersistence() {\n    return this.isPersistent;\n  }\n\n  sendMessage(roomName, message, targetPeerId) {\n    const roomState = getRoomStateByName(roomName);\n    const isPublicMessage = !targetPeerId || (Array.isArray(targetPeerId) && isEmptyArray(targetPeerId));\n    if (getParamValidity(message, 'message', 'sendMessage') && roomState) {\n      try {\n        logger.log.DEBUG([null, TAGS.ASYNC_MESSAGING, null, MESSAGES.MESSAGING.PERSISTENCE.SEND_MESSAGE]);\n        const encryptedMessaging = new EncryptedMessaging(roomState);\n        if (!isPublicMessage) {\n          throw new Error(MESSAGES.MESSAGING.PERSISTENCE.ERRORS.PRIVATE_MESSAGE);\n        }\n\n        if (encryptedMessaging.canEncrypt(true)) {\n          encryptedMessaging.sendMessage(roomName, message, targetPeerId, this.isPersistent);\n        }\n      } catch (error) {\n        SkylinkError.throwError(MESSAGES.MESSAGING.ERRORS.DROPPING_MESSAGE, error.message);\n      }\n    }\n  }\n\n  getStoredMessages() {\n    const roomState = Skylink.getSkylinkState(this.room.id);\n    if (!this.hasPersistentMessage) {\n      logger.log.WARN([this.peerId, TAGS.ASYNC_MESSAGING, null, `${MESSAGES.MESSAGING.PERSISTENCE.ERRORS.PERSISTENT_MESSAGE_FEATURE_NOT_ENABLED}`]);\n      return;\n    }\n\n    new SkylinkSignalingServer().getStoredMessages(roomState);\n  }\n\n  canPersist() {\n    if (this.hasPersistentMessage) {\n      if (this.isPersistent) {\n        return true;\n      }\n\n      logger.log.DEBUG([null, TAGS.ASYNC_MESSAGING, null, MESSAGES.MESSAGING.PERSISTENCE.NOT_PERSISTED]);\n      return false;\n    }\n\n    if (this.isPersistent) {\n      logger.log.DEBUG([null, TAGS.ASYNC_MESSAGING, null, `${MESSAGES.MESSAGING.PERSISTENCE.IS_PERSISTENT_CONFIG} ${this.isPersistent}`]);\n      throw new Error(MESSAGES.MESSAGING.PERSISTENCE.ERRORS.PERSISTENT_MESSAGE_FEATURE_NOT_ENABLED);\n    }\n\n    return false;\n  }\n\n  static processStoredMessages(message) {\n    const roomState = Skylink.getSkylinkState(message.rid);\n    const { room } = roomState;\n    const targetMid = message.mid;\n    const messageData = JSON.parse(message.data);\n    const encryptedMessaging = new EncryptedMessaging(roomState);\n    const messages = [];\n\n    logger.log.DEBUG([targetMid, TAGS.ASYNC_MESSAGING, null, MESSAGES.MESSAGING.PERSISTENCE.STORED_MESSAGES], messageData);\n\n    try {\n      for (let i = 0; i < messageData.length; i += 1) {\n        messageData[i].data = encryptedMessaging.decryptStoredMessages(messageData[i].data, messageData[i].secretId);\n        messages.push(asyncHelpers.parseDecryptedMessageData(messageData[i], targetMid));\n      }\n    } catch (error) {\n      throw SkylinkError.throwError(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.FAILED_DECRYPTING_MESSAGE, error.message);\n    }\n\n    dispatchEvent(storedMessages({\n      room,\n      storedMessages: messages,\n      isSelf: false,\n      peerId: targetMid,\n      peerInfo: PeerData.getPeerInfo(targetMid, room),\n    }));\n  }\n\n  static deleteAsyncInstance(room) {\n    delete instance[room.id];\n  }\n}\n\nexport default AsyncMessaging;\n","import {\n  getParamValidity, getRoomStateByName, isABoolean,\n} from '../../utils/helpers';\nimport PeerConnection from '../../peer-connection';\nimport MESSAGES from '../../messages';\nimport EncryptedMessaging from './encrypted-messaging';\nimport AsyncMessaging from './async-messaging';\nimport messagingHelpers from './helpers';\nimport Skylink from '../../index';\nimport SkylinkError from '../../utils/skylinkError';\n\n/**\n * @classdesc Class that manages the messaging feature\n * @class\n * @private\n */\nclass Messaging {\n  static sendMessage(roomName, message, targetPeerId) {\n    const roomState = getRoomStateByName(roomName);\n    if (getParamValidity(message, 'message', 'sendMessage') && roomState) {\n      const encryptedMessaging = new EncryptedMessaging(roomState);\n      const asyncMessaging = new AsyncMessaging(roomState);\n      if (asyncMessaging.canPersist()) {\n        asyncMessaging.sendMessage(roomName, message, targetPeerId);\n      } else if (encryptedMessaging.canEncrypt()) {\n        encryptedMessaging.sendMessage(roomName, message, targetPeerId);\n      } else {\n        messagingHelpers.trySendMessage(roomState, message, targetPeerId);\n      }\n    }\n  }\n\n  static sendP2PMessage(roomName, message, targetPeerId) {\n    const roomState = getRoomStateByName(roomName);\n    if (getParamValidity(message, 'message', 'sendP2PMessage') && roomState) {\n      PeerConnection.sendP2PMessage(roomName, message, targetPeerId);\n    }\n  }\n\n  static processMessage(message, isPublic) {\n    const {\n      mid,\n      target,\n      rid,\n      secretId,\n      data,\n    } = message;\n    const roomState = Skylink.getSkylinkState(rid);\n    const targetMid = mid;\n\n    let messageData = data;\n    if (secretId) {\n      try {\n        const encryptedMessaging = new EncryptedMessaging(roomState);\n        messageData = encryptedMessaging.decryptMessage(data, secretId);\n      } catch (error) {\n        SkylinkError.throwError(MESSAGES.MESSAGING.ENCRYPTION.ERRORS.FAILED_DECRYPTING_MESSAGE, error.message);\n      }\n    }\n\n    messagingHelpers.dispatchOnIncomingMessage(roomState, { isPrivate: isABoolean(isPublic) ? !isPublic : !!target }, messageData, false, targetMid);\n  }\n}\n\nexport default Messaging;\n","import Messaging from '../../../../features/messaging';\n\nconst userMessageHandler = (message, isPublic) => {\n  Messaging.processMessage(message, isPublic);\n};\n\nexport default userMessageHandler;\n","import MESSAGES from '../messages';\nimport logger from '../logger';\nimport { READY_STATE_CHANGE_ERROR } from '../constants';\n\n/**\n * @private\n * @description Checks for the dependencies required for SkylinkJS\n * @memberOf module:Compatibility\n * @return {{fulfilled: boolean, message: string}}\n */\nconst validateDepencies = () => {\n  const dependencies = {\n    fulfilled: true,\n    message: '',\n  };\n  const { AdapterJS, io, fetch } = window;\n  if (typeof (AdapterJS || window.AdapterJS || window.AdapterJS || {}).webRTCReady !== 'function') {\n    dependencies.message = MESSAGES.INIT.ERRORS.NO_ADAPTER;\n    dependencies.fulfilled = false;\n    dependencies.readyStateChangeErrorCode = READY_STATE_CHANGE_ERROR.ADAPTER_NO_LOADED;\n  } else if (!(io || window.io)) {\n    dependencies.message = MESSAGES.INIT.ERRORS.NO_SOCKET_IO;\n    dependencies.fulfilled = false;\n    dependencies.readyStateChangeErrorCode = READY_STATE_CHANGE_ERROR.NO_SOCKET_IO;\n  } else if (!fetch || !window.fetch) {\n    dependencies.message = MESSAGES.INIT.ERRORS.NO_FETCH_SUPPORT;\n    dependencies.fulfilled = false;\n    dependencies.readyStateChangeErrorCode = READY_STATE_CHANGE_ERROR.NO_XMLHTTPREQUEST_SUPPORT;\n  }\n  if (!dependencies.fulfilled) {\n    logger.log.ERROR(['Validating Dependencies', null, null, dependencies.message]);\n  }\n  return dependencies;\n};\n\nexport default validateDepencies;\n","/**\n * @description Gets TCP and UDP ports based on the browser\n * @param {Object} params\n * @param {boolean} params.forceTURNSSL\n * @param {boolean} params.enableTURNServer\n * @param {enum} params.CONSTANTS\n * @memberOf module:Compatibility\n * @return {{tcp: Array, udp: Array, both: Array, iceServerProtocol: string}}\n */\nconst getConnectionPortsAndProtocolByBrowser = (params) => {\n  const { forceTURNSSL, CONSTANTS, serverConfig } = params;\n  const { AdapterJS } = window;\n  const connectionConfig = {\n    tcp: serverConfig.iceServerPorts.tcp,\n    udp: serverConfig.iceServerPorts.udp,\n    both: serverConfig.iceServerPorts.both,\n    iceServerProtocol: serverConfig.iceServerProtocol,\n    iceServerPorts: serverConfig.iceServerPorts,\n  };\n\n  if (AdapterJS.webrtcDetectedBrowser === 'edge') {\n    connectionConfig.tcp = [];\n    connectionConfig.udp = [3478];\n    connectionConfig.iceServerPorts.both = [];\n    connectionConfig.iceServerProtocol = CONSTANTS.TURN;\n  } else if (forceTURNSSL) {\n    if (AdapterJS.webrtcDetectedBrowser === 'firefox' && AdapterJS.webrtcDetectedVersion < 53) {\n      connectionConfig.udp = [];\n      connectionConfig.tcp = [443];\n      connectionConfig.both = [];\n      connectionConfig.iceServerProtocol = CONSTANTS.TURN;\n    } else {\n      connectionConfig.iceServerPorts.udp = [];\n      connectionConfig.iceServerProtocol = 'turns';\n    }\n  } else if (AdapterJS.webrtcDetectedBrowser === 'firefox') {\n    connectionConfig.udp = [3478];\n    connectionConfig.tcp = [443, 80];\n    connectionConfig.both = [];\n  }\n\n  return connectionConfig;\n};\n\nexport default getConnectionPortsAndProtocolByBrowser;\n","/**\n * @description Function that updates the removeStream method for Firefox.\n * @param peerConnection\n * @return {Function}\n * @memberOf module:Compatibility\n */\nconst updateRemoveStream = (peerConnection) => {\n  const { getSenders, removeTrack } = peerConnection;\n\n  return (stream) => {\n    const { getTracks } = stream;\n    const senders = getSenders();\n\n    for (let s = 0; s < senders.length; s += 1) {\n      const tracks = getTracks();\n      for (let t = 0; t < tracks.length; t += 1) {\n        if (tracks[t] === senders[s].track) {\n          removeTrack(senders[s]);\n        }\n      }\n    }\n  };\n};\n\nexport default updateRemoveStream;\n","import { getConnectionPortsAndProtocolByBrowser } from '../../compatibility/index';\nimport { TURN_TRANSPORT } from '../../constants';\nimport Skylink from '../../index';\n\nconst defaultIceServerPorts = {\n  udp: [3478, 19302, 19303, 19304],\n  tcp: [80, 443],\n  both: [19305, 19306, 19307, 19308],\n};\n\nconst CONSTANTS = {\n  STUN: 'stun',\n  TURN: 'turn',\n  TEMASYS: 'temasys',\n  DEFAULT_TURN_SERVER: 'turn.temasys.io',\n  TCP: 'TCP',\n  UDP: 'UDP',\n};\n\nconst userIceServer = (iceServer, serverConfig) => {\n  const { urls } = iceServer;\n  return [{\n    urls,\n    username: serverConfig.iceServers[1].username || null,\n    credential: serverConfig.iceServers[1].credential || null,\n  }];\n};\n\nconst getConnectionPortsByTurnTransport = (params) => {\n  const {\n    TURNServerTransport,\n    forceTURNSSL,\n    udp,\n    tcp,\n    both,\n  } = params;\n  const ports = {\n    udp: [],\n    tcp: [],\n    both: [],\n  };\n  if (TURNServerTransport === TURN_TRANSPORT.UDP && !forceTURNSSL) {\n    ports.udp = udp.concat(both);\n    ports.tcp = [];\n    ports.both = [];\n  } else if (TURNServerTransport === TURN_TRANSPORT.TCP) {\n    ports.tcp = tcp.concat(both);\n    ports.udp = [];\n    ports.both = [];\n  } else if (TURNServerTransport === TURN_TRANSPORT.NONE) {\n    ports.tcp = [];\n    ports.udp = [];\n  } else {\n    ports.tcp = tcp;\n    ports.udp = udp;\n    ports.both = both;\n  }\n  return ports;\n};\n\nconst getIceServerPorts = () => defaultIceServerPorts;\n\n/**\n * @param {RTCIceServer[]} servers - The list of IceServers passed | {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer}\n * @memberOf IceConnectionHelpers\n * @private\n * @return {filteredIceServers}\n */\nconst setIceServers = (servers) => {\n  const initOptions = Skylink.getInitOptions();\n  const serverConfig = {\n    iceServerName: null,\n    iceServerPorts: getIceServerPorts(),\n    iceServerProtocol: CONSTANTS.STUN,\n    iceServers: [{ urls: [] }, { urls: [] }],\n  };\n\n  const {\n    iceServer,\n    enableTURNServer,\n    forceTURNSSL,\n    TURNServerTransport,\n    enableSTUNServer,\n    usePublicSTUN,\n  } = initOptions;\n\n  servers.forEach((server) => {\n    if (server.url.indexOf(`${CONSTANTS.STUN}:`) === 0) {\n      if (server.url.indexOf(`${CONSTANTS.TEMASYS}`) > 0) {\n        // server[?transport=xxx]\n        serverConfig.iceServerName = (server.url.split(':')[1] || '').split('?')[0] || null;\n      } else {\n        serverConfig.iceServers[0].urls.push(server.url);\n      }\n    } else if (server.url.indexOf('turn:') === 0 && server.url.indexOf('@') > 0 && server.credential && !(serverConfig.iceServers[1].username || serverConfig.iceServers[1].credential)) {\n      /* eslint-disable prefer-destructuring */\n      const parts = server.url.split(':');\n      const urlParts = (parts[1] || '').split('@');\n      serverConfig.iceServerName = (urlParts[1] || '').split('?')[0];\n      serverConfig.iceServers[1].username = urlParts[0];\n      serverConfig.iceServers[1].credential = server.credential;\n      serverConfig.iceServerProtocol = CONSTANTS.TURN;\n    }\n  });\n\n  if (iceServer) {\n    return { iceServers: userIceServer(iceServer, serverConfig) };\n  }\n\n  serverConfig.iceServerName = serverConfig.iceServerName || CONSTANTS.DEFAULT_TURN_SERVER;\n\n  if (serverConfig.iceServerProtocol === CONSTANTS.TURN && !enableTURNServer && !forceTURNSSL) {\n    serverConfig.iceServerProtocol = CONSTANTS.STUN;\n  } else {\n    const connectionPortsAndProtocolByBrowser = getConnectionPortsAndProtocolByBrowser({\n      forceTURNSSL,\n      enableTURNServer,\n      CONSTANTS,\n      serverConfig,\n    });\n    serverConfig.iceServerPorts.tcp = connectionPortsAndProtocolByBrowser.tcp;\n    serverConfig.iceServerPorts.udp = connectionPortsAndProtocolByBrowser.udp;\n    serverConfig.iceServerPorts.both = connectionPortsAndProtocolByBrowser.both;\n    serverConfig.iceServerProtocol = connectionPortsAndProtocolByBrowser.iceServerProtocol;\n  }\n\n  const connectionPortsByTurnTransport = getConnectionPortsByTurnTransport({\n    forceTURNSSL,\n    TURNServerTransport,\n    udp: serverConfig.iceServerPorts.udp,\n    tcp: serverConfig.iceServerPorts.tcp,\n    both: serverConfig.iceServerPorts.both,\n  });\n\n  serverConfig.iceServerPorts.tcp = connectionPortsByTurnTransport.tcp;\n  serverConfig.iceServerPorts.udp = connectionPortsByTurnTransport.udp;\n  serverConfig.iceServerPorts.both = connectionPortsByTurnTransport.both;\n\n  if (serverConfig.iceServerProtocol === CONSTANTS.STUN) {\n    serverConfig.iceServerPorts.tcp = [];\n  }\n\n  if (serverConfig.iceServerProtocol === CONSTANTS.STUN && !enableSTUNServer) {\n    serverConfig.iceServers = [];\n  } else {\n    serverConfig.iceServerPorts.tcp.forEach((tcpPort) => {\n      serverConfig.iceServers[1].urls.push(`${serverConfig.iceServerProtocol}:${serverConfig.iceServerName}:${tcpPort}?transport=tcp`);\n    });\n\n    serverConfig.iceServerPorts.udp.forEach((udpPort) => {\n      serverConfig.iceServers[1].urls.push(`${serverConfig.iceServerProtocol}:${serverConfig.iceServerName}:${udpPort}?transport=udp`);\n    });\n\n    serverConfig.iceServerPorts.both.forEach((bothPort) => {\n      serverConfig.iceServers[1].urls.push(`${serverConfig.iceServerProtocol}:${serverConfig.iceServerName}:${bothPort}`);\n    });\n\n    if (!usePublicSTUN) {\n      serverConfig.iceServers.splice(0, 1);\n    }\n\n    return {\n      iceServers: serverConfig.iceServers,\n    };\n  }\n  return null;\n};\n\nexport default setIceServers;\n","import Skylink from '../../index';\nimport logger from '../../logger';\nimport messages from '../../messages';\nimport * as constants from '../../constants';\nimport PeerConnection from '../../peer-connection';\nimport IceConnection from '../index';\nimport { isLowerThanVersion } from '../../utils/helpers';\n\n/**\n * @param {String} targetMid\n * @param {SkylinkRoom} room\n * @memberOf IceConnectionHelpers\n * @private\n */\nconst addIceCandidateFromQueue = (targetMid, room) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const peerCandidatesQueue = state.peerCandidatesQueue[targetMid] || [];\n  const peerConnection = state.peerConnections[targetMid];\n  const { AdapterJS } = window;\n  const { TAGS, PEER_CONNECTION_STATE } = constants;\n\n  for (let i = 0; i < peerCandidatesQueue.length; i += 1) {\n    const candidateArray = peerCandidatesQueue[i];\n\n    if (candidateArray) {\n      const nativeCandidate = candidateArray[1];\n      const candidateId = candidateArray[0];\n      const candidateType = nativeCandidate.candidate.split(' ')[7];\n      logger.log.DEBUG([targetMid, TAGS.CANDIDATE_HANDLER, `${candidateId}:${candidateType}`, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.ADD_BUFFERED_CANDIDATE]);\n      IceConnection.addIceCandidate(targetMid, candidateId, candidateType, nativeCandidate, state);\n    } else if (peerConnection && peerConnection.signalingState !== PEER_CONNECTION_STATE.CLOSED && AdapterJS && isLowerThanVersion(AdapterJS.VERSION, '0.14.0')) {\n      try {\n        peerConnection.addIceCandidate(null);\n        logger.log.DEBUG([targetMid, TAGS.CANDIDATE_HANDLER, null, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.END_OF_CANDIDATES_SUCCESS]);\n      } catch (ex) {\n        logger.log.DEBUG([targetMid, TAGS.CANDIDATE_HANDLER, null, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.END_OF_CANDIDATES_FAILURE]);\n      }\n    }\n  }\n\n  delete state.peerCandidatesQueue[targetMid];\n  PeerConnection.signalingEndOfCandidates(targetMid, state);\n};\n\nexport default addIceCandidateFromQueue;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\n\nclass HandleIceCandidateStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      peer_id: null,\n      state: null,\n      is_remote: false,\n      candidate_id: null,\n      candidate_sdp_mid: null,\n      candidate_sdp_mindex: null,\n      candidate_candidate: null,\n      error: null,\n    };\n  }\n\n  send(roomKey, state, peerId, candidateId, candidate, error) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n\n    this.model.room_id = roomKey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n    this.model.peer_id = peerId;\n    this.model.client_id = roomState.clientId;\n    this.model.state = state;\n    this.model.is_remote = !!candidateId;\n    this.model.candidate_id = candidateId || null;\n    this.model.candidate_sdp_mid = candidate.sdpMid;\n    this.model.candidate_sdp_mindex = candidate.sdpMLineIndex;\n    this.model.candidate_candidate = candidate.candidate;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n    this.model.error = (typeof error === 'string' ? error : (error && error.message)) || null;\n\n    this.addToStatsBuffer('iceCandidate', this.model, this.endpoints.iceCandidate);\n    this.manageStatsBuffer();\n  }\n}\n\nexport default HandleIceCandidateStats;\n","import Skylink from '../../index';\nimport logger from '../../logger';\nimport { candidateProcessingState } from '../../skylink-events';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport * as constants from '../../constants';\nimport messages from '../../messages';\nimport HandleIceCandidateStats from '../../skylink-stats/handleIceCandidateStats';\n\nconst handleIceCandidateStats = new HandleIceCandidateStats();\n\n/**\n * Success callback for adding an IceCandidate\n * @param {SkylinkRoom} room - The current room\n * @param {String} targetMid - The mid of the target peer\n * @param {String} candidateId - The id of the ICE Candidate\n * @param {String} candidateType - Type of the ICE Candidate\n * @param {RTCIceCandidate} candidate - An RTCIceCandidate Object\n * @fires candidateProcessingState\n * @memberOf IceConnectionHelpers\n * @private\n */\nconst addIceCandidateSuccess = (room, targetMid, candidateId, candidateType, candidate) => {\n  const { STATS_MODULE, ICE_CANDIDATE } = messages;\n  const { CANDIDATE_PROCESSING_STATE, TAGS } = constants;\n\n  logger.log.INFO([targetMid, TAGS.CANDIDATE_HANDLER, `${candidateId}:${candidateType}`, ICE_CANDIDATE.CANDIDATE_HANDLER.CANDIDATE_ADDED]);\n  dispatchEvent(candidateProcessingState({\n    room,\n    state: CANDIDATE_PROCESSING_STATE.PROCESS_SUCCESS,\n    peerId: targetMid,\n    candidateId,\n    candidateType,\n    candidate,\n    error: null,\n  }));\n  handleIceCandidateStats.send(room.id, STATS_MODULE.HANDLE_ICE_GATHERING_STATS.PROCESS_SUCCESS, targetMid, candidateId, candidate);\n};\n\n/**\n * Failure callback for adding an IceCandidate\n * @param {SkylinkRoom} room - The current room\n * @param {String} targetMid - The mid of the target peer\n * @param {String} candidateId - The id of the ICE Candidate\n * @param {String} candidateType - Type of the ICE Candidate\n * @param {RTCIceCandidate} candidate - An RTCIceCandidate Object\n * @param {Error} error - Error\n * @fires candidateProcessingState\n * @memberOf IceConnectionHelpers\n * @private\n */\nconst addIceCandidateFailure = (room, targetMid, candidateId, candidateType, candidate, error) => {\n  const { STATS_MODULE, ICE_CANDIDATE } = messages;\n  const { CANDIDATE_PROCESSING_STATE, TAGS } = constants;\n\n  logger.log.ERROR([targetMid, TAGS.CANDIDATE_HANDLER, `${candidateId}:${candidateType}`, ICE_CANDIDATE.CANDIDATE_HANDLER.FAILED_ADDING_CANDIDATE], error);\n  dispatchEvent(candidateProcessingState({\n    room,\n    state: CANDIDATE_PROCESSING_STATE.PROCESS_ERROR,\n    peerId: targetMid,\n    candidateId,\n    candidateType,\n    candidate,\n    error,\n  }));\n  handleIceCandidateStats.send(room.id, STATS_MODULE.HANDLE_ICE_GATHERING_STATS.PROCESS_FAILED, targetMid, candidateId, candidate, error);\n};\n\n/**\n * @param {String} targetMid - The mid of the target peer\n * @param {String} candidateId - The id of the ICE Candidate\n * @param {String} candidateType - Type of the ICE Candidate\n * @param {RTCIceCandidate} nativeCandidate - An RTCIceCandidate Object\n * @param {SkylinkState} roomState - Skylink State\n * @fires candidateProcessingState\n * @memberOf IceConnectionHelpers\n * @private\n */\nconst addIceCandidate = (targetMid, candidateId, candidateType, nativeCandidate, roomState) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const { peerConnections, room } = state;\n  const peerConnection = peerConnections[targetMid];\n  const candidate = {\n    candidate: nativeCandidate.candidate,\n    sdpMid: nativeCandidate.sdpMid,\n    sdpMLineIndex: nativeCandidate.sdpMLineIndex,\n  };\n  const { STATS_MODULE, ICE_CANDIDATE, PEER_CONNECTION } = messages;\n  const { CANDIDATE_PROCESSING_STATE, PEER_CONNECTION_STATE, TAGS } = constants;\n\n  logger.log.DEBUG([targetMid, TAGS.CANDIDATE_HANDLER, `${candidateId}:${candidateType}`, ICE_CANDIDATE.CANDIDATE_HANDLER.ADDING_CANDIDATE]);\n  dispatchEvent(candidateProcessingState({\n    peerId: targetMid,\n    room,\n    candidateType,\n    candidate,\n    candidateId,\n    state: CANDIDATE_PROCESSING_STATE.PROCESSING,\n    error: null,\n  }));\n  handleIceCandidateStats.send(room.id, STATS_MODULE.HANDLE_ICE_GATHERING_STATS.PROCESSING, targetMid, candidateId, candidate);\n\n  if (!(peerConnection\n    && peerConnection.signalingState !== PEER_CONNECTION_STATE.CLOSED\n    && peerConnection.remoteDescription\n    && peerConnection.remoteDescription.sdp\n    && peerConnection.remoteDescription.sdp.indexOf(`\\r\\na=mid:${candidate.sdpMid}\\r\\n`) > -1)) {\n    logger.log.WARN([targetMid, TAGS.CANDIDATE_HANDLER, `${candidateId}:${candidateType}`, `${ICE_CANDIDATE.CANDIDATE_HANDLER.DROPPING_CANDIDATE} - ${PEER_CONNECTION.NO_PEER_CONNECTION}`]);\n\n    dispatchEvent(candidateProcessingState({\n      peerId: targetMid,\n      room: roomState.room,\n      candidateType,\n      candidate,\n      candidateId,\n      state: constants.CANDIDATE_PROCESSING_STATE.DROPPED,\n      error: new Error(PEER_CONNECTION.NO_PEER_CONNECTION),\n    }));\n    handleIceCandidateStats.send(room.id, STATS_MODULE.HANDLE_ICE_GATHERING_STATS.PROCESS_FAILED, targetMid, candidateId, candidate, PEER_CONNECTION.NO_PEER_CONNECTION);\n  }\n\n  try {\n    peerConnection.addIceCandidate(candidate)\n      .then(() => { addIceCandidateSuccess(room, targetMid, candidateId, candidateType, candidate); })\n      .catch((error) => { addIceCandidateFailure(room, targetMid, candidateId, candidateType, candidate, error); });\n  } catch (error) {\n    addIceCandidateFailure.bind(peerConnection, room, targetMid, candidateId, candidateType, candidate, error);\n  }\n};\n\nexport default addIceCandidate;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\n\nclass HandleIceGatheringStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      peer_id: null,\n      state: null,\n      is_remote: null,\n      bundlePolicy: null,\n      rtcpMuxPolicy: null,\n    };\n  }\n\n  send(roomkey, state, peerId, isRemote) {\n    const roomState = Skylink.getSkylinkState(roomkey);\n\n    this.model.client_id = roomState.clientId;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n    this.model.room_id = roomkey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n    this.model.peer_id = peerId;\n    this.model.state = state;\n    this.model.is_remote = isRemote;\n    this.model.bundlePolicy = roomState.peerConnectionConfig.bundlePolicy;\n    this.model.rtcpMuxPolicy = roomState.peerConnectionConfig.rtcpMuxPolicy;\n\n    this.addToStatsBuffer('iceGathering', this.model, this.endpoints.iceGathering);\n    this.manageStatsBuffer();\n  }\n}\n\nconst handleIceGatheringStats = new HandleIceGatheringStats();\nexport default handleIceGatheringStats;\n","import Skylink from '../../index';\nimport logger from '../../logger';\nimport messages from '../../messages';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { candidateGenerationState } from '../../skylink-events';\nimport SignalingServer from '../../server-communication/signaling-server';\nimport handleIceGatheringStats from '../../skylink-stats/handleIceGatheringStats';\nimport * as constants from '../../constants';\n\n/**\n * @param targetMid - The mid of the target peer\n * @param {RTCIceCandidate} candidate - {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate}\n * @param {SkylinkRoom} currentRoom - Current room\n * @memberOf IceConnectionHelpers\n * @fires candidateGenerationState\n * @private\n * @return {null}\n */\nconst onIceCandidate = (targetMid, candidate, currentRoom) => {\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const initOptions = Skylink.getInitOptions();\n  const peerConnection = state.peerConnections[targetMid];\n  const signalingServer = new SignalingServer();\n  let gatheredCandidates = state.gatheredCandidates[targetMid];\n  const { CANDIDATE_GENERATION_STATE, TAGS } = constants;\n\n  if (!peerConnection) {\n    logger.log.WARN([targetMid, TAGS.CANDIDATE_HANDLER, null, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.no_peer_connection], candidate);\n    return null;\n  }\n\n  if (candidate.candidate) {\n    if (!peerConnection.gathering) {\n      logger.log.WARN([targetMid, TAGS.CANDIDATE_HANDLER, null, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.ICE_GATHERING_STARTED], candidate);\n      peerConnection.gathering = true;\n      peerConnection.gathered = false;\n      dispatchEvent(candidateGenerationState({\n        room: currentRoom,\n        peerId: targetMid,\n        state: constants.CANDIDATE_GENERATION_STATE.GATHERING,\n      }));\n      handleIceGatheringStats.send(currentRoom.id, CANDIDATE_GENERATION_STATE.GATHERING, targetMid, false);\n    }\n\n    const candidateType = candidate.candidate.split(' ')[7];\n    logger.log.DEBUG([targetMid, TAGS.CANDIDATE_HANDLER, candidateType, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.CANDIDATE_GENERATED], candidate);\n\n    if (candidateType === 'endOfCandidates' || !(peerConnection\n      && peerConnection.localDescription && peerConnection.localDescription.sdp\n      && peerConnection.localDescription.sdp.indexOf(`\\r\\na=mid:${candidate.sdpMid}\\r\\n`) > -1)) {\n      logger.log.WARN([targetMid, TAGS.CANDIDATE_HANDLER, candidateType, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.DROP_EOC], candidate);\n      return null;\n    }\n\n    if (initOptions.filterCandidatesType[candidateType]) {\n      if (!(state.hasMCU && initOptions.forceTURN)) {\n        logger.log.WARN([targetMid, TAGS.CANDIDATE_HANDLER, candidateType, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.FILTERED_CANDIDATE], candidate);\n        return null;\n      }\n\n      logger.log.WARN([targetMid, TAGS.CANDIDATE_HANDLER, candidateType, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.FILTERING_FLAG_NOT_HONOURED], candidate);\n    }\n\n    if (!gatheredCandidates) {\n      gatheredCandidates = {\n        sending: { host: [], srflx: [], relay: [] },\n        receiving: { host: [], srflx: [], relay: [] },\n      };\n    }\n\n    gatheredCandidates.sending[candidateType].push({\n      sdpMid: candidate.sdpMid,\n      sdpMLineIndex: candidate.sdpMLineIndex,\n      candidate: candidate.candidate,\n    });\n\n    state.gatheredCandidates[targetMid] = gatheredCandidates;\n    Skylink.setSkylinkState(state, currentRoom.id);\n\n    logger.log.DEBUG([targetMid, TAGS.CANDIDATE_HANDLER, candidateType, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.SENDING_CANDIDATE], candidate);\n\n    signalingServer.sendCandidate(targetMid, state, candidate);\n  } else {\n    logger.log.INFO([targetMid, TAGS.CANDIDATE_HANDLER, null, messages.ICE_CANDIDATE.CANDIDATE_HANDLER.ICE_GATHERING_COMPLETED]);\n\n    if (peerConnection.gathered) {\n      return null;\n    }\n\n    peerConnection.gathering = false;\n    peerConnection.gathered = true;\n\n    dispatchEvent(candidateGenerationState({\n      peerId: targetMid,\n      state: constants.CANDIDATE_GENERATION_STATE.COMPLETED,\n      room: currentRoom,\n    }));\n    handleIceGatheringStats.send(currentRoom.id, CANDIDATE_GENERATION_STATE.COMPLETED, targetMid, false);\n\n    if (state.gatheredCandidates[targetMid]) {\n      const sendEndOfCandidates = () => {\n        if (!state.gatheredCandidates[targetMid]) return;\n        const currentState = Skylink.getSkylinkState(currentRoom.id);\n        if (!currentState) {\n          logger.log.WARN([targetMid, TAGS.CANDIDATE_HANDLER, null, `${messages.ICE_CANDIDATE.CANDIDATE_HANDLER.DROP_EOC} peer has left the room`]);\n          return;\n        }\n\n        signalingServer.sendMessage({\n          type: constants.SIG_MESSAGE_TYPE.END_OF_CANDIDATES,\n          noOfExpectedCandidates: state.gatheredCandidates[targetMid].sending.srflx.length + state.gatheredCandidates[targetMid].sending.host.length + state.gatheredCandidates[targetMid].sending.relay.length,\n          mid: state.user.sid,\n          target: targetMid,\n          rid: currentRoom.id,\n        });\n      };\n      setTimeout(sendEndOfCandidates, 6000);\n    }\n  }\n  return null;\n};\n\nexport default onIceCandidate;\n","import Skylink from '../../index';\nimport logger from '../../logger';\nimport MESSAGES from '../../messages';\nimport { TAGS, CANDIDATE_PROCESSING_STATE } from '../../constants';\nimport HandleIceCandidateStats from '../../skylink-stats/handleIceCandidateStats';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { candidateProcessingState } from '../../skylink-events';\n\n/**\n * Method that buffers candidates\n * @param {String} targetMid\n * @param {String} candidateId\n * @param {String} candidateType\n * @param {RTCIceCandidate} nativeCandidate\n * @param {SkylinkState} state\n * @memberOf IceConnectionHelpers\n * @private\n */\nconst addIceCandidateToQueue = (targetMid, candidateId, candidateType, nativeCandidate, state) => {\n  const { STATS_MODULE: { HANDLE_ICE_GATHERING_STATS } } = MESSAGES;\n  const updatedState = state;\n  const { room } = updatedState;\n  const handleIceCandidateStats = new HandleIceCandidateStats();\n\n  logger.log.DEBUG([targetMid, TAGS.CANDIDATE_HANDLER, `${candidateId}:${candidateType}`, MESSAGES.ICE_CANDIDATE.CANDIDATE_HANDLER.ADD_CANDIDATE_TO_BUFFER]);\n\n  handleIceCandidateStats.send(room.id, HANDLE_ICE_GATHERING_STATS.BUFFERED, targetMid, candidateId, nativeCandidate);\n  dispatchEvent(candidateProcessingState({\n    room,\n    state: CANDIDATE_PROCESSING_STATE.BUFFERED,\n    peerId: targetMid,\n    candidateId,\n    candidateType,\n    candidate: nativeCandidate.candidate,\n    error: null,\n  }));\n\n  updatedState.peerCandidatesQueue[targetMid] = updatedState.peerCandidatesQueue[targetMid] || [];\n  updatedState.peerCandidatesQueue[targetMid].push([candidateId, nativeCandidate]);\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nexport default addIceCandidateToQueue;\n","import setIceServers from './setIceServers';\nimport addIceCandidateFromQueue from './addIceCandidateFromQueue';\nimport addIceCandidate from './addIceCandidate';\nimport onIceCandidate from './onIceCandidate';\nimport addIceCandidateToQueue from './addIceCandidateToQueue';\n\n/**\n * @namespace IceConnectionHelpers\n * @description All helper and utility functions for <code>{@link IceConnection}</code> class are listed here.\n * @private\n * @type {{setIceServers, addIceCandidateFromQueue, addIceCandidate, onIceCandidate, addIceCandidateToQueue}}\n */\nconst helpers = {\n  setIceServers,\n  addIceCandidateFromQueue,\n  addIceCandidate,\n  onIceCandidate,\n  addIceCandidateToQueue,\n};\n\nexport default helpers;\n","import helpers from './helpers/index';\n\n/**\n * @classdesc Class representing an IceConnection. Helper methods are listed inside <code>{@link IceConnectionHelpers}</code>.\n * @private\n * @class\n */\nclass IceConnection {\n  /**\n   * @description Function that filters and configures the ICE servers received from Signaling\n   * based on the <code>init()</code> configuration and returns the updated list of ICE servers to be used when constructing Peer connection.\n   * @param {RTCIceServer[]} iceServers - The list of IceServers passed | {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer}\n   * @return {filteredIceServers}\n   */\n  static setIceServers(iceServers) {\n    return helpers.setIceServers(iceServers);\n  }\n\n  /**\n   * @description Function that adds all the Peer connection buffered ICE candidates received.\n   * This should be called only after the remote session description is received and set.\n   * @param {String} targetMid - The mid of the target peer\n   * @param {SkylinkRoom} room - Current Room\n   */\n  static addIceCandidateFromQueue(targetMid, room) {\n    return helpers.addIceCandidateFromQueue(targetMid, room);\n  }\n\n  static addIceCandidateToQueue(targetMid, candidateId, candidateType, nativeCandidate, state) {\n    return helpers.addIceCandidateToQueue(targetMid, candidateId, candidateType, nativeCandidate, state);\n  }\n\n  /**\n   * Function that adds the ICE candidate to Peer connection.\n   * @param {String} targetMid - The mid of the target peer\n   * @param {String} candidateId - The id of the ICE Candidate\n   * @param {String} candidateType - Type of the ICE Candidate\n   * @param {RTCIceCandidate} nativeCandidate - An RTCIceCandidate Object | {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate}\n   * @param {SkylinkState} roomState - Skylink State\n   * @fires candidateProcessingState\n   */\n  static addIceCandidate(targetMid, candidateId, candidateType, nativeCandidate, roomState) {\n    return helpers.addIceCandidate(targetMid, candidateId, candidateType, nativeCandidate, roomState);\n  }\n\n  /**\n   *\n   * @param targetMid - The mid of the target peer\n   * @param {RTCPeerConnectionIceEvent} rtcIceConnectionEvent - {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnectionIceEvent}\n   * @param {SkylinkRoom} room - Current room\n   * @fires candidateGenerationState\n   * @return {null}\n   */\n  static onIceCandidate(targetMid, rtcIceConnectionEvent, room) {\n    return helpers.onIceCandidate(targetMid, rtcIceConnectionEvent, room);\n  }\n}\n\nexport default IceConnection;\n","import Skylink from '../../../../index';\nimport SkylinkSignalingServer from '../../index';\nimport IceConnection from '../../../../ice-connection/index';\nimport PeerData from '../../../../peer-data';\nimport PeerMedia from '../../../../peer-media/index';\nimport { peerJoined, onIncomingStream } from '../../../../skylink-events';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { hasAudioTrack, hasVideoTrack } from '../../../../utils/helpers';\nimport * as constants from '../../../../constants';\n\n/**\n * Function that handles the \"inRoom\" socket message received.\n * @param {JSON} message\n * @memberOf SignalingMessageHandler\n * @fires peerJoined\n * @fires handshakeProgress\n * @fires onIncomingStream\n */\nconst inRoomHandler = (message) => {\n  const {\n    pc_config: { iceServers },\n    sid,\n    rid,\n    tieBreaker,\n  } = message;\n  const roomState = Skylink.getSkylinkState(rid);\n  const initOptions = Skylink.getInitOptions();\n  const { priorityWeightScheme } = initOptions;\n  const signaling = new SkylinkSignalingServer();\n  let weightAppendValue = 0;\n\n  roomState.room.connection.peerConfig = IceConnection.setIceServers(iceServers);\n  roomState.room.inRoom = true;\n\n  if (priorityWeightScheme === constants.PRIORITY_WEIGHT_SCHEME.AUTO) {\n    weightAppendValue = 0;\n  } else if (priorityWeightScheme === constants.PRIORITY_WEIGHT_SCHEME.ENFORCE_OFFERER) {\n    weightAppendValue = 2e+15;\n  } else {\n    weightAppendValue = -(2e+15);\n  }\n\n  roomState.peerPriorityWeight = tieBreaker + weightAppendValue;\n  roomState.user.sid = sid;\n  roomState.inRoom = true;\n\n  PeerMedia.updatePeerMediaWithUserSid(roomState.room, sid);\n  Skylink.setSkylinkState(roomState, rid);\n\n  dispatchEvent(peerJoined({\n    peerId: roomState.user.sid,\n    peerInfo: PeerData.getCurrentSessionInfo(roomState.room),\n    isSelf: true,\n    room: roomState.room,\n  }));\n\n  if (roomState.streams.userMedia) {\n    const streamIds = Object.keys(roomState.streams.userMedia);\n    streamIds.forEach((streamId) => {\n      const mediaStream = roomState.streams.userMedia[streamId].stream;\n      dispatchEvent(onIncomingStream({\n        stream: mediaStream,\n        streamId: mediaStream.id,\n        peerId: roomState.user.sid,\n        room: roomState.room,\n        isSelf: true,\n        peerInfo: PeerData.getCurrentSessionInfo(roomState.room),\n        isVideo: hasVideoTrack(mediaStream),\n        isAudio: hasAudioTrack(mediaStream),\n      }));\n    });\n  }\n\n  signaling.enterRoom(roomState);\n};\n\nexport default inRoomHandler;\n","import clone from 'clone';\nimport Skylink from '../../..';\nimport { PEER_TYPE, SM_PROTOCOL_VERSION, DT_PROTOCOL_VERSION } from '../../../constants';\nimport { isABoolean, isANumber, isAString } from '../../../utils/helpers';\nimport parsers from './index';\n\nconst parseVersion = (version) => {\n  if (!(version && typeof version === 'string')) {\n    return 0;\n  }\n  // E.g. 0.9.6, replace minor \".\" with 0\n  if (version.indexOf('.') > -1) {\n    const parts = version.split('.');\n    if (parts.length > 2) {\n      const majorVer = parts[0] || '0';\n      parts.splice(0, 1);\n      return parseFloat(`${majorVer}.${parts.join('0')}`, 10);\n    }\n    return parseFloat(version || '0', 10);\n  }\n  return parseInt(version || '0', 10);\n};\n\n\nconst enterAndWelcome = (msg) => {\n  const state = Skylink.getSkylinkState(msg.rid);\n  const parsedMsg = {};\n  const { hasMCU } = state;\n  const {\n    rid,\n    mid,\n    enableIceRestart,\n    enableDataChannel,\n    weight,\n    receiveOnly,\n    publishOnly,\n    agent,\n    os,\n    temasysPluginVersion,\n    SMProtocolVersion,\n    DTProtocolVersion,\n    version,\n    parentId,\n    publisherId,\n  } = msg;\n\n  parsedMsg.publisherId = publisherId || null;\n  parsedMsg.rid = rid;\n  parsedMsg.mid = mid;\n  parsedMsg.agent = agent && isAString(agent) ? agent : 'other';\n  parsedMsg.version = parseVersion(version);\n  parsedMsg.SMProtocolVersion = isAString(SMProtocolVersion) ? SMProtocolVersion : SM_PROTOCOL_VERSION;\n  // eslint-disable-next-line no-nested-ternary\n  parsedMsg.DTProtocolVersion = isAString(DTProtocolVersion) ? DTProtocolVersion : (hasMCU || mid === PEER_TYPE.MCU ? DT_PROTOCOL_VERSION : '0.1.0');\n  parsedMsg.weight = isANumber(weight) ? weight : 0;\n  parsedMsg.receiveOnly = receiveOnly && receiveOnly !== false;\n  parsedMsg.enableDataChannel = isABoolean(enableDataChannel) ? enableDataChannel : true;\n  parsedMsg.enableIceRestart = isABoolean(enableIceRestart) ? enableIceRestart : false;\n  parsedMsg.os = os && isAString(os) ? os : null;\n  parsedMsg.temasysPluginVersion = temasysPluginVersion && isAString(temasysPluginVersion) ? temasysPluginVersion : null;\n  parsedMsg.publishOnly = !!publishOnly;\n  parsedMsg.parentId = !!publishOnly && parentId && isAString(parentId) ? parentId : null;\n  parsedMsg.userInfo = parsers.parseUserInfo(state, msg, parsedMsg);\n\n  if (hasMCU) {\n    parsedMsg.peersInRoom = msg.peersInRoom;\n  }\n\n  return clone(parsedMsg);\n};\n\nexport default enterAndWelcome;\n","const parseUserInfo = (state, msg, parsedMsg) => {\n  const info = Object.assign({}, msg.userInfo);\n\n  info.config = info.config ? info.config : {\n    enableDataChannel: parsedMsg.enableDataChannel,\n    enableIceRestart: parsedMsg.enableIceRestart,\n    priorityWeight: parsedMsg.weight,\n    receiveOnly: parsedMsg.receiveOnly,\n    publishOnly: parsedMsg.publishOnly,\n  };\n\n  info.agent = info.agent ? info.agent : {\n    name: parsedMsg.agent,\n    version: parsedMsg.version,\n    os: parsedMsg.os,\n    pluginVersion: parsedMsg.temasysPluginVersion,\n    SMProtocolVersion: parsedMsg.SMProtocolVersion,\n    DTProtocolVersion: parsedMsg.DTProtocolVersion,\n  };\n\n  info.settings = info.settings ? info.settings : {};\n  info.mediaStatus = info.mediaStatus ? info.mediaStatus : {};\n\n  return info;\n};\n\nexport default parseUserInfo;\n","import enterAndWelcome from './enterAndWelcome';\nimport parseUserInfo from './parseUserInfo';\n\nconst parsers = {\n  enterAndWelcome,\n  parseUserInfo,\n};\n\nexport default parsers;\n","import Skylink from '../../../../../index';\nimport logger from '../../../../../logger';\nimport PeerConnection from '../../../../../peer-connection';\nimport { CALLERS } from './enterAndWelcome';\nimport { peerJoined, handshakeProgress, serverPeerJoined } from '../../../../../skylink-events';\nimport { dispatchEvent } from '../../../../../utils/skylinkEventManager';\nimport PeerData from '../../../../../peer-data';\nimport parsers from '../../../parsers/index';\nimport { PEER_TYPE, SERVER_PEER_TYPE, HANDSHAKE_PROGRESS } from '../../../../../constants';\n\nconst setPeerInformations = (state, peerId, userInfo) => {\n  const { room } = state;\n  // eslint-disable-next-line no-param-reassign\n  state.peerInformations[peerId] = PeerConnection.buildPeerInformations(userInfo, state);\n  Skylink.setSkylinkState(state, room.id);\n};\n\n/**\n * Function that adds a Peer Connection and updates the state(Skylink State).\n * @param {JSON} params\n * @memberOf SignalingMessageHandler\n * @fires serverPeerJoined\n * @fires peerJoined\n * @fires handshakeProgress\n */\nconst processPeer = (params) => {\n  const {\n    currentRoom,\n    targetMid,\n    cert,\n    userInfo,\n    message,\n    caller,\n  } = params;\n  let isNewPeer = false;\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const { hasMCU } = state;\n  const { peerInformations } = state;\n  if ((!peerInformations[targetMid] && !hasMCU) || (hasMCU && targetMid === PEER_TYPE.MCU && !peerInformations.MCU)) {\n    const hasScreenshare = !!userInfo.screenshare;\n    isNewPeer = true;\n    state.peerInformations[targetMid] = PeerConnection.buildPeerInformations(message.userInfo, state);\n\n    const peerBrowser = {\n      agent: userInfo.agent.name,\n      version: userInfo.agent.version,\n      os: userInfo.agent.os,\n    };\n\n    Skylink.setSkylinkState(state, currentRoom.id);\n\n    PeerConnection.addPeer({\n      currentRoom,\n      targetMid,\n      peerBrowser,\n      cert,\n      receiveOnly: message.receiveOnly,\n      hasScreenshare,\n    });\n\n    if (targetMid === PEER_TYPE.MCU) {\n      logger.log.INFO([targetMid, 'RTCPeerConnection', null, 'MCU feature has been enabled']);\n      state.hasMCU = true;\n      dispatchEvent(serverPeerJoined({\n        peerId: targetMid,\n        serverPeerType: SERVER_PEER_TYPE.MCU,\n        room: currentRoom,\n      }));\n    } else {\n      dispatchEvent(peerJoined({\n        peerId: targetMid,\n        peerInfo: PeerData.getPeerInfo(targetMid, currentRoom),\n        isSelf: false,\n        room: currentRoom,\n      }));\n    }\n  }\n\n  state.peerMessagesStamps[targetMid] = state.peerMessagesStamps[targetMid] || {\n    userData: 0,\n    audioMuted: 0,\n    videoMuted: 0,\n  };\n\n  if (caller === CALLERS.WELCOME) {\n    state.peerMessagesStamps[targetMid].hasWelcome = false;\n  }\n\n  if (caller === CALLERS.WELCOME && hasMCU && Array.isArray(message.peersInRoom) && message.peersInRoom.length) {\n    const userId = state.user.sid;\n    for (let peersInRoomIndex = 0; peersInRoomIndex < message.peersInRoom.length; peersInRoomIndex += 1) {\n      const PEER_ID = message.peersInRoom[peersInRoomIndex].mid;\n      if (PEER_ID !== userId) {\n        const parsedMsg = parsers.enterAndWelcome(message.peersInRoom[peersInRoomIndex]);\n        const peerUserInfo = parsedMsg.userInfo;\n        setPeerInformations(state, PEER_ID, peerUserInfo);\n        dispatchEvent(peerJoined({\n          peerId: PEER_ID,\n          peerInfo: PeerData.getPeerInfo(PEER_ID, currentRoom),\n          isSelf: false,\n          room: currentRoom,\n        }));\n      }\n    }\n  } else if (hasMCU && targetMid !== state.user.sid && targetMid !== PEER_TYPE.MCU) {\n    setPeerInformations(state, targetMid, userInfo);\n    dispatchEvent(peerJoined({\n      peerId: targetMid,\n      peerInfo: PeerData.getPeerInfo(targetMid, currentRoom),\n      isSelf: false,\n      room: currentRoom,\n    }));\n  }\n\n  Skylink.setSkylinkState(state, currentRoom.id);\n\n  if (isNewPeer) {\n    dispatchEvent(handshakeProgress({\n      peerId: targetMid,\n      state: HANDSHAKE_PROGRESS.WELCOME,\n      error: null,\n      room: currentRoom,\n    }));\n  }\n};\n\nexport default processPeer;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\nimport PeerData from '../peer-data';\n\nclass HandleNegotiationStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      peer_id: null,\n      state: null,\n      is_remote: null,\n      weight: null,\n      sdp_type: null,\n      sdp_sdp: null,\n      error: null,\n    };\n  }\n\n  send(roomKey, state, peerId, sdpOrMessage, isRemote, error) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n\n    this.model.client_id = roomState.clientId;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n    this.model.room_id = roomKey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n    this.model.peer_id = peerId;\n    this.model.state = state;\n    this.model.is_remote = isRemote;\n    this.model.weight = sdpOrMessage.weight || null;\n    this.model.error = (typeof error === 'string' ? error : (error && error.msg)) || null;\n    this.model.sdp_type = null;\n    this.model.sdp_sdp = null;\n\n    // Retrieve the weight for states where the \"weight\" field is not available.\n    if (['enter', 'welcome'].indexOf(this.model.state) === -1) {\n      // Retrieve the peer's weight if it from remote end.\n      this.model.weight = this.model.is_remote && PeerData.getPeerInfo(this.model.peer_id, roomState.room).config && PeerData.getPeerInfo(this.model.peer_id, roomState.room).config.priorityWeight ? PeerData.getPeerInfo(this.model.peer_id, roomState.room).config.priorityWeight : PeerData.getCurrentSessionInfo(roomState.room).config.priorityWeight;\n      this.model.sdp_type = (sdpOrMessage && sdpOrMessage.type) || null;\n      this.model.sdp_sdp = (sdpOrMessage && sdpOrMessage.sdp) || null;\n    }\n\n    this.addToStatsBuffer('negotiation', this.model, this.endpoints.negotiation);\n    this.manageStatsBuffer();\n  }\n}\n\nconst handleNegotationStats = new HandleNegotiationStats();\nexport default handleNegotationStats;\n","import Skylink from '../../../../../index';\nimport { PEER_CERTIFICATE, PEER_CONNECTION_STATE, PEER_TYPE } from '../../../../../constants';\nimport processPeer from './processPeer';\nimport SkylinkSignalingServer from '../../../index';\nimport handleNegotiationStats from '../../../../../skylink-stats/handleNegotiationStats';\nimport logger from '../../../../../logger';\nimport messages from '../../../../../messages';\nimport parsers from '../../../parsers';\n\nexport const CALLERS = {\n  ENTER: 'enterHandler',\n  WELCOME: 'welcomeHander',\n};\n\nconst getNextNegotiationStep = (params) => {\n  let method = 'welcome';\n\n  if (params.caller === CALLERS.WELCOME) {\n    const state = Skylink.getSkylinkState(params.currentRoom.id);\n    const { peerMessagesStamps, peerPriorityWeight, hasMCU } = state;\n    if (hasMCU || peerPriorityWeight > params.message.weight) {\n      if (peerMessagesStamps[params.targetMid].hasWelcome) {\n        method = 'noop';\n        logger.log.WARN([params.targetMid, 'RTCPeerConnection', null, 'Discarding extra \"welcome\" received.']);\n      } else {\n        method = 'offer';\n        state.peerMessagesStamps[params.targetMid].hasWelcome = true;\n        Skylink.setSkylinkState(state, params.currentRoom.id);\n      }\n    }\n  }\n  return method;\n};\n\n// eslint-disable-next-line consistent-return\nconst checkStampBeforeSendingWelcome = (params) => {\n  const { currentRoom, targetMid, message } = params;\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const { peerConnections, hasMCU } = state;\n  const { STATS_MODULE, NEGOTIATION_PROGRESS } = messages;\n  const signaling = new SkylinkSignalingServer();\n  const method = getNextNegotiationStep(params);\n\n  if (method === 'offer') {\n  // Added checks to ensure that connection object is defined first\n    if (!peerConnections[targetMid]) {\n      logger.log.WARN([targetMid, 'RTCSessionDescription', 'offer', NEGOTIATION_PROGRESS.ERRORS.no_peer_connection]);\n      handleNegotiationStats.send(currentRoom.id, STATS_MODULE.HANDLE_NEGOTIATION_STATS.OFFER.dropped, targetMid, message, false, NEGOTIATION_PROGRESS.ERRORS.no_peer_connection);\n      return null;\n    }\n\n    const { signalingState } = peerConnections[targetMid];\n\n    // Added checks to ensure that state is \"stable\" if setting local \"offer\"\n    if (signalingState !== PEER_CONNECTION_STATE.STABLE) {\n      logger.log.WARN([targetMid, 'RTCSessionDescription', 'offer', NEGOTIATION_PROGRESS.ERRORS.NOT_STABLE], signalingState);\n      handleNegotiationStats.send(currentRoom.id, STATS_MODULE.HANDLE_NEGOTIATION_STATS.OFFER.dropped, targetMid, message, false, NEGOTIATION_PROGRESS.ERRORS.NOT_STABLE);\n      return null;\n    }\n\n    signaling[method](params.currentRoom, params.targetMid);\n  } else if (!hasMCU) {\n    signaling[method](params.currentRoom, params.targetMid);\n  }\n};\n\nconst logStats = (caller, targetMid, state, message) => {\n  const { room } = state;\n\n  let callerState = 'enter';\n  if (caller === CALLERS.WELCOME) {\n    callerState = 'welcome';\n  }\n\n  logger.log.INFO([targetMid, 'RTCPeerConnection', null, `Peer ${callerState} received ->`], message);\n  handleNegotiationStats.send(room.id, callerState, targetMid, message, true);\n};\n\n/**\n * Function that parses the enterAndWelcome and welcome message and sends the offer or welcome message.\n * @param {JSON} message\n * @param {String} caller\n * @memberOf SignalingMessageHandler\n */\nexport const parseAndSendWelcome = (message, caller) => {\n  const parsedMsg = parsers.enterAndWelcome(message);\n  const {\n    rid, mid, userInfo, publisherId,\n  } = parsedMsg;\n  const state = Skylink.getSkylinkState(rid);\n  const { hasMCU } = state;\n  const targetMid = hasMCU && publisherId ? publisherId : mid;\n  const { RTCPeerConnection } = window;\n\n  logStats(caller, targetMid, state, parsedMsg);\n\n  let callerState = 'enter';\n  if (caller === CALLERS.WELCOME) {\n    callerState = 'welcome';\n  }\n  if (targetMid !== PEER_TYPE.MCU && hasMCU && state.publishOnly) {\n    logger.log.WARN([targetMid, 'RTCPeerConnection', null, `Discarding ${callerState} for publishOnly case -> `], message);\n    return;\n  }\n\n  const peerParams = {\n    currentRoom: state.room,\n    targetMid,\n    userInfo,\n    message: parsedMsg,\n    caller,\n  };\n\n  if (state.peerConnectionConfig.certificate !== PEER_CERTIFICATE.AUTO && typeof RTCPeerConnection.generateCertificate === 'function') {\n    let certOptions = {};\n    if (state.peerConnectionConfig.certificate === PEER_CERTIFICATE.ECDSA) {\n      certOptions = {\n        name: 'ECDSA',\n        namedCurve: 'P-256',\n      };\n    } else {\n      certOptions = {\n        name: 'RSASSA-PKCS1-v1_5',\n        modulusLength: 2048,\n        publicExponent: new Uint8Array([1, 0, 1]),\n        hash: 'SHA-256',\n      };\n    }\n    RTCPeerConnection.generateCertificate(certOptions).then((cert) => {\n      peerParams.cert = cert;\n      processPeer(peerParams);\n      checkStampBeforeSendingWelcome(peerParams);\n    });\n  } else {\n    processPeer(peerParams);\n    checkStampBeforeSendingWelcome(peerParams);\n  }\n};\n","import { parseAndSendWelcome, CALLERS } from './commons/enterAndWelcome';\n\nconst enterHandler = (message) => {\n  parseAndSendWelcome(message, CALLERS.ENTER);\n};\n\nexport default enterHandler;\n","/* eslint-disable no-unused-vars,no-multi-assign */\nimport Skylink from '../../../../../index';\nimport logger from '../../../../../logger';\nimport {\n  TAGS, PEER_CONNECTION_STATE, HANDSHAKE_PROGRESS, DATA_CHANNEL_STATE,\n} from '../../../../../constants';\nimport IceConnection from '../../../../../ice-connection/index';\nimport SkylinkSignalingServer from '../../../index';\nimport PeerConnection from '../../../../../peer-connection/index';\nimport { handshakeProgress } from '../../../../../skylink-events';\nimport { dispatchEvent } from '../../../../../utils/skylinkEventManager';\nimport handleNegotiationStats from '../../../../../skylink-stats/handleNegotiationStats';\nimport MESSAGES from '../../../../../messages';\nimport PeerMedia from '../../../../../peer-media/index';\nimport SessionDescription from '../../../../../session-description';\n\nconst handleSetOfferAndAnswerSuccess = (state, targetMid, description, isRemote) => {\n  const { STATS_MODULE: { HANDLE_NEGOTIATION_STATS } } = MESSAGES;\n  const { peerConnections, bufferedLocalOffer, room } = state;\n  const peerConnection = peerConnections[targetMid];\n  const msgType = description.type === 'offer' ? 'OFFER' : 'ANSWER';\n\n  handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS[msgType].set, targetMid, description, isRemote);\n\n  if (isRemote) { // handshake progress is triggered on the local end after sdp it is created\n    dispatchEvent(handshakeProgress({\n      state: HANDSHAKE_PROGRESS[msgType],\n      peerId: targetMid,\n      room,\n    }));\n  }\n\n  if (isRemote) {\n    if (description.type === 'offer') {\n      peerConnection.setOffer = 'remote';\n    } else {\n      peerConnection.setAnswer = 'remote';\n    }\n    IceConnection.addIceCandidateFromQueue(targetMid, room);\n  } else {\n    bufferedLocalOffer[targetMid] = null;\n    if (description.type === 'offer') {\n      peerConnection.setOffer = 'local';\n    } else {\n      peerConnection.setAnswer = 'local';\n    }\n  }\n\n  Skylink.setSkylinkState(state, room.id);\n};\n\nconst handleSetOfferAndAnswerFailure = (state, targetMid, description, isRemote, error) => {\n  const { room, user } = state;\n  const { STATS_MODULE: { HANDLE_NEGOTIATION_STATS } } = MESSAGES;\n  const msgType = description.type === 'offer' ? 'OFFER' : 'ANSWER';\n\n  handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS[msgType].set_error, targetMid, description, isRemote, error);\n\n  dispatchEvent(handshakeProgress({\n    state: HANDSHAKE_PROGRESS.ERROR,\n    peerId: isRemote ? targetMid : user.sid,\n    error,\n    room,\n  }));\n};\n\nconst mungeSDP = (targetMid, sessionDescription, roomKey) => {\n  const mungedSessionDescription = sessionDescription;\n  // modifying the remote description received\n  // TODO: Below SDP methods needs to be implemented in the SessionDescription Class.\n  // sessionDescriptionToSet.sdp = SessionDescription.removeSDPFilteredCandidates(targetMid, sessionDescriptionToSet, message.rid);\n  // sessionDescriptionToSet.sdp = SessionDescription.setSDPCodec(targetMid, sessionDescriptionToSet, message.rid);\n  mungedSessionDescription.sdp = SessionDescription.setSDPBitrate(targetMid, mungedSessionDescription, roomKey);\n  // sessionDescriptionToSet.sdp = SessionDescription.setSDPCodecParams(targetMid, sessionDescriptionToSet, message.rid);\n  // sessionDescriptionToSet.sdp = SessionDescription.removeSDPCodecs(targetMid, sessionDescriptionToSet, message.rid);\n  // sessionDescriptionToSet.sdp = SessionDescription.removeSDPREMBPackets(targetMid, sessionDescriptionToSet, message.rid);\n  // sessionDescriptionToSet.sdp = SessionDescription.handleSDPConnectionSettings(targetMid, sessionDescriptionToSet, message.rid, 'remote');\n  // sessionDescriptionToSet.sdp = SessionDescription.removeSDPUnknownAptRtx(targetMid, sessionDescriptionToSet, message.rid);\n\n  // if (AdapterJS.webrtcDetectedBrowser === 'firefox') {\n  //   SessionDescription.setOriginalDTLSRole(state, sessionDescriptionToSet, true);\n  // }\n\n  // logger.log.INFO([targetMid, 'RTCSessionDescription', type, `Updated remote ${type} ->`], sessionDescriptionToSet.sdp);\n  return mungedSessionDescription;\n};\n\nconst setLocalDescription = (room, targetMid, localDescription) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = state;\n  const { type } = localDescription;\n  const peerConnection = peerConnections[targetMid];\n  const { STATS_MODULE } = MESSAGES;\n  const msgType = type === 'offer' ? 'OFFER' : 'ANSWER';\n\n  peerConnection.processingLocalSDP = true;\n\n  handleNegotiationStats.send(room.id, STATS_MODULE.HANDLE_NEGOTIATION_STATS[msgType][type], targetMid, localDescription, false);\n\n  return peerConnection.setLocalDescription(localDescription)\n    .then(() => peerConnection);\n};\n\nconst onLocalDescriptionSetSuccess = (RTCPeerConnection, room, targetMid, localDescription) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = state;\n  const { NEGOTIATION_PROGRESS } = MESSAGES;\n  const peerConnection = peerConnections[targetMid] = RTCPeerConnection;\n\n  logger.log.DEBUG([targetMid, TAGS.SESSION_DESCRIPTION, localDescription.type, NEGOTIATION_PROGRESS.SET_LOCAL_DESCRIPTION], localDescription);\n\n  peerConnection.processingLocalSDP = false;\n  handleSetOfferAndAnswerSuccess(state, targetMid, localDescription, false);\n};\n\nconst onLocalDescriptionSetFailure = (room, targetMid, localDescription, error) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = state;\n  const peerConnection = peerConnections[targetMid];\n  const { NEGOTIATION_PROGRESS } = MESSAGES;\n\n  logger.log.ERROR([targetMid, TAGS.SESSION_DESCRIPTION, localDescription.type, NEGOTIATION_PROGRESS.FAILED_SET_LOCAL_DESCRIPTION], error);\n\n  peerConnection.processingLocalSDP = false;\n  peerConnection.negotiating = false;\n\n  handleSetOfferAndAnswerFailure(state, targetMid, localDescription, false, error);\n};\n\nconst setRemoteDescription = (room, targetMid, remoteDescription) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = state;\n  const { type } = remoteDescription;\n  const { STATS_MODULE, NEGOTIATION_PROGRESS } = MESSAGES;\n  const peerConnection = peerConnections[targetMid];\n  const msgType = type === 'offer' ? 'OFFER' : 'ANSWER';\n\n  peerConnection.processingRemoteSDP = true;\n  handleNegotiationStats.send(room.id, STATS_MODULE.HANDLE_NEGOTIATION_STATS[msgType][type], targetMid, remoteDescription, true);\n  const mungedSessionDescription = mungeSDP(targetMid, remoteDescription, room.id);\n  return peerConnection.setRemoteDescription(mungedSessionDescription)\n    .then(() => peerConnection);\n};\n\nconst sendAnswerAck = (state, targetMid, success) => {\n  const updatedState = state;\n  updatedState.peerConnections[targetMid].negotiating = false;\n  Skylink.setSkylinkState(updatedState, targetMid);\n\n  const signaling = new SkylinkSignalingServer();\n  signaling.answerAck(state, targetMid, success);\n};\n\nconst onRemoteDescriptionSetSuccess = (RTCPeerConnection, room, targetMid, remoteDescription) => {\n  const signaling = new SkylinkSignalingServer();\n  const { type } = remoteDescription;\n  const { NEGOTIATION_PROGRESS, DATA_CHANNEL } = MESSAGES;\n\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = state;\n  const peerConnection = peerConnections[targetMid] = RTCPeerConnection;\n\n  logger.log.DEBUG([targetMid, TAGS.SESSION_DESCRIPTION, type, NEGOTIATION_PROGRESS.SET_REMOTE_DESCRIPTION], remoteDescription);\n\n  peerConnection.processingRemoteSDP = false;\n\n  if (type === 'offer') {\n    handleSetOfferAndAnswerSuccess(state, targetMid, remoteDescription, true);\n    return signaling.answer(state, targetMid);\n  }\n  // FIXME: why is this needed?\n  if (state.peerMessagesStamps[targetMid]) {\n    state.peerMessagesStamps[targetMid].hasRestart = false;\n  }\n\n  // if remote peer does not have data channel\n  if (state.dataChannels[targetMid] && (peerConnection.remoteDescription.sdp.indexOf('m=application') === -1 || peerConnection.remoteDescription.sdp.indexOf('m=application 0') > 0)) {\n    logger.log.WARN([targetMid, TAGS.PEER_CONNECTION, null, `${DATA_CHANNEL.CLOSING} - ${DATA_CHANNEL.NO_REMOTE_DATA_CHANNEL}`]);\n    PeerConnection.closeDataChannel(state, targetMid);\n  }\n\n  handleSetOfferAndAnswerSuccess(state, targetMid, remoteDescription, true);\n  sendAnswerAck(state, targetMid, true);\n  return true;\n};\n\nconst onRemoteDescriptionSetFailure = (room, targetMid, remoteDescription, error) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerConnections } = state;\n  const peerConnection = peerConnections[targetMid];\n  const { type } = remoteDescription;\n\n  logger.log.ERROR([targetMid, TAGS.SESSION_DESCRIPTION, type, `${MESSAGES.NEGOTIATION_PROGRESS.ERRORS.FAILED_SET_REMOTE_DESCRIPTION} ->`], {\n    error,\n    state: peerConnection.signalingState,\n    [type]: remoteDescription,\n  });\n\n  peerConnection.processingRemoteSDP = false;\n  peerConnection.negotiating = false;\n\n  handleSetOfferAndAnswerFailure(state, targetMid, remoteDescription, true, error);\n\n  if (type === 'answer') {\n    sendAnswerAck(state, targetMid, false);\n  }\n};\n\nconst updateState = (state, message) => {\n  const updatedState = state;\n  const { userInfo, rid, mid } = message;\n  const updatedUserInfo = userInfo;\n  const targetMid = mid;\n\n  if (userInfo && typeof userInfo === 'object') {\n    updatedUserInfo.settings.data = !!(updatedState.dataChannels[targetMid] && updatedState.dataChannels[targetMid].main && updatedState.dataChannels[targetMid].main.channel && updatedState.dataChannels[targetMid].main.channel.readyState === DATA_CHANNEL_STATE.OPEN);\n    updatedState.peerInformations[targetMid].settings = updatedUserInfo.settings || {};\n    updatedState.peerInformations[targetMid].mediaStatus = updatedUserInfo.mediaStatus || {};\n    updatedState.peerInformations[targetMid].userData = updatedUserInfo.userData;\n    // updatedState.peerInformations[targetMid].midSourceMap = updatedUserInfo.midSourceMap;\n  }\n\n  updatedState.peerConnections[targetMid].negotiating = true;\n\n  Skylink.setSkylinkState(updatedState, rid);\n};\n\nconst canProceed = (state, message) => {\n  const {\n    weight, type, mid, sdp, resend,\n  } = message;\n  const {\n    peerPriorityWeight, bufferedLocalOffer, room, peerConnections,\n  } = state;\n  const targetMid = mid;\n  const {\n    processingRemoteSDP, processingLocalSDP, negotiating,\n  } = peerConnections[targetMid];\n  const { STATS_MODULE, NEGOTIATION_PROGRESS, NO_PEER_CONNECTION } = MESSAGES;\n  const msgType = type === 'offer' ? 'OFFER' : 'ANSWER';\n  let error = null;\n\n  if (!peerConnections[targetMid]) {\n    logger.log.ERROR([targetMid, null, type, `${NO_PEER_CONNECTION.NO_PEER_CONNECTION}. Unable to set${type === 'offer' ? 'Remote' : 'Local'}Offer.`]);\n    error = NO_PEER_CONNECTION.NO_PEER_CONNECTION;\n  }\n\n  if (type === 'offer' && peerConnections[targetMid].signalingState !== PEER_CONNECTION_STATE.STABLE) {\n    logger.log.WARN([targetMid, null, type, NEGOTIATION_PROGRESS.ERRORS.NOT_STABLE], {\n      signalingState: peerConnections[targetMid].signalingState,\n      isRestart: !!resend,\n    });\n    error = `Peer connection state is ${peerConnections[targetMid].signalingState}.`;\n  }\n\n  if (type === 'offer' && bufferedLocalOffer[targetMid] && peerPriorityWeight > weight) {\n    logger.log.WARN([targetMid, null, type, NEGOTIATION_PROGRESS.ERRORS.OFFER_TIEBREAKER], {\n      selfWeight: peerPriorityWeight,\n      messageWeight: weight,\n    });\n    error = NEGOTIATION_PROGRESS.ERRORS.OFFER_TIEBREAKER;\n  }\n\n  // if processing remote SDP\n  if (processingRemoteSDP) {\n    logger.log.WARN([targetMid, TAGS.SESSION_DESCRIPTION, type, NEGOTIATION_PROGRESS.ERRORS.PROCESSING_EXISTING_SDP], sdp);\n    error = NEGOTIATION_PROGRESS.ERRORS.PROCESSING_EXISTING_SDP;\n\n    // or completed processing local and remote sdp but answerAck has not been received\n  } else if ((!processingLocalSDP && !processingRemoteSDP && negotiating) && type === 'offer') {\n    // add to bufferedRemoteOffer\n    const updatedState = state;\n    logger.log.DEBUG([targetMid, TAGS.SESSION_DESCRIPTION, type, NEGOTIATION_PROGRESS.ERRORS.ADDING_REMOTE_OFFER_TO_BUFFER], message);\n    updatedState.bufferedRemoteOffers[targetMid] = updatedState.bufferedRemoteOffers[targetMid] ? updatedState.bufferedRemoteOffers[targetMid] : [];\n    updatedState.bufferedRemoteOffers[targetMid].push(message);\n    Skylink.setSkylinkState(updatedState, room.id);\n  }\n\n  if (error) {\n    handleNegotiationStats.send(room.id, STATS_MODULE.HANDLE_NEGOTIATION_STATS[msgType].dropped, targetMid, message, true, error);\n  }\n\n  return !error;\n};\n\n/**\n * Function that parses and sets the remote description for offer and answer.\n * @param {JSON} message\n * @return {null}\n * @memberOf SignalingMessageHandler\n * @fires handshakeProgress\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const parseAndSetRemoteDescription = (message) => {\n  const {\n    rid,\n    mid,\n    type,\n    sdp,\n    mediaInfoList,\n  } = message;\n  const state = Skylink.getSkylinkState(rid);\n  const {\n    hasMCU,\n    room,\n    bufferedLocalOffer,\n  } = state;\n  const targetMid = mid;\n  const msgType = type === 'offer' ? 'OFFER' : 'ANSWER';\n  const { NEGOTIATION_PROGRESS } = MESSAGES;\n\n  logger.log.INFO([targetMid, null, type, `Received ${type} from peer. ${msgType}:`], message);\n\n  if (canProceed(state, message)) {\n    try {\n      updateState(state, message);\n\n      PeerMedia.setPeerMediaInfo(room, targetMid, mediaInfoList);\n      PeerMedia.deleteUnavailableMedia(room, targetMid); // mediaState can be unavailable during renegotiation\n\n      if (type === 'offer') {\n        let localDescription = null;\n        const remoteDescription = {\n          type,\n          sdp: hasMCU ? sdp.replace(/\\r\\n/g, '\\n').split('\\n').join('\\r\\n') : sdp,\n        };\n\n        setRemoteDescription(room, targetMid, remoteDescription)\n          .then(peerConnection => onRemoteDescriptionSetSuccess(peerConnection, room, targetMid, remoteDescription))\n          .catch(error => onRemoteDescriptionSetFailure(room, targetMid, remoteDescription, error))\n          .then((answer) => {\n            localDescription = {\n              type: answer.type,\n              sdp: answer.sdp,\n            };\n            return setLocalDescription(room, targetMid, localDescription);\n          })\n          .then(peerConnection => onLocalDescriptionSetSuccess(peerConnection, room, targetMid, localDescription))\n          .catch(error => onLocalDescriptionSetFailure(room, targetMid, localDescription, error));\n      } else if (bufferedLocalOffer[targetMid]) {\n        const localDescription = bufferedLocalOffer[targetMid];\n        const remoteDescription = {\n          type,\n          sdp: hasMCU ? sdp.replace(/\\r\\n/g, '\\n').split('\\n').join('\\r\\n') : sdp,\n        };\n\n        setLocalDescription(room, targetMid, localDescription)\n          .then(peerConnection => onLocalDescriptionSetSuccess(peerConnection, room, targetMid, localDescription))\n          .catch(error => onLocalDescriptionSetFailure(room, targetMid, localDescription, error))\n          .then(() => setRemoteDescription(room, targetMid, remoteDescription))\n          .then(peerConnection => onRemoteDescriptionSetSuccess(peerConnection, room, targetMid, remoteDescription))\n          .catch(error => onRemoteDescriptionSetFailure(room, targetMid, remoteDescription, error));\n      } else {\n        logger.log.ERROR([targetMid, TAGS.PEER_CONNECTION, null, NEGOTIATION_PROGRESS.ERRORS.NO_LOCAL_BUFFERED_OFFER]);\n      }\n    } catch (error) {\n      logger.log.ERROR([targetMid, TAGS.SESSION_DESCRIPTION, type, `Failed processing ${msgType} ->`], error);\n    }\n  }\n\n  return null;\n};\n","import { parseAndSetRemoteDescription } from './commons/offerAndAnswer';\n\nconst offerHandler = (message) => {\n  parseAndSetRemoteDescription(message);\n};\n\nexport default offerHandler;\n","import { parseAndSetRemoteDescription } from './commons/offerAndAnswer';\n\nconst answerHandler = (message) => {\n  parseAndSetRemoteDescription(message);\n};\n\nexport default answerHandler;\n","const renegotiateIfNeeded = (state, peerId) => {\n  const { peerConnections, currentRTCRTPSenders } = state;\n\n  return new Promise((resolve) => {\n    const peerConnection = peerConnections[peerId];\n    const pcSenders = peerConnection.getSenders() ? peerConnection.getSenders() : [];\n    const senderGetStatsPromises = [];\n    const savedSenders = currentRTCRTPSenders[peerId] || [];\n    let isRenegoNeeded = false;\n\n    pcSenders.forEach((pcSender) => {\n      senderGetStatsPromises.push(pcSender.getStats());\n    });\n\n    const transmittingSenders = {};\n\n    Promise.all(senderGetStatsPromises).then((reslovedResults) => {\n      reslovedResults.forEach((reports, senderIndex) => {\n        reports.forEach((report) => {\n          if (report && report.ssrc) {\n            transmittingSenders[report.ssrc] = pcSenders[senderIndex];\n          } else if (report && report.type === 'ssrc' && report.id.indexOf('send') > 1) { // required for retrieving sender information for react\n            // native ios\n            report.values.forEach((value) => {\n              if (value.ssrc) {\n                transmittingSenders[value.ssrc] = pcSenders[senderIndex];\n              }\n            });\n          }\n        });\n      });\n\n      const transmittingSendersKeys = Object.keys(transmittingSenders);\n\n      if (transmittingSendersKeys.length !== savedSenders.length) {\n        isRenegoNeeded = true;\n      } else {\n        let senderMatchedCount = 0;\n        for (let tKey = 0; tKey < transmittingSendersKeys.length; tKey += 1) {\n          const tSender = transmittingSenders[transmittingSendersKeys[tKey]];\n          for (let sIndex = 0; sIndex < savedSenders.length; sIndex += 1) {\n            const sSender = savedSenders[sIndex];\n            if (tSender === sSender) {\n              senderMatchedCount += 1;\n              break;\n            }\n          }\n        }\n        isRenegoNeeded = senderMatchedCount !== transmittingSendersKeys.length;\n      }\n      resolve(isRenegoNeeded);\n    });\n  });\n};\n\nexport default renegotiateIfNeeded;\n","import Skylink from '../../../index';\nimport PeerData from '../../../peer-data';\n\n/**\n * Method that returns the refreshConnection result.\n * @param {String} peerId\n * @param {SkylinkRoom} room\n * @param {boolean} doIceRestart\n * @param {Array} [errors]\n * @private\n */\nconst buildRefreshConnectionResult = (peerId, room, doIceRestart, errors) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { hasMCU, peerInformations, enableIceRestart } = state;\n  const peersCustomSettings = PeerData.getPeersCustomSettings(state);\n  const result = {};\n\n  result[peerId] = {\n    iceRestart: !hasMCU && peerInformations[peerId] && peerInformations[peerId].config\n      && peerInformations[peerId].config.enableIceRestart && enableIceRestart && doIceRestart,\n    customSettings: peersCustomSettings[peerId] || {},\n  };\n\n  if (errors) {\n    result.errors = errors;\n  }\n\n  return result;\n};\n\nexport default buildRefreshConnectionResult;\n","/* eslint-disable prefer-promise-reject-errors */\nimport Skylink from '../../../index';\nimport MESSAGES from '../../../messages';\nimport logger from '../../../logger';\nimport PeerConnection from '../../index';\nimport {\n  isEmptyArray, isAObj, isAString, isABoolean,\n} from '../../../utils/helpers';\nimport buildRefreshConnectionResult from './buildRefreshConnectionResult';\n\nconst buildResult = (listOfPeers, refreshErrors, refreshSettings) => {\n  const result = {};\n  result.listOfPeers = listOfPeers;\n  result.refreshErrors = refreshErrors;\n  result.refreshSettings = refreshSettings;\n\n  return result;\n};\n\nconst buildPeerRefreshSettings = (listOfPeers, room, doIceRestart) => {\n  const refreshSettings = [];\n\n  Object.keys(listOfPeers).forEach((i) => {\n    refreshSettings.push(buildRefreshConnectionResult(listOfPeers[i], room, doIceRestart));\n  });\n\n  return refreshSettings;\n};\n\nconst buildPeerRefreshErrors = (peerId, errors) => {\n  const peerRefreshError = {};\n  peerRefreshError[peerId] = errors;\n\n  return peerRefreshError;\n};\n\nconst filterParams = (targetPeerId, iceRestart, options, peerConnections) => {\n  let doIceRestart = false;\n  let bwOptions = {};\n  let listOfPeers = Object.keys(peerConnections);\n\n  if (Array.isArray(targetPeerId)) {\n    listOfPeers = targetPeerId;\n  } else if (isAString(targetPeerId)) {\n    listOfPeers = [targetPeerId];\n  } else if (isABoolean(targetPeerId)) {\n    doIceRestart = targetPeerId;\n  } else if (targetPeerId && isAObj(targetPeerId)) {\n    bwOptions = targetPeerId;\n  }\n\n  if (isABoolean(iceRestart)) {\n    doIceRestart = iceRestart;\n  } else if (iceRestart && isAObj(iceRestart)) {\n    bwOptions = iceRestart;\n  }\n\n  if (options && isAObj(options)) {\n    bwOptions = options;\n  }\n\n  return {\n    listOfPeers,\n    doIceRestart,\n    bwOptions,\n  };\n};\n\n/**\n * Function that refreshes Peer connections to update with the current streaming.\n * @param {SkylinkState} roomState\n * @param {String} targetPeerId\n * @param {boolean} iceRestart\n * @param {Object} options\n * @param {Object} options.andwidth\n * @param {Object} options.googleXBandwidth\n * @return {Promise}\n * @memberOf PeerConnection\n */\nconst refreshConnection = (roomState, targetPeerId, iceRestart, options) => new Promise((resolve, reject) => {\n  if (!roomState) {\n    reject(new Error(MESSAGES.ROOM_STATE.NO_ROOM_NAME));\n  }\n\n  const { peerConnections, hasMCU, room } = roomState;\n  const initOptions = Skylink.getInitOptions();\n  const { mcuUseRenegoRestart } = initOptions;\n  const { PEER_CONNECTION } = MESSAGES;\n  const params = filterParams(targetPeerId, iceRestart, options, peerConnections);\n  const { listOfPeers, doIceRestart, bwOptions } = params;\n\n  try {\n    if (isEmptyArray(listOfPeers) && !(hasMCU && !mcuUseRenegoRestart)) {\n      logger.log.ERROR(PEER_CONNECTION.refresh_no_peer_connection);\n      reject({\n        refreshErrors: { self: PEER_CONNECTION.refresh_no_peer_connection },\n        listOfPeers,\n      });\n    }\n\n    logger.log.INFO([null, 'PeerConnection', null, PEER_CONNECTION.refresh_start]);\n\n    const refreshPeerConnectionPromises = PeerConnection.refreshPeerConnection(listOfPeers, roomState, doIceRestart, bwOptions);\n    refreshPeerConnectionPromises\n      .then((results) => {\n        const mResults = hasMCU ? [results] : results;\n        const refreshErrors = [];\n        for (let i = 0; i < mResults.length; i += 1) {\n          if (Array.isArray(mResults[i])) {\n            const error = mResults[i];\n            refreshErrors.push(buildPeerRefreshErrors(error[0], error[1]));\n            logger.log.WARN([listOfPeers, 'PeerConnection', null, PEER_CONNECTION.refresh_peer_failed], error[0]);\n          } else if (typeof mResults[i] === 'string') {\n            logger.log.INFO([listOfPeers, 'PeerConnection', null, PEER_CONNECTION.refresh_peer_success], mResults[i]);\n          }\n        }\n\n        if (refreshErrors.length === listOfPeers.length) {\n          reject(buildResult(listOfPeers, refreshErrors, buildPeerRefreshSettings(listOfPeers, room, doIceRestart)));\n        } else {\n          resolve(buildResult(listOfPeers, refreshErrors, buildPeerRefreshSettings(listOfPeers, room, doIceRestart)));\n        }\n      })\n      .catch(error => logger.log.ERROR([null, 'RTCPeerConnection', null, PEER_CONNECTION.refresh_failed], error))\n      .finally(() => logger.log.INFO(PEER_CONNECTION.refresh_completed));\n  } catch (error) {\n    reject(error);\n  }\n});\n\nexport default refreshConnection;\n","import Skylink from '../../../../index';\nimport renegotiateIfNeeded from '../../../../peer-connection/helpers/renegotiateIfNeeded';\nimport refreshConnection from '../../../../peer-connection/helpers/refresh-connection/refreshConnection';\nimport logger from '../../../../logger';\nimport { TAGS, HANDSHAKE_PROGRESS } from '../../../../constants';\nimport MESSAGES from '../../../../messages';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { handshakeProgress } from '../../../../skylink-events';\nimport { isEmptyArray } from '../../../../utils/helpers';\nimport { parseAndSetRemoteDescription } from './commons/offerAndAnswer';\n\nconst hasAppliedBufferedRemoteOffer = (updatedState, targetMid) => {\n  if (updatedState.bufferedRemoteOffers[targetMid] && !isEmptyArray(updatedState.bufferedRemoteOffers[targetMid])) {\n    const offerMessage = updatedState.bufferedRemoteOffers[targetMid].shift(); // the first buffered message\n    logger.log.DEBUG([targetMid, 'RTCSessionDescription', offerMessage.type, MESSAGES.NEGOTIATION_PROGRESS.APPLYING_BUFFERED_REMOTE_OFFER], offerMessage);\n    parseAndSetRemoteDescription(offerMessage);\n    Skylink.setSkylinkState(updatedState, updatedState.room.id);\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Method that handles the \"answerAck\" socket message received.\n * See confluence docs for the \"answerAck\" expected properties to be received\n *   based on the current <code>SM_PROTOCOL_VERSION</code>.\n * @memberOf SignalingMessageHandler\n * @private\n * @since 1.0.0\n */\nconst answerAckHandler = (message) => {\n  const { mid, rid, success } = message;\n  const updatedState = Skylink.getSkylinkState(rid);\n  const targetMid = mid;\n\n  dispatchEvent(handshakeProgress({\n    state: HANDSHAKE_PROGRESS.ANSWER_ACK,\n    peerId: targetMid,\n    room: updatedState.room,\n  }));\n\n  updatedState.peerConnections[targetMid].negotiating = false;\n  Skylink.setSkylinkState(updatedState, rid);\n\n  if (!success) {\n    logger.log.ERROR([targetMid, TAGS.SESSION_DESCRIPTION, HANDSHAKE_PROGRESS.ANSWER, MESSAGES.NEGOTIATION_PROGRESS.ERRORS.FAILED_SET_REMOTE_ANSWER]);\n    return;\n  }\n\n  if (!hasAppliedBufferedRemoteOffer(updatedState, targetMid)) {\n    renegotiateIfNeeded(updatedState, targetMid).then((shouldRenegotiate) => {\n      if (shouldRenegotiate) {\n        refreshConnection(updatedState, targetMid)\n          .catch((error) => {\n            logger.log.ERROR([mid, TAGS.SESSION_DESCRIPTION, HANDSHAKE_PROGRESS.ANSWER_ACK, MESSAGES.NEGOTIATION_PROGRESS.ERRORS.FAILED_RENEGOTIATION], error);\n          });\n      }\n    });\n  }\n};\n\nexport default answerAckHandler;\n","import { parseAndSendWelcome, CALLERS } from './commons/enterAndWelcome';\n\nconst welcomeHandler = (message) => {\n  parseAndSendWelcome(message, CALLERS.WELCOME);\n};\n\nexport default welcomeHandler;\n","import Skylink from '../../../../index';\nimport logger from '../../../../logger';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { candidateProcessingState } from '../../../../skylink-events';\nimport * as constants from '../../../../constants';\nimport PeerConnection from '../../../../peer-connection';\nimport IceConnection from '../../../../ice-connection';\nimport messages from '../../../../messages';\nimport HandleIceCandidateStats from '../../../../skylink-stats/handleIceCandidateStats';\n\n\n/**\n * Function that handles the \"candidate\" socket message received.\n * @param {JSON} message\n * @memberOf SignalingMessageHandler\n * @returns {null}\n * @fires candidateProcessingState\n */\nconst candidateHandler = (message) => {\n  const { candidate, mid, rid } = message;\n  const state = Skylink.getSkylinkState(rid);\n  const { room } = state;\n  const initOptions = Skylink.getInitOptions();\n  const peerConnection = state.peerConnections[mid];\n  const peerEndOfCandidatesCounter = state.peerEndOfCandidatesCounter[mid] || {};\n  const { RTCIceCandidate } = window;\n  const { ICE_CANDIDATE: { CANDIDATE_HANDLER }, PEER_CONNECTION, STATS_MODULE: { HANDLE_ICE_GATHERING_STATS } } = messages;\n  const handleIceCandidateStats = new HandleIceCandidateStats();\n\n  if (!candidate && !message.id) {\n    logger.log.WARN([mid, CANDIDATE_HANDLER.tag, null, CANDIDATE_HANDLER.INVALID_CANDIDATE], message);\n    return null;\n  }\n\n  const nativeCandidate = new RTCIceCandidate({\n    sdpMLineIndex: message.label,\n    candidate,\n    sdpMid: message.id,\n  });\n  const candidateId = `can-${nativeCandidate.foundation}`;\n  const candidateType = nativeCandidate.candidate.split(' ')[7] || '';\n\n  logger.log.DEBUG([mid, CANDIDATE_HANDLER.tag, `${candidateId}:${candidateType}`, CANDIDATE_HANDLER.VALID_CANDIDATE], nativeCandidate);\n\n  peerEndOfCandidatesCounter.len = peerEndOfCandidatesCounter.len || 0;\n  peerEndOfCandidatesCounter.hasSet = false;\n  peerEndOfCandidatesCounter.len += 1;\n\n  Skylink.setSkylinkState(state, rid);\n\n  const candidateProcessingStateEventDetail = {\n    candidate: {\n      candidate: nativeCandidate.candidate,\n      sdpMid: nativeCandidate.sdpMid,\n      sdpMLineIndex: nativeCandidate.sdpMLineIndex,\n    },\n    error: null,\n  };\n\n  dispatchEvent(candidateProcessingState({\n    room,\n    state: constants.CANDIDATE_PROCESSING_STATE.RECEIVED,\n    peerId: mid,\n    candidateId,\n    candidateType,\n    candidate: candidateProcessingStateEventDetail.candidate,\n    error: candidateProcessingStateEventDetail.error,\n  }));\n\n  if (!(peerConnection && peerConnection.signalingState !== constants.PEER_CONNECTION_STATE.CLOSED)) {\n    logger.log.WARN([mid, CANDIDATE_HANDLER.tag, `${candidateId}:${candidateType}`, PEER_CONNECTION.NO_PEER_CONNECTION]);\n\n    candidateProcessingStateEventDetail.error = new Error(PEER_CONNECTION.NO_PEER_CONNECTION);\n    handleIceCandidateStats.send(room.id, HANDLE_ICE_GATHERING_STATS.PROCESS_FAILED, mid, candidateId, candidateProcessingStateEventDetail.candidate, candidateProcessingStateEventDetail.error);\n    dispatchEvent(candidateProcessingState({\n      room,\n      state: constants.CANDIDATE_PROCESSING_STATE.DROPPED,\n      peerId: mid,\n      candidateId,\n      candidateType,\n      candidate: candidateProcessingStateEventDetail.candidate,\n      error: candidateProcessingStateEventDetail.error,\n    }));\n\n    PeerConnection.signalingEndOfCandidates(mid, state);\n    return null;\n  }\n\n  if (initOptions.filterCandidatesType[candidateType]) {\n    if (!(state.hasMCU && initOptions.forceTURN)) {\n      logger.log.WARN([mid, CANDIDATE_HANDLER.tag, `${candidateId}:${candidateType}`, CANDIDATE_HANDLER.FILTERED_CANDIDATE], nativeCandidate);\n\n      candidateProcessingStateEventDetail.error = new Error(CANDIDATE_HANDLER.FILTERED_CANDIDATE);\n      handleIceCandidateStats.send(room.id, HANDLE_ICE_GATHERING_STATS.DROPPED, mid, candidateId, candidateProcessingStateEventDetail.candidate, candidateProcessingStateEventDetail.error);\n      dispatchEvent(candidateProcessingState({\n        room,\n        state: constants.CANDIDATE_PROCESSING_STATE.DROPPED,\n        peerId: mid,\n        candidateId,\n        candidateType,\n        candidate: candidateProcessingStateEventDetail.candidate,\n        error: candidateProcessingStateEventDetail.error,\n      }));\n\n      PeerConnection.signalingEndOfCandidates(mid, state);\n      return null;\n    }\n\n    logger.log.WARN([mid, CANDIDATE_HANDLER.tag, `${candidateId}:${candidateType}`, CANDIDATE_HANDLER.FILTERING_FLAG_NOT_HONOURED], nativeCandidate);\n  }\n\n  if (peerConnection.remoteDescription && peerConnection.remoteDescription.sdp && peerConnection.localDescription && peerConnection.localDescription.sdp) {\n    IceConnection.addIceCandidate(mid, candidateId, candidateType, nativeCandidate, state);\n  } else {\n    IceConnection.addIceCandidateToQueue(mid, candidateId, candidateType, nativeCandidate, state);\n  }\n\n  PeerConnection.signalingEndOfCandidates(mid, state);\n\n  let gatheredCandidates = state.gatheredCandidates[mid];\n  if (!gatheredCandidates) {\n    gatheredCandidates = {\n      sending: { host: [], srflx: [], relay: [] },\n      receiving: { host: [], srflx: [], relay: [] },\n    };\n  }\n\n  gatheredCandidates.receiving[candidateType].push({\n    sdpMid: nativeCandidate.sdpMid,\n    sdpMLineIndex: nativeCandidate.sdpMLineIndex,\n    candidate: nativeCandidate.candidate,\n  });\n\n  state.gatheredCandidates[mid] = gatheredCandidates;\n  Skylink.setSkylinkState(state, rid);\n\n  return null;\n};\n\nexport default candidateHandler;\n","import logger from '../../../../logger';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { GET_PEERS_STATE } from '../../../../constants';\nimport { getPeersStateChange } from '../../../../skylink-events';\n\n/**\n * Function that handles the Signaling Server message from getPeers() method.\n * @param {JSON} message\n * @memberOf SignalingMessageHandler\n * @fires getPeersStateChange\n */\nconst getPeerListHandler = (message) => {\n  const { result, type } = message;\n  const peerList = result;\n  logger.log.INFO(['Server', null, type, 'Received list of peers'], peerList);\n  dispatchEvent(getPeersStateChange({\n    state: GET_PEERS_STATE.DISPATCHED,\n    privilegePeerId: null,\n    peerList,\n  }));\n};\n\nexport default getPeerListHandler;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\n\nclass HandleSessionStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      state: null,\n      contents: null,\n    };\n  }\n\n  send(roomKey, message) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n\n    this.model.room_id = roomKey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n    this.model.client_id = roomState.clientId;\n    this.model.state = message.type;\n    this.model.contents = message;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n\n    this.postStats(this.endpoints.session, this.model);\n  }\n}\n\nexport default HandleSessionStats;\n","\nimport Skylink from '../../../../index';\nimport logger from '../../../../logger';\nimport HandleSessionStats from '../../../../skylink-stats/handleSessionStats';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { introduceStateChange } from '../../../../skylink-events';\nimport { INTRODUCE_STATE_CHANGE } from '../../../../skylink-events/constants';\n\n/**\n * Function that handles the \"introduceError\" socket message received.\n * @param {JSON} message\n * @memberOf SignalingMessageHandler\n * @fires introduceStateChange\n */\nconst introduceErrorHandler = (message) => {\n  const state = Skylink.getSkylinkState();\n  const { room, user } = state;\n  logger.log.WARN(['Server', null, message.type, `Introduce failed. Reason: ${message.reason}`]);\n\n  const handleSessionStats = new HandleSessionStats();\n  handleSessionStats.send(room.id, message);\n  dispatchEvent(introduceStateChange({\n    state: INTRODUCE_STATE_CHANGE.ERROR,\n    privilegedPeerId: user.sid,\n    receivingPeerId: message.receivingPeerId,\n    sendingPeerId: message.sendingPeerId,\n    reason: message.reason,\n  }));\n};\n\nexport default introduceErrorHandler;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\nimport PeerConnection from '../peer-connection';\nimport logger from '../logger';\nimport MESSAGES from '../messages';\n\nclass HandleIceConnectionStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      peer_id: null,\n      state: null,\n      local_candidate: {},\n      remote_candidate: {},\n    };\n  }\n\n  send(roomKey, state, peerId) {\n    try {\n      const roomState = Skylink.getSkylinkState(roomKey);\n\n      if (!roomState) return;\n\n      this.model.room_id = roomKey;\n      this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n      this.model.peer_id = peerId;\n      this.model.client_id = roomState.clientId;\n      this.model.state = state;\n      this.model.appKey = Skylink.getInitOptions().appKey;\n      this.model.timestamp = (new Date()).toISOString();\n\n      PeerConnection.retrieveStatistics(roomKey, peerId, Skylink.getInitOptions().beSilentOnStatsLogs).then((stats) => {\n        if (stats) {\n          // Parse the selected ICE candidate pair for both local and remote candidate.\n          ['local', 'remote'].forEach((dirType) => {\n            const candidate = stats.selectedCandidatePair[dirType];\n            if (candidate) {\n              const modelCandidate = this.model[`${dirType}_candidate`];\n              modelCandidate.ip_address = candidate.ipAddress || null;\n              modelCandidate.port_number = candidate.portNumber || null;\n              modelCandidate.candidate_type = candidate.candidateType || null;\n              modelCandidate.protocol = candidate.transport || null;\n              modelCandidate.priority = candidate.priority || null;\n\n              // This is only available for the local ICE candidate.\n              if (dirType === 'local') {\n                this.model.local_candidate.network_type = candidate.networkType || null;\n              }\n            }\n          });\n        }\n\n        this.postStats(this.endpoints.iceConnection, this.model);\n      }).catch((ex) => {\n        logger.log.DEBUG(MESSAGES.STATS_MODULE.HANDLE_ICE_CONNECTION_STATS.RETRIEVE_FAILED, ex);\n      });\n    } catch (error) {\n      logger.log.DEBUG(MESSAGES.STATS_MODULE.HANDLE_ICE_CONNECTION_STATS.SEND_FAILED, error);\n    }\n  }\n}\n\nexport default HandleIceConnectionStats;\n","import logger from '../../../../logger';\nimport Skylink from '../../../../index';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport {\n  peerLeft, serverPeerLeft, peerConnectionState, iceConnectionState,\n} from '../../../../skylink-events';\nimport PeerData from '../../../../peer-data';\nimport HandleIceConnectionStats from '../../../../skylink-stats/handleIceConnectionStats';\nimport PeerConnection from '../../../../peer-connection/index';\nimport {\n  PEER_TYPE, PEER_CONNECTION_STATE, ICE_CONNECTION_STATE, SERVER_PEER_TYPE, BROWSER_AGENT, TAGS,\n} from '../../../../constants';\nimport MESSAGES from '../../../../messages';\nimport { isAgent, isVersion } from '../../../../utils/helpers';\n\n/**\n * Checks if peer is connected.\n * @param {SkylinkState} roomState\n * @param {String} peerId\n * @private\n */\nconst isPeerConnected = (roomState, peerId) => {\n  const roomStateObj = roomState;\n\n  if (!roomStateObj) return false;\n\n  if (!roomStateObj.peerConnections[peerId] && !roomStateObj.peerInformations[peerId]) {\n    logger.log.DEBUG([peerId, TAGS.PEER_CONNECTION, null, `${MESSAGES.ROOM.LEAVE_ROOM.DROPPING_HANGUP} - ${MESSAGES.PEER_CONNECTION.NO_PEER_CONNECTION}`]);\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Sets to true signalingStateClosed and dispatches peer connection state closed.\n * @param {SkylinkState} roomState\n * @param {String} peerId\n * @private\n */\nconst processPeerConnectionState = (roomState, peerId) => {\n  const state = roomState;\n\n  if (state.peerConnections[peerId].signalingStateClosed) return;\n\n  state.peerConnections[peerId].signalingStateClosed = true;\n\n  dispatchEvent(peerConnectionState({\n    peerId,\n    state: PEER_CONNECTION_STATE.CLOSED,\n  }));\n};\n\n/**\n * Sets to true iceConnectionStateClosed and dispatches ICE connection state closed.\n * @param {SkylinkState} roomState\n * @param {String} peerId\n * @private\n */\nconst processIceConnectionState = (roomState, peerId) => {\n  const state = roomState;\n\n  if (state.peerConnections[peerId].iceConnectionStateClosed) return;\n\n  state.peerConnections[peerId].iceConnectionStateClosed = true;\n\n  new HandleIceConnectionStats().send(state.room.id, peerId, roomState);\n\n  dispatchEvent(iceConnectionState({\n    peerId,\n    state: ICE_CONNECTION_STATE.CLOSED,\n  }));\n};\n\n/**\n * Closes a peer connection for a particular peerId.\n * @param {String} roomKey\n * @param {String} peerId\n * @private\n */\nconst closePeerConnection = (roomKey, peerId) => {\n  const roomState = Skylink.getSkylinkState(roomKey);\n  if (roomState.peerConnections[peerId].signalingState === PEER_CONNECTION_STATE.CLOSED) return;\n\n  roomState.peerConnections[peerId].close();\n\n  // Polyfill for safari 11 \"closed\" event not triggered for \"iceConnectionState\" and \"signalingState\".\n  if (isAgent(BROWSER_AGENT.SAFARI) && isVersion(11)) {\n    processPeerConnectionState(roomState, peerId);\n    processIceConnectionState(roomState, peerId);\n  }\n};\n\n/**\n * Clears peer information in SkylinkState.\n * @param {String} roomKey\n * @param {String} peerId\n * @private\n */\nexport const clearPeerInfo = (roomKey, peerId) => {\n  const updatedState = Skylink.getSkylinkState(roomKey);\n\n  // Otherwise stats module fails.\n  setTimeout(() => {\n    delete updatedState.peerConnections[peerId];\n    Skylink.setSkylinkState(updatedState, updatedState.room.id);\n    logger.log.INFO([peerId, TAGS.PEER_CONNECTION, null, MESSAGES.ROOM.LEAVE_ROOM.PEER_LEFT.SUCCESS]);\n  }, 500);\n\n  delete updatedState.peerInformations[peerId];\n  delete updatedState.peerMedias[peerId];\n  delete updatedState.remoteStreams[peerId];\n  delete updatedState.peerMessagesStamps[peerId];\n  delete updatedState.peerEndOfCandidatesCounter[peerId];\n  delete updatedState.peerCandidatesQueue[peerId];\n  delete updatedState.sdpSessions[peerId];\n  delete updatedState.peerStats[peerId];\n  delete updatedState.peerBandwidth[peerId];\n  delete updatedState.gatheredCandidates[peerId];\n  delete updatedState.peerCustomConfigs[peerId];\n  delete updatedState.peerConnStatus[peerId];\n};\n\n/**\n * Check if health timer exists.\n * @param {String} roomKey\n * @param {String} peerId\n * @private\n */\nexport const checksIfHealthTimerExists = (roomKey, peerId) => {\n  const roomState = Skylink.getSkylinkState(roomKey);\n  if (!roomState.peerConnections[peerId]) return;\n\n  closePeerConnection(roomKey, peerId);\n};\n\n/**\n * Triggers peerLeft event and changes state for serverPeerLeft.\n * @param {String} roomKey\n * @param {String} peerId\n * @private\n */\nconst triggerPeerLeftEventAndChangeState = (roomKey, peerId) => {\n  const roomState = Skylink.getSkylinkState(roomKey);\n\n  if (!isPeerConnected(roomState, peerId)) return;\n\n  const { room } = roomState;\n  const peerInfo = PeerData.getPeerInfo(peerId, room);\n\n  if (peerId === PEER_TYPE.MCU) {\n    const updatedState = roomState;\n    dispatchEvent(serverPeerLeft({\n      peerId,\n      serverPeerType: SERVER_PEER_TYPE.MCU,\n      room,\n    }));\n    updatedState.hasMCU = false;\n\n    Skylink.setSkylinkState(updatedState, room.id);\n    return;\n  }\n\n  dispatchEvent(peerLeft({\n    peerId,\n    peerInfo,\n    isSelf: false,\n    room,\n  }));\n};\n\n/**\n * Closes datachannel for a particular room.\n * @param {String} roomKey\n * @param {String} peerId\n * @private\n */\nconst tryCloseDataChannel = (roomKey, peerId) => {\n  const roomState = Skylink.getSkylinkState(roomKey);\n  PeerConnection.closeDataChannel(roomState, peerId);\n};\n\n/**\n * Function that handles the bye Signaling Server message.\n * @param {JSON} message\n * @memberOf SignalingMessageHandler\n * @private\n */\nconst byeHandler = (message) => {\n  const { mid, rid, publisherId } = message;\n  const roomKey = rid;\n  const roomState = Skylink.getSkylinkState(roomKey);\n  let peerId = mid;\n\n  if (roomState.hasMCU) {\n    peerId = publisherId;\n  }\n\n  logger.log.INFO([peerId, TAGS.PEER_CONNECTION, null, MESSAGES.ROOM.LEAVE_ROOM.PEER_LEFT.START]);\n\n  try {\n    triggerPeerLeftEventAndChangeState(roomKey, peerId);\n    checksIfHealthTimerExists(roomKey, peerId);\n    clearPeerInfo(roomKey, peerId);\n    tryCloseDataChannel(roomKey, peerId);\n  } catch (error) {\n    logger.log.DEBUG([peerId, TAGS.ROOM, null, MESSAGES.ROOM.LEAVE_ROOM.PEER_LEFT.ERROR], error);\n  }\n};\n\nexport default byeHandler;\n","/* eslint-disable no-unused-vars */\nimport Skylink from '../../../../../index';\nimport PeerData from '../../../../../peer-data/index';\nimport SessionDescription from '../../../../../session-description';\nimport logger from '../../../../../logger';\nimport handleNegotiationStats from '../../../../../skylink-stats/handleNegotiationStats';\nimport messages from '../../../../../messages';\nimport { HANDSHAKE_PROGRESS } from '../../../../../constants';\nimport PeerMedia from '../../../../../peer-media/index';\nimport { handshakeProgress } from '../../../../../skylink-events';\nimport { dispatchEvent } from '../../../../../utils/skylinkEventManager';\nimport PeerConnection from '../../../../../peer-connection/index';\n\nconst getCommonMessage = (resolve, targetMid, roomState, sessionDescription, restartOfferMsg) => {\n  // TODO: Full implementation to be done from _setLocalAndSendMessage under peer-handshake.js\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  // const initOptions = Skylink.getInitOptions();\n  const {\n    peerConnections, peerConnectionConfig, bufferedLocalOffer, peerPriorityWeight, room,\n  } = state;\n  const { STATS_MODULE: { HANDLE_NEGOTIATION_STATS } } = messages;\n  const { AdapterJS } = window;\n  const peerConnection = peerConnections[targetMid];\n  const sd = {\n    type: sessionDescription.type,\n    sdp: sessionDescription.sdp,\n  };\n\n  peerConnection.processingLocalSDP = true;\n\n  // sd.sdp = SessionDescription.removeSDPFirefoxH264Pref(targetMid, sd, roomState.room.id);\n  // sd.sdp = SessionDescription.setSDPCodecParams(targetMid, sd, roomState.room.id);\n  // sd.sdp = SessionDescription.removeSDPUnknownAptRtx(targetMid, sd, roomState.room.id);\n  // sd.sdp = SessionDescription.removeSDPCodecs(targetMid, sd, roomState.room.id);\n  // sd.sdp = SessionDescription.handleSDPConnectionSettings(targetMid, sd, roomState.room.id, 'local');\n  // sd.sdp = SessionDescription.removeSDPREMBPackets(targetMid, sd, roomState.room.id);\n\n  if (AdapterJS.webrtcDetectedBrowser === 'firefox') {\n    SessionDescription.setOriginalDTLSRole(state, sd, false);\n    sd.sdp = SessionDescription.modifyDTLSRole(state, sessionDescription);\n  }\n\n  if (peerConnectionConfig.disableBundle) {\n    sd.sdp = sd.sdp.replace(/a=group:BUNDLE.*\\r\\n/gi, '');\n  }\n\n  logger.log.INFO([targetMid, 'RTCSessionDescription', sessionDescription.type, 'Local session description updated ->'], sd.sdp);\n\n  if (sessionDescription.type === HANDSHAKE_PROGRESS.OFFER) {\n    handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS.OFFER.offer, targetMid, sessionDescription, false);\n\n    logger.log.INFO([targetMid, 'RTCSessionDescription', sessionDescription.type, 'Local offer saved.']);\n    bufferedLocalOffer[targetMid] = sessionDescription;\n\n    const offer = {\n      type: sd.type,\n      sdp: sd.sdp, // SessionDescription.renderSDPOutput(targetMid, sd, roomState.room.id),\n      mid: state.user.sid,\n      target: targetMid,\n      rid: roomState.room.id,\n      userInfo: PeerData.getUserInfo(roomState.room),\n      weight: peerPriorityWeight,\n      mediaInfoList: PeerMedia.retrieveMediaInfoForOfferAnswer(room, sd),\n    };\n\n    // Merging Restart and Offer messages. The already present keys in offer message will not be overwritten.\n    // Only news keys from restartOfferMsg are added.\n    if (restartOfferMsg && Object.keys(restartOfferMsg).length) {\n      const keys = Object.keys(restartOfferMsg);\n      const currentMessageKeys = Object.keys(offer);\n      for (let keyIndex = 0; keyIndex < keys.length; keyIndex += 1) {\n        const key = keys[keyIndex];\n        if (currentMessageKeys.indexOf(key) === -1) {\n          offer[key] = restartOfferMsg[key];\n        }\n      }\n    }\n\n    resolve(offer);\n  } else {\n    handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS.ANSWER.answer, targetMid, sessionDescription, false);\n\n    const answer = {\n      type: sd.type,\n      sdp: sd.sdp,\n      mid: state.user.sid,\n      target: targetMid,\n      rid: roomState.room.id,\n      userInfo: PeerData.getUserInfo(roomState.room),\n      mediaInfoList: PeerMedia.retrieveMediaInfoForOfferAnswer(room, sd),\n    };\n\n    resolve(answer);\n  }\n};\n\nexport default getCommonMessage;\n","import Skylink from '../../index';\nimport logger from '../../logger';\nimport PeerConnection from '../index';\nimport MediaStream from '../../media-stream/index';\nimport SessionDescription from '../../session-description';\nimport { HANDSHAKE_PROGRESS, PEER_TYPE } from '../../constants';\nimport getCommonOfferAnswerMessage from '../../server-communication/signaling-server/message-builder/builders/commons/offerAndAnswer';\nimport handleNegotiationStats from '../../skylink-stats/handleNegotiationStats';\nimport MESSAGES from '../../messages';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { handshakeProgress } from '../../skylink-events';\n\nconst { STATS_MODULE: { HANDLE_NEGOTIATION_STATS } } = MESSAGES;\n\nconst onOfferCreated = (resolve, targetMid, roomState, restartOfferMsg, offer) => {\n  const { room } = roomState;\n\n  logger.log.DEBUG([targetMid, null, null, 'Created offer'], offer);\n  handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS.OFFER.create, targetMid, offer, false);\n\n  getCommonOfferAnswerMessage(resolve, targetMid, roomState, offer, restartOfferMsg);\n};\n\nconst onOfferFailed = (reject, targetMid, roomState, error) => {\n  const { room } = roomState;\n\n  logger.log.ERROR([targetMid, null, null, 'Failed creating an offer:'], error);\n  handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS.OFFER.create_error, targetMid, null, false, error);\n  dispatchEvent(handshakeProgress({\n    state: HANDSHAKE_PROGRESS.ERROR,\n    peerId: targetMid,\n    error,\n    room: roomState.room,\n  }));\n  reject(error);\n};\n\n/**\n * @param {SkylinkRoom} currentRoom\n * @param {String} targetMid\n * @param {Boolean} iceRestart\n * @param {object} restartOfferMsg\n * @return {*}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @fires handshakeProgress\n */\nconst createOffer = (currentRoom, targetMid, iceRestart = false, restartOfferMsg) => {\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const initOptions = Skylink.getInitOptions();\n  const { enableDataChannel } = initOptions;\n  const {\n    peerConnections,\n    // sdpSettings,\n    hasMCU,\n    enableIceRestart,\n    peerInformations,\n    voiceActivityDetection,\n    peerConnStatus,\n    dataChannels,\n  } = state;\n  const { AdapterJS } = window;\n  const peerConnection = peerConnections[targetMid];\n\n  const offerConstraints = {\n    offerToReceiveAudio: !(!state.sdpSettings.connection.audio && targetMid !== PEER_TYPE.MCU) && SessionDescription.getSDPCommonSupports(targetMid, null, currentRoom.id).video,\n    offerToReceiveVideo: !(!state.sdpSettings.connection.video && targetMid !== PEER_TYPE.MCU) && SessionDescription.getSDPCommonSupports(targetMid, null, currentRoom.id).audio,\n    iceRestart: !!((peerInformations[targetMid] || {}).config || {}).enableIceRestart && iceRestart && enableIceRestart,\n    voiceActivityDetection,\n  };\n\n  if (hasMCU && typeof peerConnection.addTransceiver !== 'function') {\n    offerConstraints.offerToReceiveVideo = true;\n  }\n\n  // Add stream only at offer/answer end\n  if (!hasMCU || targetMid === PEER_TYPE.MCU) {\n    MediaStream.addLocalMediaStreams(targetMid, state);\n  }\n\n  if (enableDataChannel && peerInformations[targetMid].config.enableDataChannel) {\n    if (!(dataChannels[targetMid] && dataChannels[targetMid].main)) {\n      PeerConnection.createDataChannel({\n        peerId: targetMid,\n        roomState: state,\n        createAsMessagingChannel: true,\n      });\n      state.peerConnections[targetMid].hasMainChannel = true;\n    }\n  }\n\n  logger.log.DEBUG([targetMid, null, null, 'Creating offer with config:'], offerConstraints);\n\n  peerConnection.endOfCandidates = false;\n  peerConnection.negotiating = true;\n\n  if (peerConnStatus[targetMid]) {\n    state.peerConnStatus[targetMid].sdpConstraints = offerConstraints;\n  }\n\n  Skylink.setSkylinkState(state, currentRoom.id);\n\n  return new Promise((resolve, reject) => {\n    peerConnection.createOffer(AdapterJS.webrtcDetectedType === 'plugin' ? {\n      mandatory: {\n        OfferToReceiveAudio: offerConstraints.offerToReceiveAudio,\n        OfferToReceiveVideo: offerConstraints.offerToReceiveVideo,\n        iceRestart: offerConstraints.iceRestart,\n        voiceActivityDetection: offerConstraints.voiceActivityDetection,\n      },\n    } : offerConstraints)\n      .then(offer => onOfferCreated(resolve, targetMid, state, restartOfferMsg, offer))\n      .catch(error => onOfferFailed(reject, targetMid, state, error));\n  });\n};\n\nexport default createOffer;\n","import {\n  BUNDLE_POLICY, HANDSHAKE_PROGRESS, PEER_TYPE, BROWSER_AGENT,\n} from '../../../constants';\nimport Skylink from '../../../index';\nimport logger from '../../../logger';\nimport callbacks from './callbacks/index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { handshakeProgress } from '../../../skylink-events';\nimport { updateRemoveStream } from '../../../compatibility/index';\n\nconst createNativePeerConnection = (targetMid, constraints, optional, hasScreenShare, currentRoom) => {\n  const initOptions = Skylink.getInitOptions();\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const { AdapterJS } = window;\n  logger.log.DEBUG([targetMid, 'RTCPeerConnection', null, 'Creating peer connection ->'], {\n    constraints,\n    optional,\n  });\n  const { RTCPeerConnection, msRTCPeerConnection } = window;\n  const rtcPeerConnection = new (initOptions.useEdgeWebRTC && msRTCPeerConnection ? window.msRTCPeerConnection : RTCPeerConnection)(constraints, optional);\n  const callbackExtraParams = [rtcPeerConnection, targetMid, state];\n\n  // attributes (added on by Temasys)\n  rtcPeerConnection.setOffer = '';\n  rtcPeerConnection.setAnswer = '';\n  rtcPeerConnection.negotiating = false;\n  rtcPeerConnection.hasStream = false;\n  rtcPeerConnection.hasMainChannel = false;\n  rtcPeerConnection.firefoxStreamId = '';\n  rtcPeerConnection.processingLocalSDP = false;\n  rtcPeerConnection.processingRemoteSDP = false;\n  rtcPeerConnection.gathered = false;\n  rtcPeerConnection.gathering = false;\n  rtcPeerConnection.localStream = null;\n  rtcPeerConnection.localStreamId = null;\n\n  // Used for safari 11\n  rtcPeerConnection.iceConnectionStateClosed = false;\n  rtcPeerConnection.signalingStateClosed = false;\n\n  // candidates\n  state.gatheredCandidates[targetMid] = {\n    sending: { host: [], srflx: [], relay: [] },\n    receiving: { host: [], srflx: [], relay: [] },\n  };\n\n  // self._streamsSession[targetMid] = self._streamsSession[targetMid] || {}; from SkylinkJS\n  state.peerEndOfCandidatesCounter[targetMid] = state.peerEndOfCandidatesCounter[targetMid] || {};\n  state.sdpSessions[targetMid] = { local: {}, remote: {} };\n  state.peerBandwidth[targetMid] = {};\n  // state.peerStats[targetMid] = {}; // initialised only after peerConnationStatus === 'completed'\n\n  // FIXME: ESS-1620 - To check if still needed\n  if (targetMid === PEER_TYPE.MCU) {\n    logger.log.INFO('Creating an empty transceiver of kind video with MCU');\n    if (typeof rtcPeerConnection.addTransceiver === 'function') {\n      rtcPeerConnection.addTransceiver('video');\n    }\n  }\n\n  Skylink.setSkylinkState(state, currentRoom.id);\n\n  if (AdapterJS.webrtcDetectedBrowser === 'firefox') {\n    rtcPeerConnection.removeStream = updateRemoveStream(rtcPeerConnection);\n  }\n\n  /* CALLBACKS */\n  rtcPeerConnection.ontrack = callbacks.ontrack.bind(rtcPeerConnection, ...callbackExtraParams);\n  rtcPeerConnection.ondatachannel = callbacks.ondatachannel.bind(rtcPeerConnection, ...callbackExtraParams);\n  rtcPeerConnection.onicecandidate = callbacks.onicecandidate.bind(rtcPeerConnection, ...callbackExtraParams);\n  rtcPeerConnection.oniceconnectionstatechange = callbacks.oniceconnectionstatechange.bind(rtcPeerConnection, ...callbackExtraParams);\n  rtcPeerConnection.onsignalingstatechange = callbacks.onsignalingstatechange.bind(rtcPeerConnection, ...callbackExtraParams);\n  rtcPeerConnection.onicegatheringstatechange = callbacks.onicegatheringstatechange.bind(rtcPeerConnection, ...callbackExtraParams);\n\n  if (AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.REACT_NATIVE) {\n    rtcPeerConnection.onsenderadded = callbacks.onsenderadded.bind(rtcPeerConnection, ...callbackExtraParams);\n    rtcPeerConnection.onremovetrack = callbacks.onremovetrack.bind(rtcPeerConnection, targetMid, state.room, false);\n  }\n\n  return rtcPeerConnection;\n};\n\n/**\n * Function that creates the Peer Connection.\n * @param {JSON} params\n * @return {RTCPeerConnection} peerConnection\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @fires handshakeProgress\n */\nconst createPeerConnection = (params) => {\n  let peerConnection = null;\n  const {\n    currentRoom,\n    targetMid,\n    cert,\n    hasScreenShare,\n  } = params;\n  const initOptions = Skylink.getInitOptions();\n  const { filterCandidatesType } = initOptions;\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const {\n    peerConnectionConfig,\n    room,\n  } = state;\n  const constraints = {\n    iceServers: state.room.connection.peerConfig.iceServers,\n    iceTransportPolicy: filterCandidatesType.host && filterCandidatesType.srflx && !filterCandidatesType.relay ? 'relay' : 'all',\n    bundlePolicy: peerConnectionConfig.bundlePolicy === BUNDLE_POLICY.NONE ? BUNDLE_POLICY.BALANCED : peerConnectionConfig.bundlePolicy,\n    rtcpMuxPolicy: peerConnectionConfig.rtcpMuxPolicy,\n    iceCandidatePoolSize: peerConnectionConfig.iceCandidatePoolSize,\n  };\n  const optional = {\n    optional: [\n      { DtlsSrtpKeyAgreement: true },\n      { googIPv6: true },\n    ],\n  };\n\n  if (cert) {\n    constraints.certificates = [cert];\n  }\n\n  if (state.peerConnStatus[targetMid]) {\n    state.peerConnStatus[targetMid].constraints = constraints;\n    state.peerConnStatus[targetMid].optional = optional;\n  }\n\n  Skylink.setSkylinkState(state, currentRoom.id);\n\n  try {\n    peerConnection = createNativePeerConnection(targetMid, constraints, optional, hasScreenShare, currentRoom);\n  } catch (error) {\n    logger.log.ERROR([targetMid, null, null, 'Failed creating peer connection:'], error);\n    peerConnection = null;\n    dispatchEvent(handshakeProgress({\n      state: HANDSHAKE_PROGRESS.ERROR,\n      peerId: targetMid,\n      error,\n      room,\n    }));\n  }\n\n  return peerConnection;\n};\n\nexport default createPeerConnection;\n","import Skylink from '../../../index';\nimport { SDP_SEMANTICS } from '../../../constants';\nimport logger from '../../../logger/index';\nimport createPeerConnection from './createPeerConnection';\nimport HandleIceConnectionStats from '../../../skylink-stats/handleIceConnectionStats';\nimport handleIceGatheringStats from '../../../skylink-stats/handleIceGatheringStats';\n\n/**\n * Function that starts the Peer connection session.\n * @param {object} params - options required to create a PeerConnection\n * @param {SkylinkRoom} params.currentRoom - The currrent room\n * @param {String} params.targetMid - Peer's id\n * @param {Object} params.peerBrowser - Peer's user agent object\n * @param {RTCCertificate} params.cert - Represents a certificate that an RTCPeerConnection uses to authenticate.\n * @param {boolean} params.receiveOnly\n * @param {boolean} params.hasScreenshare - Is screenshare enabled\n * @memberOf PeerConnection.PeerConnectionHelpers\n */\nconst addPeer = (params) => {\n  let connection = null;\n  const {\n    currentRoom,\n    targetMid,\n    peerBrowser,\n    cert,\n    receiveOnly,\n    hasScreenShare,\n  } = params;\n  const initOptions = Skylink.getInitOptions();\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const { peerConnections, room } = state;\n  const handleIceConnectionStats = new HandleIceConnectionStats();\n\n  if (!peerConnections[targetMid]) {\n    state.peerConnStatus[targetMid] = {\n      connected: false,\n      init: false,\n    };\n\n    logger.log.INFO([targetMid, null, null, 'Starting the connection to peer. Options provided:'], {\n      peerBrowser,\n      receiveOnly,\n      enableDataChannel: initOptions.enableDataChannel,\n    });\n\n    connection = createPeerConnection({\n      currentRoom,\n      targetMid,\n      hasScreenShare,\n      cert,\n      sdpSemantics: SDP_SEMANTICS.UNIFIED,\n    });\n\n    try {\n      const config = connection.getConfiguration();\n      // connection.addTransceiver(\"video\");\n      if (config.sdpSemantics === SDP_SEMANTICS.UNIFIED) {\n        logger.log.INFO([targetMid, 'SDP Semantics', null, 'Peer Connection has Unified plan.']);\n      } else if (config.sdpSemantics === SDP_SEMANTICS.PLAN_B) {\n        logger.log.INFO([targetMid, 'SDP Semantics', null, 'Peer Connection has Plan-B.']);\n      } else {\n        logger.log.INFO([targetMid, 'SDP Semantics', null, 'The sdpSemantics parameter is not supported by this browser version.']);\n      }\n    } catch (ex) {\n      logger.log.INFO([targetMid, 'SDP Semantics', null, 'getConfiguration() is not available in this browser version. Ex : '], ex);\n    }\n\n    state.peerConnections[targetMid] = connection;\n    Skylink.setSkylinkState(state, currentRoom.id);\n    handleIceConnectionStats.send(room.id, connection.iceConnectionState, targetMid);\n    handleIceGatheringStats.send(room.id, 'new', targetMid, false);\n  } else {\n    logger.log.WARN([targetMid, null, null, 'Connection to peer has already been made.']);\n  }\n\n  return connection;\n};\n\nexport default addPeer;\n","import Skylink from '../../index';\nimport logger from '../../logger';\nimport { HANDSHAKE_PROGRESS, PEER_TYPE } from '../../constants';\nimport MediaStream from '../../media-stream/index';\nimport SessionDescription from '../../session-description';\nimport getCommonOfferAnswerMessage from '../../server-communication/signaling-server/message-builder/builders/commons/offerAndAnswer';\nimport handleNegotiationStats from '../../skylink-stats/handleNegotiationStats';\nimport MESSAGES from '../../messages';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { handshakeProgress } from '../../skylink-events';\n\nconst { STATS_MODULE: { HANDLE_NEGOTIATION_STATS } } = MESSAGES;\n\nconst onAnswerCreated = (resolve, targetMid, roomState, answer) => {\n  const { room } = roomState;\n\n  logger.log.DEBUG([targetMid, null, null, 'Created answer'], answer);\n  handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS.ANSWER.create, targetMid, answer, false);\n  getCommonOfferAnswerMessage(resolve, targetMid, roomState, answer);\n};\n\nconst onAnswerFailed = (reject, targetMid, roomState, error) => {\n  const { room } = roomState;\n\n  logger.log.ERROR([targetMid, null, null, 'Failed creating an answer:'], error);\n  handleNegotiationStats.send(room.id, HANDLE_NEGOTIATION_STATS.ANSWER.create_error, targetMid, null, false, error);\n  dispatchEvent(handshakeProgress({\n    state: HANDSHAKE_PROGRESS.ERROR,\n    peerId: targetMid,\n    error,\n    room: roomState.room,\n  }));\n  reject(error);\n};\n\n/**\n * @param {SkylinkState} roomState\n * @param {String} targetMid\n * @return {*}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @fires handshakeProgress\n */\nconst createAnswer = (roomState, targetMid) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const {\n    peerConnections,\n    hasMCU,\n    peerConnStatus,\n    voiceActivityDetection,\n  } = state;\n  const peerConnection = peerConnections[targetMid];\n  const { AdapterJS } = window;\n\n  logger.log.INFO([targetMid, null, null, 'Creating answer with config:'], roomState.room.connection.sdpConstraints);\n\n  const answerConstraints = AdapterJS.webrtcDetectedBrowser === 'edge' ? {\n    offerToReceiveVideo: !(!state.sdpSettings.connection.audio && targetMid !== PEER_TYPE.MCU) && SessionDescription.getSDPCommonSupports(targetMid, peerConnection.remoteDescription, roomState.room.id).video,\n    offerToReceiveAudio: !(!state.sdpSettings.connection.video && targetMid !== PEER_TYPE.MCU) && SessionDescription.getSDPCommonSupports(targetMid, peerConnection.remoteDescription, roomState.room.id).audio,\n    voiceActivityDetection,\n  } : undefined;\n\n  // Add stream only at offer/answer end\n  if (!hasMCU || targetMid === PEER_TYPE.MCU) {\n    MediaStream.addLocalMediaStreams(targetMid, roomState);\n  }\n\n  if (peerConnStatus[targetMid]) {\n    state.peerConnStatus[targetMid].sdpConstraints = answerConstraints;\n  }\n\n  // No ICE restart constraints for createAnswer as it fails in chrome 48\n  // { iceRestart: true }\n  return new Promise((resolve, reject) => peerConnection.createAnswer(answerConstraints)\n    .then(answer => onAnswerCreated(resolve, targetMid, roomState, answer))\n    .catch(error => onAnswerFailed(reject, targetMid, roomState, error)));\n};\n\nexport default createAnswer;\n","import logger from '../../../logger';\nimport Skylink from '../../../index';\nimport { onDataChannelStateChanged } from '../../../skylink-events';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport PeerConnection from '../..';\n\nimport {\n  PEER_CONNECTION_STATE,\n  DC_PROTOCOL_TYPE,\n  DATA_CHANNEL_MESSAGE_ERROR,\n  DATA_CHANNEL_STATE,\n} from '../../../constants';\n\n/**\n * Function that sends data over the DataChannel connection.\n * @private\n * @memberOf PeerConnection\n * @since 2.0.0\n * @fires onDataChannelStateChanged\n */\nconst sendMessageToDataChannel = (roomState, peerId, data, channelProperty, doNotConvert) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const peerConnection = state.peerConnections[peerId];\n  const dataChannel = state.dataChannels[peerId];\n  let channelProp = channelProperty;\n\n  if (!channelProp || channelProp === peerId) {\n    channelProp = 'main';\n  }\n\n  // TODO: What happens when we want to send binary data over or ArrayBuffers?\n  if (!(typeof data === 'object' && data) && !(data && typeof data === 'string')) {\n    logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Dropping invalid data ->'], data);\n    return null;\n  }\n\n  if (!(peerConnection && peerConnection.signalingState !== PEER_CONNECTION_STATE.CLOSED)) {\n    logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Dropping for sending message as Peer connection does not exists or is closed ->'], data);\n    return null;\n  }\n\n  if (!(dataChannel && dataChannel[channelProp])) {\n    logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Dropping for sending message as Datachannel connection does not exists ->'], data);\n    return null;\n  }\n\n  /* eslint-disable prefer-destructuring */\n  const channelName = dataChannel[channelProp].channelName;\n  const channelType = dataChannel[channelProp].channelType;\n  const readyState = dataChannel[channelProp].channel.readyState;\n  const messageType = typeof data === 'object' && data.type === DC_PROTOCOL_TYPE.MESSAGE ? DATA_CHANNEL_MESSAGE_ERROR.MESSAGE : DATA_CHANNEL_MESSAGE_ERROR.TRANSFER;\n\n  if (readyState !== DATA_CHANNEL_STATE.OPEN) {\n    const notOpenError = new Error(`Failed sending message as Datachannel connection state is not opened. Current readyState is ${readyState}`);\n    logger.log.ERROR([peerId, 'RTCDataChannel', channelProp, notOpenError], data);\n    dispatchEvent(onDataChannelStateChanged({\n      peerId,\n      channelName,\n      channelType,\n      messageType,\n      error: notOpenError,\n      state: DATA_CHANNEL_STATE.SEND_MESSAGE_ERROR,\n      bufferAmount: PeerConnection.getDataChannelBuffer(dataChannel[channelProp].channel),\n    }));\n    throw notOpenError;\n  }\n\n  try {\n    if (!doNotConvert && typeof data === 'object') {\n      logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, `Sending ${data.type} protocol message ->`], data);\n      dataChannel[channelProp].channel.send(JSON.stringify(data));\n    } else {\n      logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, 'Sending data with size ->'], data.size || data.length || data.byteLength);\n      dataChannel[channelProp].channel.send(data);\n    }\n  } catch (error) {\n    logger.log.ERROR([peerId, 'RTCDataChannel', channelProp, 'Failed sending data)'], { error, data });\n    dispatchEvent(onDataChannelStateChanged({\n      peerId,\n      channelName,\n      channelType,\n      messageType,\n      error,\n      state: DATA_CHANNEL_STATE.SEND_MESSAGE_ERROR,\n      bufferAmount: PeerConnection.getDataChannelBuffer(dataChannel[channelProp].channel),\n    }));\n    throw error;\n  }\n  return null;\n};\n\nexport default sendMessageToDataChannel;\n","import { DATA_CHANNEL_STATE, DATA_CHANNEL_TYPE, DC_PROTOCOL_TYPE } from '../../../constants';\nimport Skylink from '../../../index';\nimport logger from '../../../logger';\nimport { onDataChannelStateChanged, onIncomingMessage } from '../../../skylink-events';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport sendMessageToDataChannel from './sendMessageToDataChannel';\nimport PeerData from '../../../peer-data';\nimport PeerConnection from '../../index';\n\n/**\n * Function that handles the \"MESSAGE\" data transfer protocol.\n * @private\n * @lends PeerConnection\n * @param {SkylinkState} roomState\n * @since 2.0.0\n * @fires onIncomingMessage\n */\nconst messageProtocolHandler = (roomState, peerId, data, channelProp) => {\n  const senderPeerId = data.sender || peerId;\n  logger.log.INFO([senderPeerId, 'RTCDataChannel', channelProp, 'Received P2P message from peer:'], data);\n  dispatchEvent(onIncomingMessage({\n    room: roomState.room,\n    message: {\n      targetPeerId: data.target,\n      content: data.data,\n      senderPeerId,\n      isDataChannel: true,\n      isPrivate: data.isPrivate,\n    },\n    isSelf: false,\n    peerId: senderPeerId,\n    peerInfo: PeerData.getPeerInfo(senderPeerId, roomState.room),\n  }));\n};\n\n/**\n * Function that handles the data received from Datachannel and\n * routes to the relevant data transfer protocol handler.\n * @lends PeerConnection\n * @private\n * @since 2.0.0\n * @fires onDataChannelStateChanged\n */\nconst processDataChannelData = (roomState, rawData, peerId, channelName, channelType) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  let transferId = null;\n  let streamId = null;\n  // eslint-disable-next-line no-unused-vars\n  let isStreamChunk = false;\n  const channelProp = channelType === DATA_CHANNEL_TYPE.MESSAGING ? 'main' : channelName;\n\n  // Safe access of _dataChannel object in case dataChannel has been closed unexpectedly | ESS-983\n  /* eslint-disable prefer-destructuring */\n  /* eslint-disable no-prototype-builtins */\n  const objPeerDataChannel = state.dataChannels[peerId] || {};\n  if (objPeerDataChannel.hasOwnProperty(channelProp) && typeof objPeerDataChannel[channelProp] === 'object') {\n    transferId = objPeerDataChannel[channelProp].transferId;\n    streamId = objPeerDataChannel[channelProp].streamId;\n  } else {\n    return null; // dataChannel not avaialble propbably having being closed abruptly | ESS-983\n  }\n\n  if (streamId && state.dataStreams[streamId]) {\n    isStreamChunk = state.dataStreams[streamId].sessionChunkType === 'string' ? typeof rawData === 'string' : typeof rawData === 'object';\n  }\n\n  if (!state.peerConnections[peerId]) {\n    logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Dropping data received from Peer as connection is not present ->'], rawData);\n    return null;\n  }\n\n  if (!(state.dataChannels[peerId] && state.dataChannels[peerId][channelProp])) {\n    logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Dropping data received from Peer as Datachannel connection is not present ->'], rawData);\n    return null;\n  }\n\n  // Expect as string\n  if (typeof rawData === 'string') {\n    try {\n      const protocolData = JSON.parse(rawData);\n      isStreamChunk = false;\n\n      logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, `Received protocol ${protocolData.type} message ->`], protocolData);\n\n      // Ignore ACK, ERROR and CANCEL if there is no data transfer session in-progress\n      if ([DC_PROTOCOL_TYPE.ACK, DC_PROTOCOL_TYPE.ERROR, DC_PROTOCOL_TYPE.CANCEL].indexOf(protocolData.type) > -1\n        && !(transferId && state.dataTransfers[transferId] && state.dataTransfers[transferId].sessions[peerId])) {\n        logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Discarded protocol message as data transfer session is not present ->'], protocolData);\n        return null;\n      }\n\n      // TODO: Complete other DataChannel handlers in the below switch case\n      switch (protocolData.type) {\n        case DC_PROTOCOL_TYPE.WRQ:\n          // Discard iOS bidirectional upload when Datachannel is in-progress for data transfers\n          if (transferId && state.dataTransfers[transferId] && state.dataTransfers[transferId].sessions[peerId]) {\n            logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Rejecting bidirectional data transfer request as it is currently not supported in the SDK ->'], protocolData);\n            sendMessageToDataChannel(roomState, peerId, {\n              type: DC_PROTOCOL_TYPE.ACK,\n              ackN: -1,\n              sender: state.user.sid,\n            }, channelProp);\n            break;\n          }\n          // self._WRQProtocolHandler(peerId, protocolData, channelProp);\n          break;\n        // case self._DC_PROTOCOL_TYPE.ACK:\n        //   self._ACKProtocolHandler(peerId, protocolData, channelProp);\n        //   break;\n        // case self._DC_PROTOCOL_TYPE.ERROR:\n        //   self._ERRORProtocolHandler(peerId, protocolData, channelProp);\n        //   break;\n        // case self._DC_PROTOCOL_TYPE.CANCEL:\n        //   self._CANCELProtocolHandler(peerId, protocolData, channelProp);\n        //   break;\n        case DC_PROTOCOL_TYPE.MESSAGE:\n          messageProtocolHandler(state, peerId, protocolData, channelProp);\n          break;\n        default:\n          logger.log.WARN([peerId, 'RTCDataChannel', channelProp, `Discarded unknown ${protocolData.type} message ->`], protocolData);\n      }\n    } catch (error) {\n      // if (rawData.indexOf('{') > -1 && rawData.indexOf('}') > 0) {\n      //   logger.log.ERROR([peerId, 'RTCDataChannel', channelProp, 'Failed parsing protocol step data error ->'], {\n      //     data: rawData,\n      //     error,\n      //   });\n      //\n\n      dispatchEvent(onDataChannelStateChanged({\n        peerId,\n        channelName,\n        channelType,\n        error,\n        state: DATA_CHANNEL_STATE.ERROR,\n        bufferAmount: PeerConnection.getDataChannelBuffer(state.dataChannels[peerId][channelProp].channel),\n      }));\n      //   throw error;\n      // }\n      //\n      // if (!isStreamChunk && !(transferId && state.dataTransfers[transferId] && state.dataTransfers[transferId].sessions[peerId])) {\n      //   logger.log.WARN([peerId, 'RTCDataChannel', channelProp, 'Discarded data chunk without session ->'], rawData);\n      //   return null;\n      // }\n      //\n      // if (!isStreamChunk && transferId) {\n      //   if (state.dataTransfers[transferId].chunks[state.dataTransfers[transferId].sessions[peerId].ackN]) {\n      //     logger.log.WARN([peerId, 'RTCDataChannel', transferId, 'Dropping data chunk ' + (!isStreamChunk ? '@' +\n      //       state.dataTransfers[transferId].sessions[peerId].ackN : '') + ' as it has already been added ->'], rawData);\n      //     return null;\n      //   }\n      // }\n      //\n      // if (!isStreamChunk ? self._dataTransfers[transferId].dataType === self.DATA_TRANSFER_SESSION_TYPE.DATA_URL : true) {\n      //   log.debug([peerId, 'RTCDataChannel', channelProp, 'Received string data chunk ' + (!isStreamChunk ? '@' +\n      //     self._dataTransfers[transferId].sessions[peerId].ackN : '') + ' with size ->'], rawData.length || rawData.size);\n      //\n      //   self._DATAProtocolHandler(peerId, rawData, self.DATA_TRANSFER_DATA_TYPE.STRING,\n      //     rawData.length || rawData.size || 0, channelProp);\n      //\n      // } else {\n      //   var removeSpaceData = rawData.replace(/\\s|\\r|\\n/g, '');\n      //\n      //   log.debug([peerId, 'RTCDataChannel', channelProp, 'Received binary string data chunk @' +\n      //     self._dataTransfers[transferId].sessions[peerId].ackN + ' with size ->'],\n      //     removeSpaceData.length || removeSpaceData.size);\n      //\n      //   self._DATAProtocolHandler(peerId, self._base64ToBlob(removeSpaceData), self.DATA_TRANSFER_DATA_TYPE.BINARY_STRING,\n      //     removeSpaceData.length || removeSpaceData.size || 0, channelProp);\n      // }\n    }\n  } else {\n    // if (!isStreamChunk && !(transferId && self._dataTransfers[transferId] && self._dataTransfers[transferId].sessions[peerId])) {\n    //   log.warn([peerId, 'RTCDataChannel', channelProp, 'Discarded data chunk without session ->'], rawData);\n    //   return;\n    // }\n    //\n    // if (!isStreamChunk && transferId) {\n    //   if (self._dataTransfers[transferId].chunks[self._dataTransfers[transferId].sessions[peerId].ackN]) {\n    //     log.warn([peerId, 'RTCDataChannel', transferId, 'Dropping data chunk ' + (!isStreamChunk ? '@' +\n    //       self._dataTransfers[transferId].sessions[peerId].ackN : '') + ' as it has already been added ->'], rawData);\n    //     return;\n    //   }\n    // }\n    //\n    // if (rawData instanceof Blob) {\n    //   log.debug([peerId, 'RTCDataChannel', channelProp, 'Received blob data chunk ' + (isStreamChunk ? '' :\n    //     '@' + self._dataTransfers[transferId].sessions[peerId].ackN) + ' with size ->'], rawData.size);\n    //\n    //   self._DATAProtocolHandler(peerId, rawData, self.DATA_TRANSFER_DATA_TYPE.BLOB, rawData.size, channelProp);\n    //\n    // } else {\n    //   var byteArray = rawData;\n    //   var blob = null;\n    //\n    //   // Plugin binary handling\n    //   if (rawData.constructor && rawData.constructor.name === 'Array') {\n    //     // Need to re-parse on some browsers\n    //     byteArray = new Int8Array(rawData);\n    //   }\n    //\n    //   // Fallback for older IE versions\n    //   if (AdapterJS.webrtcDetectedBrowser === 'IE') {\n    //     if (window.BlobBuilder) {\n    //       var bb = new BlobBuilder();\n    //       bb.append(rawData.constructor && rawData.constructor.name === 'ArrayBuffer' ?\n    //         byteArray : (new Uint8Array(byteArray)).buffer);\n    //       blob = bb.getBlob();\n    //     }\n    //   } else {\n    //     blob = new Blob([byteArray]);\n    //   }\n    //\n    //   log.debug([peerId, 'RTCDataChannel', channelProp, 'Received arraybuffer data chunk ' + (isStreamChunk ? '' :\n    //     '@' + self._dataTransfers[transferId].sessions[peerId].ackN) + ' with size ->'], blob.size);\n    //\n    //   self._DATAProtocolHandler(peerId, blob, self.DATA_TRANSFER_DATA_TYPE.ARRAY_BUFFER, blob.size, channelProp);\n    // }\n  }\n  return null;\n};\n\nexport default processDataChannelData;\n","import processDataChannelData from '../processDataChannelData';\n\n/**\n * @param {Object} params\n * @param {Event} event\n * @memberOf PeerConnection.PeerConnectionHelpers.CreateDataChannelCallbacks\n */\nconst onmessage = (params, event) => {\n  const {\n    peerId,\n    channelName,\n    channelType,\n    roomState,\n  } = params;\n\n  processDataChannelData(roomState, event.data, peerId, channelName, channelType);\n};\n\nexport default onmessage;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\n\nclass HandleDataChannelStats extends SkylinkStats {\n  constructor() {\n    super();\n    const { AdapterJS } = window;\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      peer_id: null,\n      state: null,\n      channel_id: null,\n      channel_label: null,\n      channel_type: null,\n      channel_binary_type: null,\n      error: null,\n      agent_name: AdapterJS.webrtcDetectedBrowser,\n      agent_type: AdapterJS.webrtcDetectedType,\n      agent_version: AdapterJS.webrtcDetectedVersion,\n    };\n  }\n\n  send(roomKey, state, peerId, channel, channelProp, error) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n    this.model.room_id = roomKey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.uid) || null;\n    this.model.peer_id = peerId;\n    this.model.client_id = roomState.clientId;\n    this.model.state = state;\n    this.model.channel = channel;\n    this.model.channel_id = channel.id;\n    this.model.channel_label = channel.label;\n    this.model.channel_type = channelProp === 'main' ? 'persistent' : 'temporal';\n    this.model.channel_binary_type = channel.binaryType;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n    this.error = (typeof error === 'string' ? error : (error && error.message)) || null;\n\n    if (this.model.agent_name === 'plugin') {\n      this.model.channel_binary_type = 'int8Array';\n\n      // For IE 10 and below browsers, binary support is not available.\n      if (this.model.agent_name === 'IE' && this.model.agent_version < 11) {\n        this.model.channel_binary_type = 'none';\n      }\n    }\n\n    this.postStats(this.endpoints.dataChannel, this.model);\n  }\n}\n\nexport default HandleDataChannelStats;\n","import logger from '../../../../logger';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { onDataChannelStateChanged } from '../../../../skylink-events';\nimport PeerConnection from '../../../index';\nimport { DATA_CHANNEL_STATE } from '../../../../constants';\nimport Skylink from '../../../../index';\nimport HandleDataChannelStats from '../../../../skylink-stats/handleDataChannelStats';\n\n/**\n *\n * @param {Object} params\n * @param {Error} error\n * @fires onDataChannelStateChanged\n * @memberOf PeerConnection.PeerConnectionHelpers.CreateDataChannelCallbacks\n */\nconst onerror = (params, error) => {\n  const {\n    dataChannel,\n    peerId,\n    channelName,\n    channelProp,\n    channelType,\n    roomState,\n  } = params;\n  if (error.error.errorDetail !== 'NONE') {\n    const state = Skylink.getSkylinkState(roomState.room.id);\n    const { room } = state;\n    const handleDataChannelStats = new HandleDataChannelStats();\n\n    logger.log.ERROR([peerId, 'RTCDataChannel', channelProp, 'Datachannel has an exception ->'], error);\n    handleDataChannelStats.send(room.id, DATA_CHANNEL_STATE.ERROR, peerId, dataChannel, channelProp, error);\n    dispatchEvent(onDataChannelStateChanged({\n      state: DATA_CHANNEL_STATE.ERROR,\n      room,\n      peerId,\n      channelName,\n      channelType,\n      bufferAmount: PeerConnection.getDataChannelBuffer(dataChannel),\n      error,\n    }));\n  } else {\n    // \"Transport channel close\" error triggered on calling dataChannel.close()\n    logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, 'Datachannel state ->'], error.error.message);\n  }\n};\n\nexport default onerror;\n","import { onDataChannelStateChanged } from '../../../../skylink-events';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport logger from '../../../../logger';\nimport { DATA_CHANNEL_STATE } from '../../../../constants';\nimport messages from '../../../../messages';\nimport PeerConnection from '../../../index';\nimport HandleDataChannelStats from '../../../../skylink-stats/handleDataChannelStats';\n\n/**\n * @param {Object} params\n * @fires onDataChannelStateChanged\n * @memberOf PeerConnection.PeerConnectionHelpers.CreateDataChannelCallbacks\n */\nconst onopen = (params) => {\n  const {\n    dataChannel,\n    channelProp,\n    channelName,\n    channelType,\n    peerId,\n    roomState,\n    bufferThreshold,\n  } = params;\n  const handleDataChannelStats = new HandleDataChannelStats();\n  const { room } = roomState;\n  const { STATS_MODULE } = messages;\n\n  logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, 'Datachannel has opened']);\n  dataChannel.bufferedAmountLowThreshold = bufferThreshold || 0;\n  handleDataChannelStats.send(room.id, STATS_MODULE.HANDLE_DATA_CHANNEL_STATS.closed, peerId, dataChannel, channelProp);\n  dispatchEvent(onDataChannelStateChanged({\n    state: DATA_CHANNEL_STATE.OPEN,\n    peerId,\n    channelName,\n    channelType,\n    bufferAmount: PeerConnection.getDataChannelBuffer(dataChannel),\n  }));\n};\n\nexport default onopen;\n","import logger from '../../../../logger';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { onDataChannelStateChanged } from '../../../../skylink-events';\nimport PeerConnection from '../../../index';\nimport { DATA_CHANNEL_STATE } from '../../../../constants';\nimport Skylink from '../../../../index';\n\n/**\n *\n * @param {Object} params\n * @fires onDataChannelStateChanged\n * @memberOf PeerConnection.PeerConnectionHelpers.CreateDataChannelCallbacks\n */\nconst onbufferedamountlow = (params) => {\n  const {\n    dataChannel,\n    peerId,\n    channelName,\n    channelProp,\n    channelType,\n    roomState,\n  } = params;\n\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const { room } = state;\n  logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, 'Datachannel buffering data transfer low']);\n\n  dispatchEvent(onDataChannelStateChanged({\n    state: DATA_CHANNEL_STATE.BUFFERED_AMOUNT_LOW,\n    room,\n    peerId,\n    channelName,\n    channelType,\n    bufferAmount: PeerConnection.getDataChannelBuffer(dataChannel),\n  }));\n};\n\nexport default onbufferedamountlow;\n","import logger from '../../../../logger';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { dataTransferState, onDataChannelStateChanged } from '../../../../skylink-events';\nimport {\n  DATA_CHANNEL_STATE, DATA_CHANNEL_TYPE, PEER_CONNECTION_STATE, HANDSHAKE_PROGRESS,\n} from '../../../../constants';\nimport Skylink from '../../../../index';\nimport messages from '../../../../messages';\nimport HandleDataChannelStats from '../../../../skylink-stats/handleDataChannelStats';\nimport PeerConnection from '../../../index';\n\nconst getTransferIDByPeerId = (pid, state) => {\n  const { dataTransfers } = state;\n  const transferIds = Object.keys(dataTransfers);\n\n  for (let i = 0; i < transferIds.length; i += 1) {\n    if (transferIds[i].indexOf(pid) !== -1) {\n      return transferIds[i];\n    }\n  }\n  return null;\n};\n\n/**\n * @param {Object} params\n * @fires onDataChannelStateChanged\n * @fires dataTransferState\n * @memberOf PeerConnection.PeerConnectionHelpers.CreateDataChannelCallbacks\n */\nconst onclose = (params) => {\n  const {\n    dataChannel,\n    peerId,\n    channelName,\n    channelProp,\n    channelType,\n    roomState,\n  } = params;\n  const { DATA_CHANNEL, STATS_MODULE } = messages;\n  const state = Skylink.getSkylinkState(roomState.room.id) || Object.values(Skylink.getSkylinkState())[0]; // to handle leaveAllRooms method\n\n  if (!state) {\n    return;\n  }\n\n  const { room, peerConnections } = state;\n  const transferId = getTransferIDByPeerId(peerId, state);\n  const handleDataChannelStats = new HandleDataChannelStats();\n\n  logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, DATA_CHANNEL.closed]);\n\n  try {\n    handleDataChannelStats.send(room.id, STATS_MODULE.HANDLE_DATA_CHANNEL_STATS.closed, peerId, dataChannel, channelProp);\n    dispatchEvent(onDataChannelStateChanged({\n      state: DATA_CHANNEL_STATE.CLOSED,\n      peerId,\n      room,\n      channelName,\n      channelType,\n      bufferAmount: PeerConnection.getDataChannelBuffer(dataChannel),\n    }));\n\n    // ESS-983 Handling dataChannel unexpected close to trigger dataTransferState Error.\n    if (transferId) {\n      dispatchEvent(dataTransferState({\n        state: DATA_CHANNEL_STATE.ERROR,\n        transferId,\n        peerId,\n        transferInfo: null, // TODO: implement self._getTransferInfo(transferId, peerId, true, false, false) data-transfer\n        error: new Error(DATA_CHANNEL.closed),\n      }));\n    }\n\n    if (peerConnections[peerId] && peerConnections[peerId].remoteDescription\n      && peerConnections[peerId].remoteDescription.sdp && (peerConnections[peerId].remoteDescription.sdp.indexOf(\n      'm=application',\n    ) === -1 || peerConnections[peerId].remoteDescription.sdp.indexOf('m=application 0') > 0)) {\n      return;\n    }\n\n    if (channelType === DATA_CHANNEL_TYPE.MESSAGING) {\n      setTimeout(() => {\n        if (peerConnections[peerId]\n          && peerConnections[peerId].signalingState !== PEER_CONNECTION_STATE.CLOSED\n          && (peerConnections[peerId].localDescription\n            && peerConnections[peerId].localDescription.type === HANDSHAKE_PROGRESS.OFFER)) {\n          logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, DATA_CHANNEL.reviving_dataChannel]);\n\n          PeerConnection.createDataChannel({\n            peerId,\n            dataChannel,\n            bufferThreshold: PeerConnection.getDataChannelBuffer(dataChannel),\n            createAsMessagingChannel: true,\n            roomState: state,\n          });\n          handleDataChannelStats.send(room.id, STATS_MODULE.HANDLE_DATA_CHANNEL_STATS.reconnecting, peerId, { label: channelName }, 'main');\n        }\n      }, 100);\n    }\n  } catch (error) {\n    logger.log.WARN([peerId, 'RTCDataChannel', channelProp, DATA_CHANNEL.closed]);\n  }\n};\n\nexport default onclose;\n","import {\n  DATA_STREAM_STATE,\n  DATA_TRANSFER_STATE,\n  ON_INCOMING_DATA,\n  ON_INCOMING_DATA_REQUEST,\n  ON_INCOMING_DATA_STREAM,\n  ON_INCOMING_DATA_STREAM_STARTED,\n  ON_INCOMING_DATA_STREAM_STOPPED,\n} from './constants';\n\nimport SkylinkEvent from '../utils/skylinkEvent';\n\n/**\n * @description Event triggered when a data streaming state has changed.\n * @event SkylinkEvents.dataStreamState\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.DATA_STREAM_STATE} detail.state The current data streaming state.\n * @param {String} detail.streamId The data streaming session ID.\n *   Note that this is defined as <code>null</code> when <code>state</code> payload is <code>START_ERROR</code>.\n * @param {String} detail.peerId The Peer ID.\n *   Note that this could be defined as <code>null</code> when <code>state</code> payload is\n *   <code>START_ERROR</code> and there is no Peers to start data streaming with.\n * @param {JSON} detail.streamInfo The data streaming information.\n * @param {Blob|String} [detail.streamInfo.chunk] The data chunk received.\n *   Defined only when <code>state</code> payload is <code>RECEIVED</code> or <code>SENT</code>.\n * @param {Number} detail.streamInfo.chunkSize The data streaming data chunk size received.\n * @param {SkylinkConstants.DATA_TRANSFER_DATA_TYPE} detail.streamInfo.chunkType The data streaming data chunk type received.\n *   The initial data chunks value may change depending on the currently received data chunk type or the\n *   agent supported sending type of data chunks.\n * @param {String} detail.streamInfo.isStringStream The flag if data streaming data chunks are strings.\n * @param {Boolean} detail.streamInfo.isPrivate The flag if data streaming is targeted or not, basing\n *   off the <code>targetPeerId</code> parameter being defined in\n *   {@link Skylink#startStreamingData}.\n * @param {String} detail.streamInfo.senderPeerId The sender Peer ID.\n * @param {Error} [detail.error] The error object.\n *   Defined only when <code>state</code> payload is <code>ERROR</code> or <code>START_ERROR</code>.\n * @ignore\n */\nexport const dataStreamState = detail => new SkylinkEvent(DATA_STREAM_STATE, { detail });\n\n/**\n * @description Event triggered when a data transfer state has changed.\n * @event SkylinkEvents.dataTransferState\n * @param {Object} detail - Event's payload.\n * @param {SkylinkConstants.DATA_TRANSFER_STATE} detail.state The current data transfer state.\n * @param {String} detail.transferId The data transfer ID.\n *   Note that this is defined as <code>null</code> when <code>state</code> payload is <code>START_ERROR</code>.\n * @param {String} detail.peerId The Peer ID.\n *   Note that this could be defined as <code>null</code> when <code>state</code> payload is\n *   <code>START_ERROR</code> and there is no Peers to start data transfer with.\n * @param {JSON} detail.transferInfo The data transfer information.\n * @param {Blob|String} [detail.transferInfo.data] The data object.\n *   Defined only when <code>state</code> payload is <code>UPLOAD_STARTED</code> or\n *   <code>DOWNLOAD_COMPLETED</code>.\n * @param {String} detail.transferInfo.name The data transfer name.\n * @param {Number} detail.transferInfo.size The data transfer data object size.\n * @param {SkylinkConstants.DATA_TRANSFER_SESSION_TYPE} detail.transferInfo.dataType The data transfer session type.\n * @param {SkylinkConstants.DATA_TRANSFER_DATA_TYPE} detail.transferInfo.chunkType The data transfer type of data chunk being used to send to Peer for transfers.\n *   For {@link Skylink#sendBlobData} data transfers, the\n *   initial data chunks value may change depending on the currently received data chunk type or the\n *   agent supported sending type of data chunks.\n *   For {@link Skylink#sendURLData} data transfers, it is\n *   <code>STRING</code> always.\n * @param {String} [detail.transferInfo.mimeType] The data transfer data object MIME type.\n *   Defined only when {@link Skylink#sendBlobData}\n *   data object sent MIME type information is defined.\n * @param {Number} detail.transferInfo.chunkSize The data transfer data chunk size.\n * @param {Number} detail.transferInfo.percentage The data transfer percentage of completion progress.\n * @param {Number} detail.transferInfo.timeout The flag if data transfer is targeted or not, basing\n *   off the <code>targetPeerId</code> parameter being defined in\n *   {@link Skylink#sendURLData} or\n *   {@link Skylink#sendBlobData}.\n * @param {Boolean} detail.transferInfo.isPrivate The flag if message is targeted or not, basing\n *   off the <code>targetPeerId</code> parameter being defined in\n *   {@link Skylink#sendBlobData} or\n *   {@link Skylink#sendURLData}.\n * @param {SkylinkConstants.DATA_TRANSFER_TYPE} detail.transferInfo.direction The data transfer direction.\n * @param {JSON} [detail.error] The error result.\n *   Defined only when <code>state</code> payload is <code>ERROR</code>, <code>CANCEL</code>,\n *   <code>REJECTED</code>, <code>START_ERROR</code> or <code>USER_REJECTED</code>.\n * @param {Error|String} detail.error.message The error object.\n * @param {SkylinkConstants.DATA_TRANSFER_TYPE} detail.error.transferType The data transfer direction from where the error occurred.\n * @ignore\n */\nexport const dataTransferState = detail => new SkylinkEvent(DATA_TRANSFER_STATE, { detail });\n\n/**\n * @description Event triggered when receiving completed data transfer from Peer.\n * @event SkylinkEvents.onIncomingData\n * @param {Object} detail - Event's payload.\n * @param {Blob|String} detail.data The data.\n * @param {String} detail.transferId The data transfer ID.\n * @param {String} detail.peerId The Peer ID.\n * @param {JSON} detail.transferInfo The data transfer information.\n *   Object signature matches the <code>transferInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:dataTransferState|dataTransferStateEvent}\n *   except without the <code>data</code> property.\n * @param {Boolean} detail.isSelf The flag if Peer is User.\n * @ignore\n */\nexport const onIncomingData = detail => new SkylinkEvent(ON_INCOMING_DATA, { detail });\n\n/**\n * @description Event triggered when receiving upload data transfer from Peer.\n * @event SkylinkEvents.onIncomingDataRequest\n * @param {Object} detail - Event's payload.\n * @param {String} detail.transferId The transfer ID.\n * @param {String} detail.peerId The Peer ID.\n * @param {String} detail.transferInfo The data transfer information.\n *   Object signature matches the <code>transferInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:dataTransferState|dataTransferStateEvent}\n *   except without the <code>data</code> property.\n * @param {Boolean} detail.isSelf The flag if Peer is User.\n * @ignore\n */\nexport const onIncomingDataRequest = detail => new SkylinkEvent(ON_INCOMING_DATA_REQUEST, { detail });\n\n/**\n * @description Event triggered when data streaming session has been stopped from Peer to User.\n * @event SkylinkEvents.onIncomingDataStream\n * @param {Object} detail - Event's payload.\n * @param {Blob|String} detail.chunk The data chunk received.\n * @param {String} detail.streamId The data streaming session ID.\n * @param {String} detail.peerId The Peer ID.\n * @param {JSON} detail.streamInfo The data streaming session information.\n *   Object signature matches the <code>streamInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:dataStreamState|dataStreamStateEvent}\n *   except without the <code>chunk</code> property.\n * @param {Boolean} detail.isSelf The flag if Peer is User.\n * @ignore\n */\nexport const onIncomingDataStream = detail => new SkylinkEvent(ON_INCOMING_DATA_STREAM, { detail });\n\n/**\n * @description Event triggered when data streaming session has been started from Peer to User.\n * @event SkylinkEvents.onIncomingDataStreamStarted\n * @param {Object} detail - Event's payload.\n * @param {String} detail.streamId The data streaming session ID.\n * @param {String} detail.peerId The Peer ID.\n * @param {JSON} detail.streamInfo The data streaming session information.\n *   Object signature matches the <code>streamInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:dataStreamState|dataStreamStateEvent}\n *   except without the <code>chunk</code> property.\n * @param {Boolean} detail.isSelf The flag if Peer is User.\n * @ignore\n */\nexport const onIncomingDataStreamStarted = detail => new SkylinkEvent(ON_INCOMING_DATA_STREAM_STARTED, { detail });\n\n/**\n * @description Event triggered when data streaming session has been stopped from Peer to User.\n * @event SkylinkEvents.onIncomingDataStreamStopped\n * @param {Object} detail - Event's payload.\n * @param {String} detail.streamId The data streaming session ID.\n * @param {String} detail.peerId The Peer ID.\n * @param {JSON} detail.streamInfo The data streaming session information.\n *   Object signature matches the <code>streamInfo</code> parameter payload received in the\n *   {@link SkylinkEvents.event:dataStreamState|dataStreamStateEvent}\n *   except without the <code>chunk</code> property.\n * @param {Boolean} detail.isSelf The flag if Peer is User.\n * @ignore\n */\nexport const onIncomingDataStreamStopped = detail => new SkylinkEvent(ON_INCOMING_DATA_STREAM_STOPPED, { detail });\n","import onmessage from './onmessage';\nimport onerror from './onerror';\nimport onopen from './onopen';\nimport onbufferedamountlow from './onbufferedamountlow';\nimport onclose from './onclose';\n\n/**\n * @description Callbacks for createDataChannel method\n * @type {{onopen, onmessage, onerror, onbufferedamountlow, onclose}}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @namespace CreateDataChannelCallbacks\n * @private\n */\nconst callbacks = {\n  onopen,\n  onmessage,\n  onerror,\n  onbufferedamountlow,\n  onclose,\n};\n\nexport default callbacks;\n","import Skylink from '../../../index';\nimport logger from '../../../logger';\nimport { DATA_CHANNEL_TYPE, PEER_CONNECTION_STATE, DATA_CHANNEL_STATE } from '../../../constants';\nimport callbacks from './callbacks/index';\nimport { onDataChannelStateChanged } from '../../../skylink-events/datachannel-events';\nimport PeerConnection from '../..';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport HandleDataChannelStats from '../../../skylink-stats/handleDataChannelStats';\n\n/* eslint-disable prefer-const */\n/**\n * @param params\n * @returns {null}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @fires onDataChannelStateChanged\n */\nconst createDataChannel = (params) => {\n  let {\n    peerId,\n    dataChannel,\n    bufferThreshold,\n    createAsMessagingChannel,\n    roomState,\n  } = params;\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const { user, peerConnections, dataChannels } = state;\n  const peerConnection = peerConnections[peerId];\n  let channelName = `-_${peerId}`;\n  let channelType = createAsMessagingChannel === true ? DATA_CHANNEL_TYPE.MESSAGING : DATA_CHANNEL_TYPE.DATA;\n  let channelProp = channelType === DATA_CHANNEL_TYPE.MESSAGING ? 'main' : channelName;\n  if (user && user.sid) {\n    channelName = `${user.sid}_${peerId}`;\n  } else {\n    logger.log.ERROR([peerId, 'RTCDataChannel', channelProp, 'Aborting of creating or initializing DataChannel as User does not have Room session']);\n    return null;\n  }\n\n  if (!(peerConnection && peerConnection.signalingState !== PEER_CONNECTION_STATE.CLOSED)) {\n    logger.log.ERROR([peerId, 'RTCDataChannel', channelProp, 'Aborting of creating or initializing Datachannel as Peer connection does not exists']);\n    return null;\n  }\n\n  if (dataChannel && typeof dataChannel === 'object') {\n    channelName = dataChannel.label;\n  } else if (typeof dataChannel === 'string') {\n    channelName = dataChannel;\n    dataChannel = null;\n  }\n\n  if (!dataChannels[peerId]) {\n    channelProp = 'main';\n    channelType = DATA_CHANNEL_TYPE.MESSAGING;\n    dataChannels[peerId] = {};\n    logger.log.DEBUG([peerId, 'RTCDataChannel', channelProp, 'initializing main DataChannel']);\n  } else if (dataChannels[peerId].main && dataChannels[peerId].main.channel.label === channelName) {\n    channelProp = 'main';\n    channelType = DATA_CHANNEL_TYPE.MESSAGING;\n  }\n\n  if (!dataChannel) {\n    try {\n      dataChannel = peerConnection.createDataChannel(channelName, {\n        reliable: true,\n        ordered: true,\n      });\n    } catch (error) {\n      logger.log.ERROR([peerId, 'RTCDataChannel', channelProp, 'Failed creating Datachannel ->'], error);\n\n      const handleDataChannelStats = new HandleDataChannelStats();\n      const { room } = roomState;\n\n      handleDataChannelStats.send(room.id, DATA_CHANNEL_STATE.ERROR, peerId, { label: channelName }, channelProp, error);\n      dispatchEvent(onDataChannelStateChanged({\n        state: DATA_CHANNEL_STATE.CREATE_ERROR,\n        peerId,\n        error,\n        channelName,\n        channelType,\n        buferAmount: PeerConnection.getDataChannelBuffer(dataChannel),\n      }));\n      return null;\n    }\n  }\n\n  const callbackExtraParams = {\n    dataChannel,\n    peerId,\n    channelName,\n    channelProp,\n    channelType,\n    roomState,\n    bufferThreshold,\n  };\n\n  dataChannel.onopen = callbacks.onopen.bind(dataChannel, callbackExtraParams);\n  dataChannel.onmessage = callbacks.onmessage.bind(dataChannel, callbackExtraParams);\n  dataChannel.onerror = callbacks.onerror.bind(dataChannel, callbackExtraParams);\n  dataChannel.onbufferedamountlow = callbacks.onbufferedamountlow.bind(dataChannel, callbackExtraParams);\n  dataChannel.onclose = callbacks.onclose.bind(dataChannel, callbackExtraParams);\n\n  const channel = channelType === DATA_CHANNEL_TYPE.MESSAGING ? 'main' : channelName;\n  state.dataChannels[peerId][channel] = {\n    channelName,\n    channelType,\n    transferId: null,\n    streamId: null,\n    channel: dataChannel,\n  };\n\n  Skylink.setSkylinkState(state, roomState.room.id);\n\n  return null;\n};\n\nexport default createDataChannel;\n","import Skylink from '../../../index';\nimport logger from '../../../logger';\nimport sendMessageToDataChannel from './sendMessageToDataChannel';\nimport { DC_PROTOCOL_TYPE, PEER_TYPE } from '../../../constants';\nimport { onIncomingMessage } from '../../../skylink-events';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport PeerData from '../../../peer-data';\nimport { getRoomStateByName } from '../../../utils/helpers';\n\n/**\n * @param message\n * @param {String} targetPeerId\n * @param {SkylinkState} roomState\n * @returns {null}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @fires onIncomingMessage\n */\nconst sendP2PMessageForRoom = (roomState, message, targetPeerId) => {\n  const initOptions = Skylink.getInitOptions();\n  const {\n    dataChannels,\n    inRoom,\n    user,\n    hasMCU,\n  } = roomState;\n\n  let listOfPeers = Object.keys(dataChannels);\n  let isPrivate = false;\n\n  if (Array.isArray(targetPeerId) && targetPeerId.length) {\n    listOfPeers = targetPeerId;\n    isPrivate = true;\n  } else if (targetPeerId && typeof targetPeerId === 'string') {\n    listOfPeers = [targetPeerId];\n    isPrivate = true;\n  }\n\n  if (!inRoom || !(user && user.sid)) {\n    logger.log.ERROR('Unable to send message as User is not in Room. ->', message);\n    return null;\n  }\n\n  if (!initOptions.enableDataChannel) {\n    logger.log.ERROR('Unable to send message as User does not have DataChannel enabled. ->', message);\n    return null;\n  }\n\n  // Loop out unwanted Peers\n  for (let i = 0; i < listOfPeers.length; i += 1) {\n    const peerId = listOfPeers[i];\n\n    if (!dataChannels[peerId] && !hasMCU) {\n      logger.log.ERROR([peerId, 'RTCDataChannel', null, 'Dropping of sending message to Peer as DataChannel connection does not exist.']);\n      listOfPeers.splice(i, 1);\n      i -= 1;\n    } else if (peerId === PEER_TYPE.MCU) {\n      listOfPeers.splice(i, 1);\n      i -= 1;\n    } else if (!hasMCU) {\n      logger.log.DEBUG([peerId, 'RTCDataChannel', null, `Sending ${isPrivate ? 'private' : ''} P2P message to Peer.`]);\n\n      sendMessageToDataChannel(roomState, peerId, {\n        type: DC_PROTOCOL_TYPE.MESSAGE,\n        isPrivate,\n        sender: user.sid,\n        target: targetPeerId ? peerId : null,\n        data: message,\n      }, 'main');\n    }\n  }\n\n  if (listOfPeers.length === 0) {\n    logger.log.WARN('Currently there are no Peers to send P2P message to.');\n  }\n\n  if (hasMCU) {\n    logger.log.DEBUG([PEER_TYPE.MCU, 'RTCDataChannel', null, `Broadcasting ${isPrivate ? 'private' : ''} P2P message to Peers.`]);\n    sendMessageToDataChannel(roomState, PEER_TYPE.MCU, {\n      type: DC_PROTOCOL_TYPE.MESSAGE,\n      isPrivate,\n      sender: user.sid,\n      target: listOfPeers,\n      data: message,\n    }, 'main');\n  }\n\n  if (targetPeerId || !hasMCU) {\n    dispatchEvent(onIncomingMessage({\n      room: roomState.room,\n      message: {\n        targetPeerId: targetPeerId || null,\n        content: message,\n        senderPeerId: user.sid,\n        isDataChannel: true,\n        isPrivate,\n      },\n      isSelf: true,\n      peerId: user.sid,\n      peerInfo: PeerData.getCurrentSessionInfo(roomState.room),\n    }));\n  }\n\n  return null;\n};\n\nconst sendP2PMessage = (roomName, message, targetPeerId) => {\n  const roomState = getRoomStateByName(roomName);\n  if (roomState) {\n    sendP2PMessageForRoom(roomState, message, targetPeerId);\n  } else {\n    // Global P2P Message - Broadcast to all rooms\n    const roomStates = Skylink.getSkylinkState();\n    const roomKeys = Object.keys(roomStates);\n    for (let i = 0; i < roomKeys.length; i += 1) {\n      const state = roomStates[roomKeys[i]];\n      sendP2PMessageForRoom(state, message, targetPeerId);\n    }\n  }\n};\n\n\nexport default sendP2PMessage;\n","import { getRoomStateByName } from '../../utils/helpers';\nimport PeerData from '../../peer-data';\n\n/**\n * @param {String} roomName\n * @return {Object|null}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @private\n */\nconst getPeersInRoom = (roomName) => {\n  const roomState = getRoomStateByName(roomName);\n  if (roomState) {\n    const listOfPeersInfo = {};\n    const listOfPeers = Object.keys(roomState.peerInformations);\n\n    for (let i = 0; i < listOfPeers.length; i += 1) {\n      listOfPeersInfo[listOfPeers[i]] = Object.assign({}, PeerData.getPeerInfo(listOfPeers[i], roomState.room));\n      listOfPeersInfo[listOfPeers[i]].isSelf = false;\n    }\n\n    if (roomState.user && roomState.user.sid) {\n      listOfPeersInfo[roomState.user.sid] = Object.assign({}, PeerData.getCurrentSessionInfo(roomState.room));\n      listOfPeersInfo[roomState.user.sid].isSelf = true;\n    }\n    return listOfPeersInfo;\n  }\n  return null;\n};\n\nexport default getPeersInRoom;\n","import Skylink from '../../index';\nimport * as constants from '../../constants';\nimport messages from '../../messages';\nimport logger from '../../logger';\nimport IceCandidate from '../../ice-connection';\nimport { isLowerThanVersion } from '../../utils/helpers';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { candidatesGathered } from '../../skylink-events';\n\n/**\n * @param {String} targetMid\n * @param {SkylinkState} roomState\n * @return {null}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @fires candidatesGathered\n */\nconst signalingEndOfCandidates = (targetMid, roomState) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const peerEndOfCandidatesCounter = state.peerEndOfCandidatesCounter[targetMid];\n  const peerConnection = state.peerConnections[targetMid];\n  const peerCandidatesQueue = state.peerCandidatesQueue[targetMid];\n  const peerConnectionConfig = state.peerConnectionConfig[targetMid];\n  const gatheredCandidates = state.gatheredCandidates[targetMid];\n  const { AdapterJS, RTCIceCandidate } = window;\n  const { TAGS } = constants;\n  const { PEER_CONNECTION } = messages;\n\n  if (!peerEndOfCandidatesCounter) {\n    return null;\n  }\n\n  if (\n    // If peer connection exists first and state is not closed.\n    peerConnection && peerConnection.signalingState !== constants.PEER_CONNECTION_STATE.CLOSED\n    // If remote description is set\n    && peerConnection.remoteDescription && peerConnection.remoteDescription.sdp\n    // If end-of-candidates signal is received\n    && typeof peerEndOfCandidatesCounter.expectedLen === 'number'\n    // If all ICE candidates are received\n    && peerEndOfCandidatesCounter.len >= peerEndOfCandidatesCounter.expectedLen\n    // If there is no ICE candidates queue\n    && (peerCandidatesQueue ? peerCandidatesQueue.length === 0 : true)\n    // If it has not been set yet\n    && !peerEndOfCandidatesCounter.hasSet) {\n    logger.log.DEBUG([targetMid, TAGS.PEER_CONNECTION, null, PEER_CONNECTION.end_of_candidates]);\n\n    peerEndOfCandidatesCounter.hasSet = true;\n\n    try {\n      if (AdapterJS.webrtcDetectedBrowser === 'edge') {\n        let mLineCounter = -1;\n        const addedMids = [];\n        const sdpLines = peerConnection.remoteDescription.sdp.split('\\r\\n');\n        let rejected = false;\n\n        for (let i = 0; i < sdpLines.length; i += 1) {\n          if (sdpLines[i].indexOf('m=') === 0) {\n            rejected = sdpLines[i].split(' ')[1] === '0';\n            mLineCounter += 1;\n          } else if (sdpLines[i].indexOf('a=mid:') === 0 && !rejected) {\n            const mid = sdpLines[i].split('a=mid:')[1] || '';\n            if (mid && addedMids.indexOf(mid) === -1) {\n              addedMids.push(mid);\n              IceCandidate.addIceCandidate(targetMid, `endofcan-${(new Date()).getTime()}`, 'endOfCandidates', new RTCIceCandidate({\n                sdpMid: mid,\n                sdpMLineIndex: mLineCounter,\n                candidate: 'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates',\n              }), state);\n              // Start breaking after the first add because of max-bundle option\n              if (peerConnectionConfig.bundlePolicy === constants.BUNDLE_POLICY.MAX_BUNDLE) {\n                break;\n              }\n            }\n          }\n        }\n      } else if (AdapterJS && !isLowerThanVersion(AdapterJS.VERSION, '0.14.0')) {\n        peerConnection.addIceCandidate(null);\n      }\n\n      if (gatheredCandidates) {\n        const candidatesLength = {\n          expected: peerEndOfCandidatesCounter.expectedLen || 0,\n          received: peerEndOfCandidatesCounter.len || 0,\n          processed: gatheredCandidates.receiving.srflx.length + gatheredCandidates.receiving.relay.length + gatheredCandidates.receiving.host.length,\n        };\n        dispatchEvent(candidatesGathered({\n          room: state.room,\n          peerId: targetMid,\n          candidatesLength,\n        }));\n      }\n\n      state.peerEndOfCandidatesCounter[targetMid] = peerEndOfCandidatesCounter;\n      Skylink.setSkylinkState(state, roomState.room.id);\n    } catch (error) {\n      logger.log.ERROR([targetMid, TAGS.PEER_CONNECTION, null, PEER_CONNECTION.end_of_candidate_failure], error);\n    }\n  }\n  return null;\n};\n\nexport default signalingEndOfCandidates;\n","/**\n * Get RTCDataChannel buffer thresholds\n * @param {RTCDataChannel.channel} channel\n * @returns {{bufferedAmountLow: number, bufferedAmountLowThreshold: number}}\n * @memberOf PeerConnection.PeerConnectionHelpers\n */\nconst getDataChannelBuffer = channel => ({\n  bufferedAmountLow: parseInt(channel.bufferedAmountLow, 10) || 0,\n  bufferedAmountLowThreshold: parseInt(channel.bufferedAmountLowThreshold, 10) || 0,\n});\nexport default getDataChannelBuffer;\n","import MESSAGES from '../../../messages';\nimport { isEmptyObj } from '../../../utils/helpers';\nimport PeerConnection from '../../index';\nimport logger from '../../../logger';\nimport { PEER_CONNECTION_STATE, HANDSHAKE_PROGRESS, DATA_CHANNEL_TYPE } from '../../../constants';\n\nconst hasPeerDataChannels = dataChannels => !isEmptyObj(dataChannels);\n\n/**\n * Function that refreshes the main messaging Datachannel.\n * @param {SkylinkState} state\n * @param {String} peerId\n * @memberOf PeerConnection\n */\nconst refreshDataChannel = (state, peerId) => {\n  const { dataChannels, peerConnections } = state;\n\n  if (hasPeerDataChannels(dataChannels) && Object.hasOwnProperty.call(dataChannels, peerId)) {\n    if (Object.hasOwnProperty.call(dataChannels[peerId], 'main')) {\n      const mainDataChannel = dataChannels[peerId].main;\n      const { channelName, channelType } = mainDataChannel;\n      const bufferThreshold = mainDataChannel.channel.bufferedAmountLowThreshold || 0;\n\n      if (channelType === DATA_CHANNEL_TYPE.MESSAGING) {\n        setTimeout(() => {\n          if (Object.hasOwnProperty.call(peerConnections, peerId)) {\n            if (peerConnections[peerId].signalingState !== PEER_CONNECTION_STATE.CLOSED && peerConnections[peerId].localDescription.type === HANDSHAKE_PROGRESS.OFFER) {\n              PeerConnection.closeDataChannel(state, peerId);\n              logger.log.DEBUG([peerId, 'RTCDataChannel', 'main', MESSAGES.DATA_CHANNEL.reviving_dataChannel]);\n              PeerConnection.createDataChannel({\n                roomState: state,\n                peerId,\n                dataChannel: channelName,\n                bufferThreshold,\n                createAsMessagingChannel: true,\n              });\n            }\n          }\n        }, 100);\n      }\n    }\n  } else {\n    logger.log.DEBUG([peerId, 'RTCDataChannel', MESSAGES.DATA_CHANNEL.refresh_error]);\n  }\n};\n\nexport default refreshDataChannel;\n","import { DATA_CHANNEL_STATE, TAGS } from '../../../constants';\nimport { onDataChannelStateChanged } from '../../../skylink-events';\nimport MESSAGES from '../../../messages';\nimport HandleDataChannelStats from '../../../skylink-stats/handleDataChannelStats';\nimport logger from '../../../logger';\nimport PeerConnection from '../../index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport Skylink from '../../../index';\n\nconst closeFn = (roomState, peerId, channelNameProp) => {\n  const { dataChannels } = roomState;\n  const targetDataChannel = dataChannels[peerId][channelNameProp];\n  const { channelName, channelType } = targetDataChannel.channelName;\n\n  if (targetDataChannel.readyState !== DATA_CHANNEL_STATE.CLOSED) {\n    const { room } = roomState;\n    const handleDataChannelStats = new HandleDataChannelStats();\n    logger.log.DEBUG([peerId, TAGS.DATA_CHANNEL, channelNameProp, MESSAGES.DATA_CHANNEL.CLOSING]);\n\n    handleDataChannelStats.send(room.id, DATA_CHANNEL_STATE.CLOSING, peerId, targetDataChannel.channel, channelNameProp);\n\n    dispatchEvent(onDataChannelStateChanged({\n      room,\n      peerId,\n      state: DATA_CHANNEL_STATE.CLOSING,\n      channelName,\n      channelType,\n      bufferAmount: PeerConnection.getDataChannelBuffer(targetDataChannel.channel),\n    }));\n\n    targetDataChannel.channel.close();\n\n    delete dataChannels[peerId][channelNameProp];\n  }\n};\n\nconst closeAllDataChannels = (roomState, peerId) => {\n  const { dataChannels } = roomState;\n  const channelNameProp = Object.keys(dataChannels[peerId]);\n  for (let i = 0; i < channelNameProp.length; i += 1) {\n    if (Object.hasOwnProperty.call(dataChannels[peerId], channelNameProp[i])) {\n      closeFn(roomState, peerId, channelNameProp[i]);\n    }\n  }\n\n  delete dataChannels[peerId];\n};\n\n/**\n * Function that closes the datachannel.\n * @param {SkylinkState} roomState\n * @param {String} peerId - The Peer Id.\n * @param {String} [channelProp=main] - The channel property.\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @fires onDataChannelStateChanged\n */\nconst closeDataChannel = (roomState, peerId, channelProp = 'main') => {\n  try {\n    const updatedState = Skylink.getSkylinkState(roomState.room.id);\n    const { dataChannels, room } = updatedState;\n\n    if (!dataChannels[peerId] || !dataChannels[peerId][channelProp]) {\n      logger.log.WARN([peerId, TAGS.DATA_CHANNEL, channelProp || null,\n        MESSAGES.DATA_CHANNEL.ERRORS.NO_SESSIONS]);\n      return;\n    }\n\n    if (channelProp === 'main') {\n      closeAllDataChannels(updatedState, peerId);\n      return;\n    }\n\n    closeFn(updatedState, peerId, channelProp);\n    Skylink.setSkylinkState(updatedState, room.id);\n  } catch (error) {\n    logger.log.ERROR([peerId, TAGS.DATA_CHANNEL, channelProp || null,\n      MESSAGES.DATA_CHANNEL.ERRORS.FAILED_CLOSING], error);\n  }\n};\n\nexport default closeDataChannel;\n","import SkylinkSignalingServer from '../../../server-communication/signaling-server';\n\nconst sendRestartOfferMsg = (state, peerId, doIceRestart) => {\n  const { room } = state;\n  const signaling = new SkylinkSignalingServer();\n\n  try {\n    const restartOfferMsg = signaling.messageBuilder.getRestartOfferMessage(room.id, peerId, doIceRestart);\n    signaling.offer(room, peerId, doIceRestart, restartOfferMsg);\n    return peerId;\n  } catch (ex) {\n    return [peerId, ex];\n  }\n};\n\nexport default sendRestartOfferMsg;\n","import Skylink from '../../..';\nimport logger from '../../../logger';\nimport { PEER_CONNECTION_STATE } from '../../../constants';\nimport SkylinkSignalingServer from '../../../server-communication/signaling-server';\nimport messages from '../../../messages';\nimport sendRestartOfferMsg from './sendRestartOfferMsg';\n\n/**\n * Function that sends restart message to the signaling server.\n * @param {String} peerId\n * @param {SkylinkState} roomState\n * @param {Object} options\n * @param {Object} options.bandwidth\n * @param {Object} options.googleXBandwidth\n * @return {Promise}\n * @memberOf PeerConnection.PeerConnectionHelpers\n */\nconst restartPeerConnection = (peerId, roomState, options) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const { AdapterJS } = window;\n  const {\n    peerConnections, peerCustomConfigs, peerEndOfCandidatesCounter, room, user,\n  } = state;\n  const { doIceRestart, bwOptions } = options;\n  const signaling = new SkylinkSignalingServer();\n  const { PEER_CONNECTION } = messages;\n  const errors = [];\n\n  return new Promise((resolve) => {\n    // reject with wrong peerId\n    if (!peerConnections[peerId]) {\n      logger.log.ERROR([peerId, null, null, PEER_CONNECTION.refresh_peerId_no_match]);\n      errors.push(PEER_CONNECTION.refresh_peerId_no_match);\n      return resolve([peerId, errors]);\n    }\n\n    const peerConnection = peerConnections[peerId];\n    // refresh not supported in edge\n    if (AdapterJS.webrtcDetectedBrowser === 'edge') {\n      logger.log.WARN([peerId, 'RTCPeerConnection', null, PEER_CONNECTION.refresh_not_supported]);\n      errors.push(PEER_CONNECTION.refresh_no_edge_support);\n    }\n\n    if (errors.length !== 0) {\n      return resolve([peerId, errors]);\n    }\n\n    // Let's check if the signalingState is stable first.\n    // In another galaxy or universe, where the local description gets dropped..\n    // In the offerHandler or answerHandler, do the appropriate flags to ignore or drop \"extra\" descriptions\n    if (peerConnection.signalingState === PEER_CONNECTION_STATE.STABLE) {\n      logger.log.INFO([peerId, null, null, 'Sending restart message to signaling server ->'], {\n        iceRestart: doIceRestart,\n        options: bwOptions,\n      });\n\n      peerCustomConfigs[peerId] = peerCustomConfigs[peerId] || {};\n      peerCustomConfigs[peerId].bandwidth = peerCustomConfigs[peerId].bandwidth || {};\n      peerCustomConfigs[peerId].googleXBandwidth = peerCustomConfigs[peerId].googleXBandwidth || {};\n\n      if (bwOptions.bandwidth && typeof bwOptions.bandwidth === 'object') {\n        if (typeof bwOptions.bandwidth.audio === 'number') {\n          peerCustomConfigs[peerId].bandwidth.audio = bwOptions.bandwidth.audio;\n        }\n        if (typeof bwOptions.bandwidth.video === 'number') {\n          peerCustomConfigs[peerId].bandwidth.video = bwOptions.bandwidth.video;\n        }\n        if (typeof bwOptions.bandwidth.data === 'number') {\n          peerCustomConfigs[peerId].bandwidth.data = bwOptions.bandwidth.data;\n        }\n      }\n\n      if (bwOptions.googleXBandwidth && typeof bwOptions.googleXBandwidth === 'object') {\n        if (typeof bwOptions.googleXBandwidth.min === 'number') {\n          peerCustomConfigs[peerId].googleXBandwidth.min = bwOptions.googleXBandwidth.min;\n        }\n        if (typeof bwOptions.googleXBandwidth.max === 'number') {\n          peerCustomConfigs[peerId].googleXBandwidth.max = bwOptions.googleXBandwidth.max;\n        }\n      }\n\n      peerEndOfCandidatesCounter[peerId] = peerEndOfCandidatesCounter[peerId] || {};\n      peerEndOfCandidatesCounter[peerId].len = 0;\n\n      return resolve(sendRestartOfferMsg(state, peerId, doIceRestart));\n    }\n\n    // Checks if the local description is defined first\n    const hasLocalDescription = peerConnection.localDescription && peerConnection.localDescription.sdp;\n    // This is when the state is stable and re-handshaking is possible\n    // This could be due to previous connection handshaking that is already done\n    if (peerConnection.signalingState === PEER_CONNECTION_STATE.HAVE_LOCAL_OFFER && hasLocalDescription) {\n      signaling.sendMessage({\n        type: peerConnection.localDescription.type,\n        sdp: peerConnection.localDescription.sdp,\n        mid: user.sid,\n        target: peerId,\n        rid: room.id,\n        restart: true,\n      });\n      return resolve(peerId);\n    }\n\n    const unableToRestartError = `Failed restarting as peer connection state is ${peerConnection.signalingState} and there is no localDescription set to connection. There could be a handshaking step error.`;\n    logger.log.DEBUG([peerId, 'RTCPeerConnection', null, unableToRestartError], {\n      localDescription: peerConnection.localDescription,\n      remoteDescription: peerConnection.remoteDescription,\n    });\n    errors.push(unableToRestartError);\n\n    resolve([peerId, errors]);\n\n    return null;\n  });\n};\n\nexport default restartPeerConnection;\n","import Skylink from '../../../index';\nimport sendRestartOfferMsg from './sendRestartOfferMsg';\nimport { PEER_TYPE } from '../../../constants';\n\n/**\n * @param {SkylinkState} roomState\n * @param {boolean} [doIceRestart = false]\n * @param {Object} [bwOptions = {}]\n * @param {JSON} bwOptions.bandwidth\n * @param {JSON} bwOptions.googleXBandwidth\n * @returns {Promise}\n * @memberOf PeerConnection.PeerConnectionHelpers\n */\nconst restartMCUConnection = (roomState, doIceRestart, bwOptions) => new Promise((resolve) => {\n  const updatedRoomState = roomState;\n  const initOptions = Skylink.getInitOptions();\n  const { mcuUseRenegoRestart } = initOptions;\n\n  try {\n    if (bwOptions.bandwidth && typeof bwOptions.bandwidth === 'object') {\n      if (typeof bwOptions.bandwidth.audio === 'number') {\n        updatedRoomState.streamsBandwidthSettings.bAS.audio = bwOptions.bandwidth.audio;\n      }\n      if (typeof bwOptions.bandwidth.video === 'number') {\n        updatedRoomState.streamsBandwidthSettings.bAS.video = bwOptions.bandwidth.video;\n      }\n      if (typeof bwOptions.bandwidth.data === 'number') {\n        updatedRoomState.streamsBandwidthSettings.bAS.data = bwOptions.bandwidth.data;\n      }\n    }\n\n    if (bwOptions.googleXBandwidth && typeof bwOptions.googleXBandwidth === 'object') {\n      if (typeof bwOptions.googleXBandwidth.min === 'number') {\n        updatedRoomState.streamsBandwidthSettings.googleX.min = bwOptions.googleXBandwidth.min;\n      }\n      if (typeof bwOptions.googleXBandwidth.max === 'number') {\n        updatedRoomState.streamsBandwidthSettings.googleX.max = bwOptions.googleXBandwidth.max;\n      }\n    }\n\n    if (mcuUseRenegoRestart) {\n      updatedRoomState.peerEndOfCandidatesCounter.MCU = updatedRoomState.peerEndOfCandidatesCounter.MCU || {};\n      updatedRoomState.peerEndOfCandidatesCounter.MCU.len = 0;\n\n      Skylink.setSkylinkState(updatedRoomState);\n      resolve(sendRestartOfferMsg(updatedRoomState, PEER_TYPE.MCU, doIceRestart));\n    }\n  } catch (error) {\n    resolve([PEER_TYPE.MCU, error]);\n  }\n});\n\nexport default restartMCUConnection;\n","import Skylink from '../../..';\nimport logger from '../../../logger';\nimport restartPeerConnection from './restartPeerConnection';\nimport restartMCUConnection from './restartMCUConnection';\n\nconst refreshSinglePeer = (peerId, roomState, options) => {\n  logger.log.INFO([peerId, 'PeerConnection', null, 'Restarting peer connection.']);\n  return restartPeerConnection(peerId, roomState, options);\n};\n\n/**\n * @param {String<Array>}listOfPeers\n * @param {SkylinkState} roomState\n * @param {boolean} [doIceRestart = false]\n * @param {Object} [bwOptions = {}]\n * @param {JSON} bwOptions.bandwidth\n * @param {JSON} bwOptions.googleXBandwidth\n * @returns {Promise}\n * @memberOf PeerConnection.PeerConnectionHelpers\n */\nconst refreshPeerConnection = (listOfPeers, roomState, doIceRestart = false, bwOptions = {}) => {\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const { hasMCU } = state;\n\n  try {\n    if (!hasMCU) {\n      const restartPeerConnectionPromises = [];\n      for (let i = 0; i < listOfPeers.length; i += 1) {\n        const peerId = listOfPeers[i];\n        const options = {\n          doIceRestart,\n          bwOptions,\n        };\n        const restartPeerConnectionPromise = refreshSinglePeer(peerId, state, options);\n        restartPeerConnectionPromises.push(restartPeerConnectionPromise);\n      }\n\n      return Promise.all(restartPeerConnectionPromises);\n    }\n\n    return restartMCUConnection(roomState, doIceRestart, bwOptions);\n  } catch (error) {\n    logger.log.ERROR([null, 'RTCPeerConnection', null, 'Failed restarting.'], error);\n    return null;\n  }\n};\n\nexport default refreshPeerConnection;\n","import { DATA_CHANNEL_STATE } from '../../constants';\n\nconst buildPeerInformations = (userInfo, state) => {\n  const peerInfo = userInfo;\n  const peerId = peerInfo.sid;\n\n  peerInfo.room = state.room.roomName;\n  peerInfo.settings.data = !!(state.dataChannels[peerId] && state.dataChannels[peerId].main && state.dataChannels[peerId].main.channel && state.dataChannels[peerId].main.channel.readyState === DATA_CHANNEL_STATE.OPEN);\n\n  delete peerInfo.publishOnly;\n\n  return peerInfo;\n};\n\nexport default buildPeerInformations;\n","import {\n  rejectPromise, isEmptyArray, isValidPeerId, isAString,\n} from '../../utils/helpers';\nimport messages from '../../messages';\nimport PeerConnectionStatistics from './statistics';\nimport logger from '../../logger';\n\nconst retrieveValidPeerIdsOrErrorMsg = (roomState, peerId) => {\n  const { peerConnections, room } = roomState;\n  const { PEER_CONNECTION } = messages;\n  let peerIds = null;\n  let errorMsg = null;\n\n  if (isEmptyArray(Object.keys(peerConnections))) {\n    errorMsg = PEER_CONNECTION.not_initialised;\n  } else if (Array.isArray(peerId)) {\n    peerIds = peerId;\n    peerIds.forEach((id) => {\n      if (!isValidPeerId(room, id)) {\n        errorMsg = `${PEER_CONNECTION.peerId_does_not_exist} ${id}`;\n      }\n    });\n  } else if (isAString(peerId)) {\n    if (!isValidPeerId(room, peerId)) {\n      errorMsg = `${PEER_CONNECTION.peerId_does_not_exist} ${peerId}`;\n    }\n\n    peerIds = [peerId];\n  } else {\n    peerIds = Object.keys(peerConnections);\n  }\n\n  return {\n    peerIds,\n    errorMsg,\n  };\n};\n\nconst getConnectionStatus = (roomState, peerId = null) => {\n  const { ROOM_STATE } = messages;\n  if (!roomState) {\n    logger.log.WARN(ROOM_STATE.NO_ROOM_NAME);\n    return rejectPromise(ROOM_STATE.NO_ROOM_NAME);\n  }\n\n  const { room } = roomState;\n  const result = retrieveValidPeerIdsOrErrorMsg(roomState, peerId);\n\n  if (result.errorMsg) {\n    logger.log.WARN(result.errorMsg);\n    return rejectPromise(result.errorMsg);\n  }\n\n  const { peerIds } = result;\n  const connectionStatusPromises = [];\n  for (let i = 0; i < peerIds.length; i += 1) {\n    const peerConnectionStatistics = new PeerConnectionStatistics(room.id, peerIds[i]);\n    connectionStatusPromises.push(peerConnectionStatistics.getConnectionStatus());\n  }\n\n  return Promise.all(connectionStatusPromises);\n};\n\nexport default getConnectionStatus;\n","import Skylink from '../../index';\n\nconst closePeerConnection = (roomState, peerId) => {\n  const updatedState = Skylink.getSkylinkState(roomState.room.id);\n  const { peerConnections, room } = updatedState;\n  const { AdapterJS } = window;\n\n  peerConnections[peerId].close();\n\n  // FIXME: Check if needed. Polyfill for safari 11 \"closed\" event not triggered for \"iceConnectionState\" and \"signalingState\".\n  if (AdapterJS.webrtcDetectedType === 'AppleWebKit') {\n    if (!updatedState.peerConnections[peerId].signalingStateClosed) {\n      updatedState.peerConnections[peerId].signalingStateClosed = true;\n      // trigger('peerConnectionState', this.PEER_CONNECTION_STATE.CLOSED, peerId);\n    }\n    if (!updatedState.peerConnections[peerId].iceConnectionStateClosed) {\n      updatedState.peerConnections[peerId].iceConnectionStateClosed = true;\n      // handleIceConnectionStats(ICE_CONNECTION_STATE.CLOSED, peerId);\n      // trigger('iceConnectionState', this.ICE_CONNECTION_STATE.CLOSED, peerId);\n    }\n  }\n\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nexport default closePeerConnection;\n","/* eslint-disable no-nested-ternary */\nimport Skylink from '../../index';\nimport { hasAudioTrack, hasVideoTrack } from '../../utils/helpers';\nimport { MEDIA_STATE } from '../../constants';\n\n// Mobile SDK is sending mediaStatus  - audioMuted, videoMuted as a boolean\n// 2.0 has switched to storing mediaStatus keyed by streamId with -1, 0 ,1 values\nconst buildMediaStatus = (state, peerId, transceiver, stream) => {\n  const { peerMedias, peerInformations } = state;\n  const peerMedia = peerMedias[peerId];\n  const mediaStatus = peerInformations[peerId].mediaStatus || {};\n  Object.values(peerMedia).forEach((mediaInfo) => {\n    if (mediaInfo.transceiverMid === transceiver.mid) {\n      mediaStatus[stream.id] = {\n        audioMuted: hasAudioTrack(stream) ? (mediaInfo.mediaState === MEDIA_STATE.MUTED ? 0 : 1) : -1,\n        videoMuted: hasVideoTrack(stream) ? (mediaInfo.mediaState === MEDIA_STATE.MUTED ? 0 : 1) : -1,\n      };\n    }\n  });\n\n  delete mediaStatus.audioMuted;\n  delete mediaStatus.videoMuted;\n\n  return mediaStatus;\n};\n\nconst updatePeerInformationsMediaStatus = (room, peerId, transceiver, stream) => {\n  const updatedState = Skylink.getSkylinkState(room.id);\n  const peerInformation = updatedState.peerInformations[peerId];\n  peerInformation.mediaStatus = buildMediaStatus(updatedState, peerId, transceiver, stream);\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nexport default updatePeerInformationsMediaStatus;\n","import Skylink from '../../index';\n\nconst processNewSender = (state, targetMid, sender) => {\n  const updatedState = state;\n  if (!updatedState.currentRTCRTPSenders[targetMid]) {\n    updatedState.currentRTCRTPSenders[targetMid] = [];\n  }\n  updatedState.currentRTCRTPSenders[targetMid].push(sender);\n  Skylink.setSkylinkState(updatedState, updatedState.room.id);\n};\n\nexport default processNewSender;\n","import createOffer from './createOffer';\nimport addPeer from './peer-addition/addPeer';\nimport createAnswer from './createAnswer';\nimport createDataChannel from './data-channel/createDataChannel';\nimport sendP2PMessage from './data-channel/sendP2PMessage';\nimport getPeersInRoom from './getPeersInRoom';\nimport signalingEndOfCandidates from './signalingEndOfCandidates';\nimport getDataChannelBuffer from './data-channel/getDataChannelBuffer';\nimport refreshDataChannel from './data-channel/refreshDataChannel';\nimport closeDataChannel from './data-channel/closeDataChannel';\nimport refreshConnection from './refresh-connection/refreshConnection';\nimport refreshPeerConnection from './refresh-connection/refreshPeerConnection';\nimport restartPeerConnection from './refresh-connection/restartPeerConnection';\nimport buildPeerInformations from './buildPeerInformations';\nimport getConnectionStatus from './getConnectionStatus';\nimport closePeerConnection from './closePeerConnection';\nimport updatePeerInformationsMediaStatus from './updatePeerInformationsMediaStatus';\nimport processNewSender from './processNewSender';\n\n/**\n * @namespace PeerConnectionHelpers\n * @description All helper and utility functions for <code>{@link PeerConnection}</code> class are listed here.\n * @private\n * @memberOf PeerConnection\n * @type {{createOffer, createAnswer, addPeer, createDataChannel, sendP2PMessage, getPeersInRoom, signalingEndOfCandidates, getDataChannelBuffer, refreshDataChannel, closeDataChannel, refreshConnection, refreshPeerConnection, restartPeerConnection, buildPeerInformations, getConnectionStatus, closePeerConnection, updatePeerInformationsMediaStatus, processNewSender  }}\n */\nconst helpers = {\n  createOffer,\n  createAnswer,\n  addPeer,\n  createDataChannel,\n  sendP2PMessage,\n  getPeersInRoom,\n  signalingEndOfCandidates,\n  getDataChannelBuffer,\n  refreshDataChannel,\n  closeDataChannel,\n  refreshConnection,\n  refreshPeerConnection,\n  restartPeerConnection,\n  buildPeerInformations,\n  getConnectionStatus,\n  closePeerConnection,\n  updatePeerInformationsMediaStatus,\n  processNewSender,\n};\n\nexport default helpers;\n","import logger from '../../../../logger';\nimport Skylink from '../../../../index';\nimport PeerConnection from '../../index';\n\n/* eslint-disable no-param-reassign */\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {String} targetMid\n * @param {SkylinkState} currentRoomState\n * @param {Event} event\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\nconst ondatachannel = (peerConnection, targetMid, currentRoomState, event) => {\n  const dataChannel = event.channel || event;\n  const initOptions = Skylink.getInitOptions();\n  const state = Skylink.getSkylinkState(currentRoomState.room.id);\n  const { peerInformations } = state;\n  const { enableDataChannel } = initOptions;\n\n  logger.log.DEBUG([targetMid, 'RTCDataChannel', dataChannel.label, 'Received datachannel ->'], dataChannel);\n  if (enableDataChannel && peerInformations[targetMid].config.enableDataChannel) {\n    // if peer does not have main channel, the first item is main\n    if (!peerConnection.hasMainChannel) {\n      peerConnection.hasMainChannel = true;\n    }\n    PeerConnection.createDataChannel({ peerId: targetMid, dataChannel, roomState: currentRoomState });\n  } else {\n    logger.log.WARN([targetMid, 'RTCDataChannel', dataChannel.label, 'Not adding datachannel as enable datachannel is set to false']);\n  }\n};\n\nexport default ondatachannel;\n","import IceConnection from '../../../../ice-connection';\n\n/**\n *\n * @param {RTCPeerConnection} peerConnection\n * @param {String} targetMid\n * @param {SkylinkState} roomState - The current state.\n * @param {Event} rtcIceConnectionEvent\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\nconst onicecandidate = (peerConnection, targetMid, roomState, rtcIceConnectionEvent) => {\n  IceConnection.onIceCandidate(targetMid, rtcIceConnectionEvent.candidate || rtcIceConnectionEvent, roomState.room);\n};\n\nexport default onicecandidate;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\nimport PeerConnection from '../peer-connection';\nimport logger from '../logger';\nimport MESSAGES from '../messages';\n\nconst formatValue = (stats, mediaType, directionType, itemKey) => {\n  const value = stats[mediaType][directionType === 'send' ? 'sending' : 'receiving'][itemKey];\n  if (['number', 'string', 'boolean'].indexOf(typeof value) > -1) {\n    return value;\n  }\n  return null;\n};\n\nconst buildAudioTrackInfo = (stream, track) => ({\n  stream_id: stream.id,\n  id: track.id,\n  label: track.label,\n  muted: !track.enabled,\n});\n\nconst buildVideoTrackInfo = (stream, track, settings) => ({\n  stream_id: stream.id,\n  id: track.id,\n  label: track.label,\n  height: settings.video.resolution.height,\n  width: settings.video.resolution.width,\n  muted: !track.enabled,\n});\n\nclass HandleBandwidthStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      peer_id: null,\n      audio_send: { tracks: [] },\n      audio_recv: {},\n      video_send: { tracks: [] },\n      video_recv: {},\n      error: null,\n    };\n    this.stats = null;\n  }\n\n  gatherSendAudioPacketsStats() {\n    this.model.audio_send.bytes = formatValue(this.stats, 'audio', 'send', 'bytes');\n    this.model.audio_send.packets = formatValue(this.stats, 'audio', 'send', 'packets');\n    this.model.audio_send.echo_return_loss = formatValue(this.stats, 'audio', 'send', 'echoReturnLoss');\n    this.model.audio_send.echo_return_loss_enhancement = formatValue(this.stats, 'audio', 'send', 'echoReturnLossEnhancement');\n    this.model.audio_send.round_trip_time = formatValue(this.stats, 'audio', 'send', 'roundTripTime');\n    this.model.audio_send.audio_level = formatValue(this.stats, 'audio', 'send', 'audioLevel');\n    this.model.audio_send.jitter = formatValue(this.stats, 'audio', 'send', 'jitter');\n  }\n\n  gatherReceiveAudioPacketsStats() {\n    this.model.audio_recv.bytes = formatValue(this.stats, 'audio', 'recv', 'bytes');\n    this.model.audio_recv.packets = formatValue(this.stats, 'audio', 'recv', 'packets');\n    this.model.audio_recv.packets_lost = formatValue(this.stats, 'audio', 'recv', 'packetsLost');\n    this.model.audio_recv.jitter = formatValue(this.stats, 'audio', 'recv', 'jitter');\n    this.model.audio_recv.audio_level = formatValue(this.stats, 'audio', 'recv', 'audioLevel');\n  }\n\n  gatherSendVideoPacketsStats() {\n    this.model.video_send.bytes = formatValue(this.stats, 'video', 'send', 'bytes');\n    this.model.video_send.packets = formatValue(this.stats, 'video', 'send', 'packets');\n    this.model.video_send.nack_count = formatValue(this.stats, 'video', 'send', 'nacks');\n    this.model.video_send.firs_count = formatValue(this.stats, 'video', 'send', 'firs');\n    this.model.video_send.plis_count = formatValue(this.stats, 'video', 'send', 'plis');\n    this.model.video_send.frames_encoded = formatValue(this.stats, 'video', 'send', 'framesEncoded');\n    this.model.video_send.frame_width = formatValue(this.stats, 'video', 'send', 'frameWidth');\n    this.model.video_send.frame_height = formatValue(this.stats, 'video', 'send', 'frameHeight');\n    this.model.video_send.round_trip_time = formatValue(this.stats, 'video', 'send', 'roundTripTime');\n    this.model.video_send.qp_sum = formatValue(this.stats, 'video', 'send', 'qpSum');\n    this.model.video_send.jitter = formatValue(this.stats, 'video', 'send', 'jitter');\n    this.model.video_send.frames = formatValue(this.stats, 'video', 'send', 'frames');\n    this.model.video_send.hugeFrames = formatValue(this.stats, 'video', 'send', 'hugeFramesSent');\n    this.model.video_send.framesPerSecond = formatValue(this.stats, 'video', 'send', 'framesPerSecond');\n  }\n\n  gatherReceiveVideoPacketsStats() {\n    this.model.video_recv.bytes = formatValue(this.stats, 'video', 'recv', 'bytes');\n    this.model.video_recv.packets = formatValue(this.stats, 'video', 'recv', 'packets');\n    this.model.video_recv.packets_lost = formatValue(this.stats, 'video', 'recv', 'packetsLost');\n    this.model.video_recv.nack_count = formatValue(this.stats, 'video', 'recv', 'nacks');\n    this.model.video_recv.firs_count = formatValue(this.stats, 'video', 'recv', 'firs');\n    this.model.video_recv.plis_count = formatValue(this.stats, 'video', 'recv', 'plis');\n    this.model.video_recv.frames_decoded = formatValue(this.stats, 'video', 'recv', 'framesDecoded');\n    this.model.video_recv.qp_sum = formatValue(this.stats, 'video', 'recv', 'qpSum');\n    this.model.video_recv.frames_decoded = formatValue(this.stats, 'video', 'recv', 'framesDecoded');\n    this.model.video_recv.frames_dropped = formatValue(this.stats, 'video', 'recv', 'framesDropped');\n    this.model.video_recv.decoderImplementation = formatValue(this.stats, 'video', 'recv', 'decoderImplementation');\n  }\n\n  buildTrackInfo(roomKey) {\n    const state = Skylink.getSkylinkState(roomKey);\n    const { streams } = state;\n    let streamObjs = [];\n    if (streams.userMedia) {\n      streamObjs = Object.values(Object.values(streams.userMedia));\n    }\n\n    if (streams.screenshare) {\n      streamObjs.push(streams.screenshare);\n    }\n\n    streamObjs.forEach((streamObj) => {\n      if (streamObj) {\n        const stream = streamObj.stream ? streamObj.stream : streamObj[Object.keys(streamObj)[0]].stream;\n        const settings = streamObj.settings ? streamObj.settings : streamObj[Object.keys(streamObj)[0]].settings;\n        const audioTracks = stream.getAudioTracks();\n        const videoTracks = stream.getVideoTracks();\n\n        audioTracks.forEach((audioTrack) => {\n          const audioTrackInfo = buildAudioTrackInfo(stream, audioTrack);\n          this.model.audio_send.tracks.push(audioTrackInfo);\n        });\n\n        videoTracks.forEach((videoTrack) => {\n          const videoTrackInfo = buildVideoTrackInfo(stream, videoTrack, settings);\n          this.model.video_send.tracks.push(videoTrackInfo);\n        });\n      }\n    });\n  }\n\n  send(roomKey, peerConnection, peerId) {\n    const { STATS_MODULE } = MESSAGES;\n    const roomState = Skylink.getSkylinkState(roomKey);\n\n    if (!roomState) {\n      logger.log.DEBUG([peerId, 'Statistics', 'Bandwidth_Stats', STATS_MODULE.HANDLE_BANDWIDTH_STATS.NO_STATE]);\n      return;\n    }\n\n    if (!roomState.streams.userMedia && !roomState.streams.screenshare) {\n      return;\n    }\n\n    this.model.client_id = roomState.clientId;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n    this.model.room_id = roomKey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n    this.model.peer_id = peerId;\n\n    PeerConnection.retrieveStatistics(roomKey, peerId, Skylink.getInitOptions().beSilentOnStatsLogs).then((stats) => {\n      if (stats) {\n        this.stats = stats;\n        this.gatherSendAudioPacketsStats();\n        this.gatherReceiveAudioPacketsStats();\n        this.gatherSendVideoPacketsStats();\n        this.gatherReceiveVideoPacketsStats();\n        this.buildTrackInfo(roomKey);\n        this.postStats(this.endpoints.bandwidth, this.model);\n      }\n    }).catch((error) => {\n      this.model.error = error ? error.message : null;\n      logger.log.DEBUG(STATS_MODULE.HANDLE_BANDWIDTH_STATS.RETRIEVE_FAILED, error);\n    });\n  }\n}\n\nexport default HandleBandwidthStats;\n","import PeerConnection from '../index';\nimport * as constants from '../../constants';\nimport Skylink from '../../index';\n\nconst instance = {};\n\nclass BandwidthAdjuster {\n  constructor(params) {\n    const { peerConnection, state, targetMid } = params;\n\n    if (instance[targetMid]) {\n      return instance[targetMid];\n    }\n\n    this.peerId = targetMid;\n    this.state = state;\n    this.peerConnection = peerConnection;\n    this.bandwidth = null;\n\n    instance[this.peerId] = this;\n  }\n\n  static formatTotalFn(arr) {\n    let total = 0;\n    for (let i = 0; i < arr.length; i += 1) {\n      total += arr[i];\n    }\n    return total / arr.length;\n  }\n\n  setAdjustmentInterval() {\n    const { bandwidthAdjuster, peerBandwidth, room } = this.state;\n    const { PEER_CONNECTION_STATE } = constants;\n\n    if (this.bandwidth) {\n      return;\n    }\n\n    const bandwidth = {\n      audio: { send: [], recv: [] },\n      video: { send: [], recv: [] },\n    };\n    let currentBlock = 0;\n\n    const adjustmentInterval = setInterval(() => {\n      if (!(this.peerConnection && this.peerConnection.signalingState\n        !== PEER_CONNECTION_STATE.CLOSED) || !bandwidthAdjuster || !peerBandwidth[this.peerId]) {\n        clearInterval(adjustmentInterval);\n        return;\n      }\n\n      PeerConnection.retrieveStatistics(room.id, this.peerId, Skylink.getIniOptions().beSilentOnStatsLogs, true)\n        .then((stats) => {\n          if (!(this.peerConnection && this.peerConnection.signalingState\n            !== PEER_CONNECTION_STATE.CLOSED) || !bandwidthAdjuster) {\n            clearInterval(adjustmentInterval);\n          }\n\n          bandwidth.audio.send.push(stats.audio.sending.bytes * 8);\n          bandwidth.audio.recv.push(stats.audio.receiving.bytes * 8);\n          bandwidth.video.send.push(stats.video.sending.bytes * 8);\n          bandwidth.video.recv.push(stats.video.receiving.bytes * 8);\n\n          currentBlock += 1;\n\n          if (currentBlock === bandwidthAdjuster.interval) {\n            currentBlock = 0;\n            let totalAudioBw = BandwidthAdjuster.formatTotalFn(bandwidth.audio.send);\n            let totalVideoBw = BandwidthAdjuster.formatTotalFn(bandwidth.video.send);\n\n            if (!bandwidthAdjuster.useUploadBwOnly) {\n              totalAudioBw += BandwidthAdjuster.formatTotalFn(bandwidth.audio.recv);\n              totalVideoBw += BandwidthAdjuster.formatTotalFn(bandwidth.video.recv);\n              totalAudioBw /= 2;\n              totalVideoBw /= 2;\n            }\n\n            totalAudioBw = parseInt((totalAudioBw * (bandwidthAdjuster.limitAtPercentage / 100)) / 1000, 10);\n            totalVideoBw = parseInt((totalVideoBw * (bandwidthAdjuster.limitAtPercentage / 100)) / 1000, 10);\n\n            PeerConnection.refreshConnection(this.state, this.peerId, false, {\n              bandwidth: { audio: totalAudioBw, video: totalVideoBw },\n            });\n          }\n        })\n        .catch(() => {\n          bandwidth.audio.send.push(0);\n          bandwidth.audio.recv.push(0);\n          bandwidth.video.send.push(0);\n          bandwidth.video.recv.push(0);\n        });\n    }, 1000);\n\n    this.bandwidth = bandwidth;\n  }\n}\n\nexport default BandwidthAdjuster;\n","import HandleIceConnectionStats from '../../../../skylink-stats/handleIceConnectionStats';\nimport logger from '../../../../logger';\nimport messages from '../../../../messages';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { iceConnectionState } from '../../../../skylink-events';\nimport * as constants from '../../../../constants';\nimport Skylink from '../../../../index';\nimport PeerConnection from '../../../index';\nimport HandleBandwidthStats from '../../../../skylink-stats/handleBandwidthStats';\nimport BandwidthAdjuster from '../../bandwidthAdjuster';\n\nconst isIceConnectionStateCompleted = (pcIceConnectionState) => {\n  const { ICE_CONNECTION_STATE } = constants;\n  return [ICE_CONNECTION_STATE.COMPLETED,\n    ICE_CONNECTION_STATE.CONNECTED].indexOf(pcIceConnectionState) > -1;\n};\n\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {String} targetMid - The Peer Id\n * @param {SkylinkState} currentRoomState\n * @fires iceConnectionState\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\nconst oniceconnectionstatechange = (peerConnection, targetMid, currentRoomState) => {\n  const { PEER_CONNECTION } = messages;\n  const { ICE_CONNECTION_STATE, PEER_CONNECTION_STATE, BROWSER_AGENT } = constants;\n  const { AdapterJS } = window;\n  const { webrtcDetectedBrowser, webrtcDetectedType } = AdapterJS;\n  const state = Skylink.getSkylinkState(currentRoomState.room.id);\n  const { streams } = state;\n\n  if (!state) {\n    logger.log.DEBUG([targetMid, 'RTCIceConnectionState', null, PEER_CONNECTION.no_room_state]);\n    return;\n  }\n\n  const {\n    hasMCU, bandwidthAdjuster, peerInformations, peerConnStatus, peerStats,\n  } = state;\n  const handleIceConnectionStats = new HandleIceConnectionStats();\n\n  let statsInterval = null;\n  let pcIceConnectionState = peerConnection.iceConnectionState;\n\n  logger.log.DEBUG([targetMid, 'RTCIceConnectionState', null, PEER_CONNECTION.ice_connection_state], pcIceConnectionState);\n\n  if (webrtcDetectedBrowser === 'edge') {\n    if (pcIceConnectionState === 'connecting') {\n      pcIceConnectionState = ICE_CONNECTION_STATE.CHECKING;\n    } else if (pcIceConnectionState === 'new') {\n      pcIceConnectionState = ICE_CONNECTION_STATE.FAILED;\n    }\n  }\n\n  if (webrtcDetectedType === 'AppleWebKit' && pcIceConnectionState === ICE_CONNECTION_STATE.CLOSED) {\n    setTimeout(() => {\n      if (!peerConnection.iceConnectionStateClosed) {\n        handleIceConnectionStats.send(currentRoomState.room.id, ICE_CONNECTION_STATE.CLOSED, targetMid);\n        dispatchEvent(iceConnectionState({\n          state: ICE_CONNECTION_STATE.CLOSED,\n          peerId: targetMid,\n        }));\n      }\n    }, 10);\n    return;\n  }\n\n  if (state && peerConnection.iceConnectionState !== ICE_CONNECTION_STATE.CONNECTED) {\n    handleIceConnectionStats.send(currentRoomState.room.id, peerConnection.iceConnectionState, targetMid);\n  }\n\n  dispatchEvent(iceConnectionState({\n    state: pcIceConnectionState,\n    peerId: targetMid,\n  }));\n\n  if (pcIceConnectionState === ICE_CONNECTION_STATE.FAILED) {\n    if (AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.FIREFOX && !streams.userMedia) { // no audio and video requested will throw ice trickle\n      // failure although ice candidates are exchanged\n      return;\n    }\n    dispatchEvent(iceConnectionState({\n      state: ICE_CONNECTION_STATE.TRICKLE_FAILED,\n      peerId: targetMid,\n    }));\n  }\n\n  if (peerConnStatus && peerConnStatus[targetMid]) {\n    peerConnStatus[targetMid].connected = isIceConnectionStateCompleted(pcIceConnectionState);\n  }\n\n  if (!statsInterval && isIceConnectionStateCompleted(pcIceConnectionState) && !peerStats[targetMid]) {\n    statsInterval = true;\n    peerStats[targetMid] = {};\n\n    logger.log.DEBUG([targetMid, 'RTCStatsReport', null, 'Retrieving first report to tabulate results']);\n\n    // Do an initial getConnectionStatus() to backfill the first retrieval in order to do (currentTotalStats - lastTotalStats).\n    PeerConnection.getConnectionStatus(state, targetMid).then(() => {\n      handleIceConnectionStats.send(currentRoomState.room.id, peerConnection.iceConnectionState, targetMid);\n      statsInterval = setInterval(() => {\n        if (peerConnection.signalingState === PEER_CONNECTION_STATE.CLOSED || peerConnection.iceConnectionState === PEER_CONNECTION_STATE.CLOSED) {\n          clearInterval(statsInterval);\n        } else {\n          new HandleBandwidthStats().send(state.room.id, peerConnection, targetMid);\n        }\n      }, 20000);\n    });\n  }\n\n  if (!hasMCU && isIceConnectionStateCompleted(pcIceConnectionState) && !!bandwidthAdjuster && AdapterJS.webrtcDetectedBrowser !== 'edge'\n        && (((peerInformations[targetMid] || {}).agent || {}).name || 'edge') !== 'edge') {\n    new BandwidthAdjuster({\n      targetMid,\n      state,\n      peerConnection,\n    }).setAdjustmentInterval();\n  }\n};\n\nexport default oniceconnectionstatechange;\n","import logger from '../../../../logger';\nimport messages from '../../../../messages';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { candidateGenerationState } from '../../../../skylink-events';\n\n/**\n * @param {RTCPeerConnection} peerConnection\n * @param {String} targetMid - The Peer Id\n * @param {SkylinkState} roomState - The current state\n * @fires candidateGenerationState\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\nconst onicegatheringstatechange = (peerConnection, targetMid, roomState) => {\n  const { PEER_CONNECTION } = messages;\n  const { iceGatheringState } = peerConnection;\n\n  logger.log.INFO([targetMid, 'RTCIceGatheringState', null, PEER_CONNECTION.ice_gathering_state], iceGatheringState);\n  dispatchEvent(candidateGenerationState({\n    state: iceGatheringState,\n    room: roomState.room,\n    peerId: targetMid,\n  }));\n};\n\nexport default onicegatheringstatechange;\n","import logger from '../../../../logger';\nimport messages from '../../../../messages';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { peerConnectionState } from '../../../../skylink-events';\nimport * as constants from '../../../../constants';\n\n/**\n *\n * @param {RTCPeerConnection} peerConnection\n * @param {String} targetMid - The Peer Id\n * @param {SkylinkState} roomState - The current state.\n * @fires peerConnectionState\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\n// eslint-disable-next-line no-unused-vars\nconst onsignalingstatechange = (peerConnection, targetMid) => {\n  const { AdapterJS } = window;\n  const { PEER_CONNECTION } = messages;\n  const { PEER_CONNECTION_STATE } = constants;\n  const { signalingState, signalingStateClosed } = peerConnection;\n\n  logger.log.DEBUG([targetMid, 'RTCSignalingState', null, PEER_CONNECTION.peer_connection_state], signalingState);\n\n  if (AdapterJS.webrtcDetectedType === 'AppleWebKit' && signalingState === PEER_CONNECTION_STATE.CLOSED) {\n    setTimeout(() => {\n      if (!signalingStateClosed) {\n        dispatchEvent(peerConnectionState({\n          state: PEER_CONNECTION_STATE.CLOSED,\n          peerId: targetMid,\n        }));\n      }\n    }, 10);\n    return;\n  }\n\n  dispatchEvent(peerConnectionState({\n    state: signalingState,\n    peerId: targetMid,\n  }));\n};\n\nexport default onsignalingstatechange;\n","import Skylink from '../../../../index';\nimport MediaStream from '../../../../media-stream/index';\nimport callbacks from './index';\nimport logger from '../../../../logger/index';\nimport { TRACK_KIND } from '../../../../constants';\nimport PeerMedia from '../../../../peer-media';\nimport PeerConnection from '../../../index';\n\nconst matchPeerIdWithTransceiverMid = (state, transceiver) => {\n  const { peerMedias, user } = state;\n  const peerIds = Object.keys(peerMedias);\n\n  for (let i = 0; i < peerIds.length; i += 1) {\n    if (peerIds[i] !== user.sid) {\n      const mediaInfos = Object.values(peerMedias[peerIds[i]]);\n      for (let m = 0; m < mediaInfos.length; m += 1) {\n        if (mediaInfos[m].transceiverMid === transceiver.mid) {\n          return peerIds[i];\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\n/**\n * Function that handles the <code>RTCPeerConnection.addTrack</code> remote MediaTrack received.\n * @param {RTCPeerConnection} RTCPeerConnection\n * @param {String} targetMid\n * @param {SkylinkState} currentRoomState\n * @param {RTCTrackEvent} rtcTrackEvent\n * @returns {null}\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\nconst ontrack = (RTCPeerConnection, targetMid, currentRoomState, rtcTrackEvent) => {\n  const state = Skylink.getSkylinkState(currentRoomState.room.id);\n  const {\n    peerConnections, room, hasMCU,\n  } = state;\n  const { receiver } = rtcTrackEvent;\n  const { AdapterJS } = window;\n  const stream = rtcTrackEvent.streams[0];\n\n  // eslint-disable-next-line prefer-const\n  let { transceiver, track } = rtcTrackEvent;\n  let peerId = targetMid;\n\n  if (!stream) {\n    logger.log.WARN('ontrack stream is null');\n    return null;\n  }\n\n  if (AdapterJS.webrtcDetectedBrowser === 'safari') {\n    const transceivers = peerConnections[targetMid].getTransceivers();\n    transceivers.forEach((tscvr) => {\n      if (tscvr.receiver.track.id === receiver.track.id) {\n        transceiver = tscvr;\n      }\n    });\n  }\n\n  if (transceiver.mid === null) {\n    logger.log.WARN('Transceiver mid is null', transceiver);\n  }\n\n  if (!peerConnections[peerId]) return null;\n\n  if (hasMCU) {\n    peerId = matchPeerIdWithTransceiverMid(state, transceiver);\n  }\n\n  const isScreensharing = PeerMedia.isVideoScreenTrack(state, peerId, transceiver.mid);\n  const callbackExtraParams = [peerId, room, isScreensharing];\n  stream.onremovetrack = callbacks.onremovetrack.bind(this, ...callbackExtraParams);\n  PeerMedia.updateStreamIdFromOntrack(state.room, peerId, transceiver.mid, stream.id);\n  PeerConnection.updatePeerInformationsMediaStatus(state.room, peerId, transceiver, stream);\n  MediaStream.updateRemoteStreams(state.room, peerId, stream);\n  MediaStream.onRemoteTrackAdded(stream, currentRoomState, peerId, isScreensharing, track.kind === TRACK_KIND.VIDEO, track.kind === TRACK_KIND.AUDIO);\n\n  return null;\n};\n\nexport default ontrack;\n","import { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { onIncomingStream, peerUpdated, streamEnded } from '../../../../skylink-events';\nimport PeerData from '../../../../peer-data';\nimport { getStateByKey, hasVideoTrack } from '../../../../utils/helpers';\nimport { TRACK_KIND, TAGS, BROWSER_AGENT } from '../../../../constants';\nimport logger from '../../../../logger';\nimport MESSAGES from '../../../../messages';\nimport Skylink from '../../../../index';\n\nconst dispatchPeerUpdated = (state, peerId) => {\n  dispatchEvent(peerUpdated({\n    peerId,\n    peerInfo: PeerData.getPeerInfo(peerId, state.room),\n    isSelf: false,\n  }));\n};\n\nconst updateMediaStatus = (state, peerId, streamId) => {\n  const updatedState = state;\n\n  delete updatedState.peerInformations[peerId].mediaStatus[streamId];\n\n  Skylink.setSkylinkState(updatedState, updatedState.room.id);\n};\n\nconst dispatchStreamEndedEvent = (state, peerId, isScreensharing, rtcTrackEvent, stream) => {\n  dispatchEvent(streamEnded({\n    room: state.room,\n    peerId,\n    peerInfo: PeerData.getPeerInfo(peerId, state.room),\n    isSelf: false,\n    isScreensharing,\n    streamId: stream.id,\n    isVideo: rtcTrackEvent.track.kind === TRACK_KIND.VIDEO,\n    isAudio: rtcTrackEvent.track.kind === TRACK_KIND.AUDIO,\n  }));\n};\n\nconst dispatchIncomingCameraStream = (state) => {\n  const { streams, room, user } = state;\n  const userMediaStreams = streams.userMedia ? Object.values(streams.userMedia) : [];\n  userMediaStreams.forEach((streamObj) => {\n    if (hasVideoTrack(streamObj.stream)) {\n      dispatchEvent(onIncomingStream({\n        stream: streamObj.stream,\n        streamId: streamObj.id,\n        peerId: user.sid,\n        room,\n        isSelf: true,\n        peerInfo: PeerData.getCurrentSessionInfo(room),\n        isVideo: true,\n        isAudio: false,\n      }));\n    }\n  });\n};\n\n/**\n * @param {String} peerId\n * @param {String} room\n * @param {boolean} isScreensharing\n * @param {MediaStreamTrackEvent} rtcTrackEvent\n * @fires streamEnded\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\nconst onremovetrack = (peerId, room, isScreensharing, rtcTrackEvent) => {\n  const { AdapterJS } = window;\n  const state = getStateByKey(room.id);\n  const { peerInformations } = state;\n  const { MEDIA_STREAM, PEER_INFORMATIONS } = MESSAGES;\n  const stream = AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.REACT_NATIVE ? rtcTrackEvent.stream : rtcTrackEvent.target;\n\n\n  logger.log.INFO([peerId, TAGS.MEDIA_STREAM, null, MEDIA_STREAM.REMOTE_TRACK_REMOVED], {\n    peerId, isSelf: false, isScreensharing, track: rtcTrackEvent.track,\n  });\n\n  if (!peerInformations[peerId]) {\n    // peerInformations[peerId] will be undefined if onremovetrack is called from byeHandler\n    logger.log.DEBUG([peerId, TAGS.MEDIA_STREAM, null, `${MEDIA_STREAM.ERRORS.DROPPING_ONREMOVETRACK}` - `${PEER_INFORMATIONS.NO_PEER_INFO} ${peerId}`]);\n    return;\n  }\n\n  if (!stream) {\n    logger.log.DEBUG([peerId, TAGS.MEDIA_STREAM, null, `${MEDIA_STREAM.ERRORS.DROPPING_ONREMOVETRACK}` - `${MEDIA_STREAM.NO_STREAM}`]);\n    return;\n  }\n\n  updateMediaStatus(state, peerId, stream.id);\n  dispatchStreamEndedEvent(state, peerId, isScreensharing, rtcTrackEvent, stream);\n\n  if (isScreensharing) {\n    // Dispatch to ensure that the client has a way of retrieving the camera stream. Camera stream was not added to pc and therefore ontrack will not trigger on remote.\n    dispatchIncomingCameraStream(state);\n  }\n\n  dispatchPeerUpdated(state, peerId);\n};\n\nexport default onremovetrack;\n","import Skylink from '../../../../index'; import helpers from '../../index';\n\n/**\n * React Native only callback to retrieve senders from the peer connection as the sender object is not returned from peerConnection.addTrack.\n * @param peerConnection\n * @param targetMid\n * @param currentRoomState\n * @param event\n * @memberOf PeerConnection.PeerConnectionHelpers.CreatePeerConnectionCallbacks\n */\nconst onsenderadded = (peerConnection, targetMid, currentRoomState, event) => {\n  const updatedState = Skylink.getSkylinkState(currentRoomState.room.id);\n  const { sender } = event;\n  helpers.processNewSender(updatedState, targetMid, sender);\n};\n\nexport default onsenderadded;\n","import ondatachannel from './ondatachannel';\nimport onicecandidate from './onicecandidate';\nimport oniceconnectionstatechange from './oniceconnectionstatechange';\nimport onicegatheringstatechange from './onicegatheringstatechange';\nimport onsignalingstatechange from './onsignalingstatechange';\nimport ontrack from './ontrack';\nimport onremovetrack from './onremovetrack';\nimport onsenderadded from './onsenderadded';\n\n/**\n * @description Callbacks for createPeerConnection method\n * @type {{ondatachannel, onicecandidate, oniceconnectionstatechange, onicegatheringstatechange, onsignalingstatechange, ontrack, onremovetrack, onsenderadded}}\n * @memberOf PeerConnection.PeerConnectionHelpers\n * @namespace CreatePeerConnectionCallbacks\n * @private\n */\nconst callbacks = {\n  ontrack,\n  ondatachannel,\n  onicecandidate,\n  oniceconnectionstatechange,\n  onicegatheringstatechange,\n  onsignalingstatechange,\n  onremovetrack,\n  onsenderadded,\n};\n\nexport default callbacks;\n","import { getStateByRid } from '../../../../utils/helpers';\nimport * as constants from '../../../../constants';\nimport { streamEnded, onIncomingScreenStream, onIncomingStream } from '../../../../skylink-events';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport PeerData from '../../../../peer-data/index';\nimport Skylink from '../../../../index';\nimport PeerConnectionCallbacks from '../../../../peer-connection/helpers/peer-addition/callbacks';\nimport MediaStream from '../../../../media-stream';\n\n/**\n * Function that handles the \"stream\" socket message received.\n * @param {JSON} message\n * @param {String} message.rid - The room key.\n * @param {SkylinkUser} message.mid - The source peerId.\n * @param {String} message.streamId - The media stream Id.\n * @param {String} message.status - The stream status.\n * @param {Object} message.settings\n * @param {String} message.settings.screenshareId - Id of the screenshare stream.\n * @memberOf SignalingMessageHandler\n */\nconst streamHandler = (message) => {\n  const {\n    mid, rid, status, streamId, settings,\n  } = message;\n  const roomState = getStateByRid(rid);\n  const { room, peerInformations } = roomState;\n\n  if (status === constants.STREAM_STATUS.SCREENSHARE_REPLACE_START) {\n    peerInformations[mid].screenshare = true;\n    Skylink.setSkylinkState(roomState, room.id);\n\n    dispatchEvent(onIncomingScreenStream({\n      room,\n      peerId: mid,\n      isSelf: false,\n      peerInfo: PeerData.getPeerInfo(mid, room),\n      stream: null,\n      isReplace: true,\n      streamId,\n      isVideo: !!settings.audio,\n      isAudio: !!settings.video,\n    }));\n  }\n\n  if (status === constants.STREAM_STATUS.USER_MEDIA_REPLACE_START) {\n    dispatchEvent(onIncomingStream({\n      room,\n      peerId: mid,\n      isSelf: false,\n      peerInfo: PeerData.getPeerInfo(mid, room),\n      stream: null,\n      streamId,\n      isReplace: true,\n      replacedStreamId: settings.replacedStreamId,\n      isVideo: !!settings.audio,\n      isAudio: !!settings.video,\n    }));\n  }\n\n  if (status === constants.STREAM_STATUS.ENDED) {\n    if (settings.isScreensharing) {\n      peerInformations[mid].screenshare = false;\n      Skylink.setSkylinkState(roomState, room.id);\n    }\n\n    dispatchEvent(streamEnded({\n      room,\n      peerId: mid,\n      peerInfo: PeerData.getPeerInfo(mid, room),\n      streamId,\n      isSelf: false,\n      isScreensharing: settings.isScreensharing,\n      options: settings,\n      isVideo: !!settings.audio,\n      isAudio: !!settings.video,\n    }));\n  }\n\n  // Handle stopped streams that are not present in sdp and therefore do not require renegotiation and therefore do not trigger onremovetrack\n  if (status === constants.STREAM_STATUS.REPLACED_STREAM_ENDED) {\n    const remoteStreams = MediaStream.retrieveRemoteStreams(roomState, mid);\n\n    if (!remoteStreams) {\n      return null;\n    }\n\n    const remoteStreamsObj = Object.values(remoteStreams);\n    let stoppedStream = null;\n\n    for (let i = 0; i < remoteStreamsObj.length; i += 1) {\n      if (remoteStreams[i].id === streamId) {\n        stoppedStream = remoteStreamsObj[i];\n        break;\n      }\n    }\n\n    if (!stoppedStream) {\n      return null;\n    }\n\n    const tracks = stoppedStream.getTracks();\n    tracks.forEach((track) => {\n      PeerConnectionCallbacks.onremovetrack(mid, room, streamId, track, false);\n    });\n  }\n\n  return null;\n};\n\nexport default streamHandler;\n","import SkylinkStats from './index';\nimport Skylink from '../index';\n\nclass HandleRecordingStats extends SkylinkStats {\n  constructor() {\n    super();\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      room_id: null,\n      user_id: null,\n      state: null,\n      recording_id: null,\n      recordings: null,\n      error: null,\n    };\n  }\n\n  send(roomKey, state, recordingId, recordings, error) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n\n    this.model.client_id = roomState.clientId;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n    this.model.room_id = roomKey;\n    this.model.user_id = (roomState && roomState.user && roomState.user.sid) || null;\n    this.model.state = state;\n    this.model.recording_id = recordingId;\n    this.model.recordings = recordings;\n    this.error = (typeof error === 'string' ? error : (error && error.message)) || null;\n\n    this.postStats(this.endpoints.recording, this.model);\n  }\n}\n\nexport default HandleRecordingStats;\n","import HandleRecordingStats from '../../../../skylink-stats/handleRecordingStats';\nimport logger from '../../../../logger';\nimport { getStateByRid } from '../../../../utils/helpers';\nimport MESSAGES from '../../../../messages';\nimport Skylink from '../../../../index';\nimport { recordingState } from '../../../../skylink-events';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { PEER_TYPE, RECORDING_STATE, TAGS } from '../../../../constants';\n\nconst handleRecordingStats = new HandleRecordingStats();\n\nconst dispatchRecordingEvent = (state, recordingId, error) => {\n  const detail = {\n    state,\n    recordingId,\n  };\n\n  if (error) {\n    detail.error = error;\n  }\n\n  dispatchEvent(recordingState(detail));\n};\n\n/**\n * Recording successfully started\n * @param {SkylinkState} roomState\n * @param {number} recordingId\n * @private\n */\nconst recordingStarted = (roomState, recordingId) => {\n  const updatedRoomState = Object.assign({}, roomState);\n  const { room } = updatedRoomState;\n\n  logger.log.DEBUG([PEER_TYPE.MCU, TAGS.RECORDING, recordingId, MESSAGES.RECORDING.START_SUCCESS]);\n\n  handleRecordingStats.send(room.id, MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.START, recordingId, null, null);\n\n  updatedRoomState.currentRecordingId = recordingId;\n\n  updatedRoomState.recordings[recordingId] = {\n    active: true,\n    state: RECORDING_STATE.START,\n    startedDateTime: (new Date()).toISOString(),\n    endedDateTime: null,\n    error: null,\n  };\n\n  updatedRoomState.recordingStartInterval = setTimeout(() => {\n    logger.log.INFO([PEER_TYPE.MCU, TAGS.RECORDING, recordingId, MESSAGES.RECORDING.MIN_RECORDING_TIME_REACHED]);\n    updatedRoomState.recordingStartInterval = null;\n  }, 4000);\n\n  Skylink.setSkylinkState(updatedRoomState, room.id);\n  dispatchRecordingEvent(RECORDING_STATE.START, recordingId);\n};\n\n/**\n * Recording successfully stopped\n * @param {SkylinkState} roomState\n * @param {number} recordingId\n * @private\n */\nconst recordingStopped = (roomState, recordingId) => {\n  const updatedRoomState = Object.assign({}, roomState);\n  const { room, recordings } = updatedRoomState;\n\n  handleRecordingStats.send(room.id, MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.STOP, recordingId, null, null);\n\n  if (!recordings[recordingId]) {\n    logger.log.ERROR([PEER_TYPE.MCU, TAGS.RECORDING, recordingId, MESSAGES.RECORDING.ERRORS.SESSION_EMPTY]);\n    return null;\n  }\n\n  updatedRoomState.currentRecordingId = null;\n\n  if (updatedRoomState.recordingStartInterval) {\n    clearTimeout(updatedRoomState.recordingStartInterval);\n    logger.log.WARN([PEER_TYPE.MCU, TAGS.RECORDING, recordingId, MESSAGES.RECORDING.ERRORS.STOP_ABRUPT]);\n    updatedRoomState.recordingStartInterval = null;\n  }\n\n  logger.log.DEBUG([PEER_TYPE.MCU, TAGS.RECORDING, recordingId, MESSAGES.RECORDING.STOP_SUCCESS]);\n\n  updatedRoomState.recordings[recordingId].active = false;\n  updatedRoomState.recordings[recordingId].state = RECORDING_STATE.STOP;\n  updatedRoomState.recordings[recordingId].endedDateTime = (new Date()).toISOString();\n\n  Skylink.setSkylinkState(updatedRoomState, room.id);\n  dispatchRecordingEvent(RECORDING_STATE.STOP, recordingId);\n\n  return null;\n};\n\nconst recordingHandler = (message) => {\n  const {\n    action, rid, recordingId, error,\n  } = message;\n  const roomState = getStateByRid(rid);\n\n  if (action === 'on') {\n    recordingStarted(roomState, recordingId);\n  } else if (action === 'off') {\n    recordingStopped(roomState, recordingId);\n  } else if (action === 'error') {\n    dispatchRecordingEvent(null, recordingId, error);\n    logger.log.ERROR([PEER_TYPE.MCU, TAGS.RECORDING, recordingId, MESSAGES.RECORDING.ERRORS.MCU_RECORDING_ERROR], error);\n    handleRecordingStats.send(roomState.room.id, MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.MCU_RECORDING_ERROR, recordingId, null, error);\n  }\n};\n\nexport default recordingHandler;\n","import logger from '../../../../logger';\nimport { SYSTEM_ACTION } from '../../../../constants';\nimport { disconnect } from '../../../../utils/helpers';\nimport SkylinkStates from '../../../../skylink-states';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { systemAction } from '../../../../skylink-events';\nimport Skylink from '../../../../index';\n\n/**\n * Handles the \"redirect\" message from the Signaling server.\n * @param {JSON} message\n * @private\n */\nexport const redirectHandler = (message) => {\n  logger.log.INFO(['Server', null, message.type, 'System action warning:'], message);\n\n  if (Object.keys((new SkylinkStates()).getAllStates()).length > 1 && message.action === SYSTEM_ACTION.REJECT) {\n    disconnect();\n  }\n\n  if (message.reason === 'toClose') {\n    // eslint-disable-next-line no-param-reassign\n    message.reason = 'toclose';\n  }\n\n  Skylink.removeSkylinkState(Skylink.getSkylinkState(message.rid));\n  // removeRoomStateByState(new SkylinkStates().getState(message.rid));\n\n  dispatchEvent(systemAction({\n    action: message.action,\n    info: message.info,\n    reason: message.reason,\n    rid: message.rid,\n  }));\n};\n\nexport default redirectHandler;\n","import Skylink from '../../../../index';\nimport logger from '../../../../logger';\nimport messages from '../../../../messages';\nimport { RTMP_STATE, PEER_TYPE } from '../../../../constants';\nimport { getStateByRid } from '../../../../utils/helpers';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { rtmpState } from '../../../../skylink-events';\n\nconst ACTION = {\n  START_SUCCESS: 'startSuccess',\n  STOP_SUCCESS: 'stopSuccess',\n};\n\nconst rtmpSessionStartSuccess = (roomState, message) => {\n  const { rtmpSessions } = roomState;\n  const { rtmpId, peerId, streamId } = message;\n\n  if (!rtmpSessions[rtmpId]) {\n    const updatedState = Object.assign({}, roomState);\n    logger.log.DEBUG([PEER_TYPE.MCU, 'RTMP', messages.RTMP.started_success]);\n\n    updatedState.rtmpSessions[rtmpId] = {\n      active: true,\n      state: RTMP_STATE.START,\n      startedDateTime: (new Date()).toISOString(),\n      endedDateTime: null,\n      peerId,\n      streamId,\n    };\n\n    dispatchEvent(rtmpState({\n      state: RTMP_STATE.START,\n      rtmpId,\n      error: null,\n    }));\n\n    Skylink.setSkylinkState(updatedState, updatedState.room.id);\n  }\n  return null;\n};\n\nconst rtmpSessionStopSuccess = (roomState, message) => {\n  const { rtmpSessions } = roomState;\n  const { rtmpId } = message;\n  const updatedState = Object.assign({}, roomState);\n\n  if (!rtmpSessions[rtmpId]) {\n    logger.log.DEBUG([PEER_TYPE.MCU, 'RTMP', messages.RTMP.stop_session_empty]);\n    return false;\n  }\n\n  logger.log.DEBUG([PEER_TYPE.MCU, 'RTMP', messages.RTMP.stopped_success]);\n\n  updatedState.rtmpSessions[rtmpId].active = false;\n  updatedState.rtmpSessions[rtmpId].state = RTMP_STATE.STOP;\n  updatedState.rtmpSessions[rtmpId].endedDateTime = (new Date()).toISOString();\n\n  dispatchEvent(rtmpState({\n    state: RTMP_STATE.STOP,\n    rtmpId,\n    error: null,\n  }));\n\n  Skylink.setSkylinkState(updatedState, updatedState.room.id);\n  return null;\n};\n\nconst rtmpSessionFailed = (roomState, message) => {\n  const { error, rtmpId } = message;\n  const { rtmpSessions } = roomState;\n  const rtmpError = new Error(error || 'Unkown Error');\n  const updatedState = Object.assign({}, roomState);\n\n  if (!rtmpSessions[rtmpId]) {\n    logger.log.DEBUG([PEER_TYPE.MCU, 'RTMP', messages.RTMP.error_session_empty]);\n    return null;\n  }\n\n  logger.log.DEBUG([PEER_TYPE.MCU, 'RTMP', messages.RTMP.error_session]);\n\n  updatedState.rtmpSessions[rtmpId].state = RTMP_STATE.ERROR;\n  updatedState.rtmpSessions[rtmpId].error = rtmpError;\n\n  if (rtmpSessions[rtmpId].active) {\n    logger.log.DEBUG([PEER_TYPE.MCU, 'RTMP', messages.RTMP.error_Session_abrupt]);\n    updatedState.rtmpSessions[rtmpId].active = false;\n  }\n\n  dispatchEvent(rtmpState({\n    state: RTMP_STATE.ERROR,\n    rtmpId,\n    error: rtmpError,\n  }));\n\n  Skylink.setSkylinkState(updatedState, updatedState.room.id);\n  return null;\n};\n\nconst rtmpHandler = (message) => {\n  const { action, rid } = message;\n  const roomState = getStateByRid(rid);\n\n  logger.log.DEBUG([PEER_TYPE.MCU, 'RTMP', null, messages.RTMP.message_received_from_sig]);\n\n  if (action === ACTION.START_SUCCESS) {\n    rtmpSessionStartSuccess(roomState, message);\n  } else if (action === ACTION.STOP_SUCCESS) {\n    rtmpSessionStopSuccess(roomState, message);\n  } else {\n    rtmpSessionFailed(roomState, message);\n  }\n};\n\nexport default rtmpHandler;\n","import logger from '../../../../logger/index';\nimport Skylink from '../../../../index';\nimport { dispatchEvent } from '../../../../utils/skylinkEventManager';\nimport { peerUpdated } from '../../../../skylink-events';\nimport PeerData from '../../../../peer-data/index';\nimport { isANumber } from '../../../../utils/helpers';\nimport MESSAGES from '../../../../messages';\n\n/**\n * Function that handles the \"updateUserEvent\" socket message received.\n * See confluence docs for the \"updateUserEvent\" expected properties to be received\n *   based on the current <code>SM_PROTOCOL_VERSION</code>.\n * @param {JSON} message\n * @param {String} message.type - SIG_MESSAGE_TYPE\n * @param {String} message.mid - The source peerId.\n * @param {String} message.rid - The roomkey.\n * @param {String|Object} message.userData - The updated peer userData.\n * @param {Number} message.stamp - The time stamp for the current updateUserEvent userData.\n * @member SignalingMessageHandler\n * @fires peerUpdated\n * @private\n */\nconst setUserDataHandler = (message) => {\n  const {\n    type, mid, rid, userData, stamp,\n  } = message;\n  const state = Skylink.getSkylinkState(rid);\n  const { peerInformations, peerMessagesStamps } = state;\n  const targetMid = mid;\n  const { PEER_INFORMATIONS } = MESSAGES;\n\n  let parsedUserData = userData.replace(/&quot;/g, '\"');\n\n  try {\n    parsedUserData = JSON.parse(parsedUserData);\n  } catch (err) {\n    logger.log.INFO([targetMid, null, type, `${PEER_INFORMATIONS.USER_DATA_NOT_JSON}`], parsedUserData);\n  } finally {\n    logger.log.INFO([targetMid, null, type, `${PEER_INFORMATIONS.UPDATE_USER_DATA}`], parsedUserData);\n  }\n\n  if (!peerInformations[targetMid]) {\n    logger.log.INFO([targetMid, null, type, `${PEER_INFORMATIONS.NO_PEER_INFO} ${targetMid}`]);\n    return;\n  }\n\n  if (peerMessagesStamps[targetMid] && isANumber(stamp)) {\n    if (stamp < peerMessagesStamps[targetMid].userData) {\n      logger.log.WARN([targetMid, null, type, `${PEER_INFORMATIONS.OUTDATED_MSG}`], message);\n      return;\n    }\n    peerMessagesStamps[targetMid].userData = stamp;\n  }\n\n  peerInformations[targetMid].userData = parsedUserData || {};\n\n  dispatchEvent(peerUpdated({\n    peerId: targetMid,\n    peerInfo: PeerData.getPeerInfo(targetMid, state.room),\n    isSelf: false,\n  }));\n};\n\nexport default setUserDataHandler;\n","import PeerData from '../../../../../peer-data';\nimport { dispatchEvent } from '../../../../../utils/skylinkEventManager';\nimport { peerUpdated, streamMuted } from '../../../../../skylink-events';\nimport { TRACK_KIND } from '../../../../../constants';\n\nconst dispatchMediaStateChangeEvents = (state, streamId, peerId, kind, isScreensharing) => {\n  const peerInfo = PeerData.getPeerInfo(peerId, state.room);\n\n  dispatchEvent(streamMuted({\n    isSelf: false,\n    peerId,\n    peerInfo,\n    streamId,\n    isAudio: kind === TRACK_KIND.AUDIO,\n    isVideo: kind === TRACK_KIND.VIDEO,\n    isScreensharing,\n  }));\n\n  dispatchEvent(peerUpdated({\n    isSelf: false,\n    peerId,\n    peerInfo,\n  }));\n};\n\nexport default dispatchMediaStateChangeEvents;\n","import dispatchMediaStateChangeEvents from './dispatchMediaStateChangeEvents';\n\nconst mediaInfoEventHelpers = {\n  dispatchMediaStateChangeEvents,\n};\n\nexport default mediaInfoEventHelpers;\n","import Skylink from '../../../../index';\nimport logger from '../../../../logger';\nimport MESSAGES from '../../../../messages';\nimport {\n  MEDIA_STATE, MEDIA_STATUS, TAGS, TRACK_KIND,\n} from '../../../../constants';\nimport PeerMedia from '../../../../peer-media';\nimport mediaInfoEventHelpers from './helpers/mediaInfoEventHelpers';\n\nconst audioStateChangeHandler = (targetMid, message) => {\n  const {\n    type, rid, mediaId, mediaState, transceiverMid,\n  } = message;\n  const updatedState = Skylink.getSkylinkState(rid);\n  const { room } = updatedState;\n  const streamId = PeerMedia.retrieveStreamId(room, targetMid, mediaId, transceiverMid);\n  const stamp = (new Date()).toISOString();\n\n  logger.log.INFO([targetMid, TAGS.SIG_SERVER, type, MESSAGES.MEDIA_INFO.AUDIO_STATE_CHANGE, mediaState, streamId], message);\n\n  if (!updatedState.peerInformations[targetMid]) {\n    logger.log.WARN([targetMid, TAGS.PEER_INFORMATION, type, `${MESSAGES.PEER_INFORMATIONS.NO_PEER_INFO} ${targetMid}`]);\n    return;\n  }\n\n  if (updatedState.peerMessagesStamps[targetMid]) {\n    if (stamp < updatedState.peerMessagesStamps[targetMid].audioMuted) {\n      logger.log.WARN([targetMid, TAGS.SIG_SERVER, type, MESSAGES.SIGNALING.OUTDATED_MSG], message);\n      return;\n    }\n    updatedState.peerMessagesStamps[targetMid].audioMuted = stamp;\n  }\n\n  if (!updatedState.peerInformations[targetMid].mediaStatus[streamId]) {\n    updatedState.peerInformations[targetMid].mediaStatus[streamId] = {};\n  }\n\n  updatedState.peerInformations[targetMid].mediaStatus[streamId].audioMuted = (mediaState === MEDIA_STATE.MUTED || mediaState === MEDIA_STATE.STOPPED) ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE;\n  Skylink.setSkylinkState(updatedState, room.id);\n\n  mediaInfoEventHelpers.dispatchMediaStateChangeEvents(updatedState, streamId, targetMid, TRACK_KIND.AUDIO, false);\n};\n\nexport default audioStateChangeHandler;\n","import Skylink from '../../../../index';\nimport logger from '../../../../logger';\nimport MESSAGES from '../../../../messages';\nimport {\n  MEDIA_STATUS, TAGS, MEDIA_STATE, TRACK_KIND, MEDIA_TYPE,\n} from '../../../../constants';\nimport PeerMedia from '../../../../peer-media/index';\nimport mediaInfoEventHelpers from './helpers/mediaInfoEventHelpers';\n\nconst videoStateChangeHandler = (targetMid, message) => {\n  const {\n    type, rid, mediaId, mediaState, transceiverMid, mediaType,\n  } = message;\n  const updatedState = Skylink.getSkylinkState(rid);\n  const { room } = updatedState;\n  const streamId = PeerMedia.retrieveStreamId(room, targetMid, mediaId, transceiverMid);\n  const stamp = (new Date()).toISOString();\n\n  logger.log.INFO([targetMid, TAGS.SIG_SERVER, type, MESSAGES.MEDIA_INFO.VIDEO_STATE_CHANGE, mediaState, streamId], message);\n\n  if (!updatedState.peerInformations[targetMid]) {\n    logger.log.WARN([targetMid, TAGS.PEER_INFORMATION, type, `${MESSAGES.PEER_INFORMATIONS.NO_PEER_INFO} ${targetMid}`]);\n    return;\n  }\n\n  if (updatedState.peerMessagesStamps[targetMid]) {\n    if (stamp < updatedState.peerMessagesStamps[targetMid].videoMuted) {\n      logger.log.WARN([targetMid, TAGS.SIG_SERVER, type, MESSAGES.SIGNALING.OUTDATED_MSG], message);\n      return;\n    }\n    updatedState.peerMessagesStamps[targetMid].videoMuted = stamp;\n  }\n  if (!updatedState.peerInformations[targetMid].mediaStatus[streamId]) {\n    updatedState.peerInformations[targetMid].mediaStatus[streamId] = {};\n  }\n  updatedState.peerInformations[targetMid].mediaStatus[streamId].videoMuted = (mediaState === MEDIA_STATE.MUTED || mediaState === MEDIA_STATE.STOPPED) ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE;\n\n  Skylink.setSkylinkState(updatedState, room.id);\n\n  mediaInfoEventHelpers.dispatchMediaStateChangeEvents(updatedState, streamId, targetMid, TRACK_KIND.VIDEO, mediaType === MEDIA_TYPE.VIDEO_SCREEN);\n};\n\nexport default videoStateChangeHandler;\n","import {\n  MEDIA_TYPE, MEDIA_INFO, TAGS, MEDIA_STATE,\n} from '../../../../constants';\nimport MESSAGES from '../../../../messages';\nimport PeerMedia from '../../../../peer-media/index';\nimport Skylink from '../../../../index';\nimport audioStateChangeHandler from './audioStateChangeHandler';\nimport videoStateChangeHandler from './videoStateChangeHandler';\nimport logger from '../../../../logger/index';\n\nconst addNewPeerMediaInfo = (state, message) => {\n  const updatedState = state;\n  const { mediaId, publisherId } = message;\n  updatedState.peerMedias[publisherId] = updatedState.peerMedias[publisherId] || {};\n\n  if (!updatedState.peerMedias[publisherId][mediaId]) {\n    updatedState.peerMedias[publisherId][mediaId] = message;\n    Skylink.setSkylinkState(updatedState, updatedState.room.id);\n    return true;\n  }\n\n  return false;\n};\n\nconst processOtherChanges = (targetMid, message, key) => {\n  logger.log.WARN([targetMid, TAGS.SIG_SERVER, `${MESSAGES.MEDIA_INFO.WARN.READ_ONLY_VALUE} ${key}`], message);\n};\n\nconst processTransceiverMidChange = (targetMid, message) => {\n  const {\n    rid, mediaId, transceiverMid,\n  } = message;\n  const state = Skylink.getSkylinkState(rid);\n  PeerMedia.updatePeerMediaInfo(state.room, targetMid, mediaId, MEDIA_INFO.TRANSCEIVER_MID, transceiverMid);\n};\n\nconst processUnavailableStream = (room, mediaType, targetMid, message) => {\n  const { mediaId } = message;\n\n  PeerMedia.setMediaStateToUnavailable(room, targetMid, mediaId);\n  PeerMedia.deleteUnavailableMedia(room, targetMid, mediaId);\n};\n\nconst processMediaStateChange = (room, mediaType, targetMid, message) => {\n  if (message.mediaState === MEDIA_STATE.UNAVAILABLE) {\n    processUnavailableStream(room, mediaType, targetMid, message);\n  } else {\n    switch (mediaType) {\n      case MEDIA_TYPE.VIDEO_SCREEN:\n      case MEDIA_TYPE.VIDEO_CAMERA:\n      case MEDIA_TYPE.VIDEO_OTHER:\n      case MEDIA_TYPE.VIDEO: videoStateChangeHandler(targetMid, message); break;\n      case MEDIA_TYPE.AUDIO_MIC:\n      case MEDIA_TYPE.AUDIO: audioStateChangeHandler(targetMid, message); break;\n      default: logger.log.ERROR([targetMid, TAGS.SIG_SERVER, `${MESSAGES.MEDIA_INFO.WARN.INVALID_MEDIA_TYPE} ${mediaType}`], message);\n    }\n  }\n};\n\nconst valueChanged = (roomKey, peerId, mediaId, key, newValue) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { peerMedias } = state;\n  const mediaInfo = peerMedias[peerId][mediaId];\n\n  return mediaInfo[key] && mediaInfo[key] !== newValue;\n};\n\nconst mediaInfoEventHandler = (message) => {\n  const {\n    mid, rid, mediaType, mediaId, publisherId,\n  } = message;\n  const state = Skylink.getSkylinkState(rid);\n  const { hasMCU, room } = state;\n  const targetMid = hasMCU ? publisherId : mid;\n\n  try {\n    if (!addNewPeerMediaInfo(state, message)) {\n      const mediaInfoKeys = Object.values(MEDIA_INFO);\n\n      for (let k = 0; k < mediaInfoKeys.length; k += 1) {\n        if (valueChanged(rid, targetMid, mediaId, mediaInfoKeys[k], message[mediaInfoKeys[k]])) {\n          PeerMedia.updatePeerMediaInfo(state.room, targetMid, mediaId, mediaInfoKeys[k], message[mediaInfoKeys[k]]);\n\n          if (mediaInfoKeys[k] === MEDIA_INFO.MEDIA_STATE) {\n            processMediaStateChange(room, mediaType, targetMid, message);\n            return;\n          }\n\n          if (mediaInfoKeys[k] === MEDIA_INFO.TRANSCEIVER_MID) {\n            processTransceiverMidChange(targetMid, message);\n            return;\n          }\n\n          processOtherChanges(targetMid, message, mediaInfoKeys[k]);\n        }\n      }\n    }\n  } catch (err) {\n    logger.log.ERROR([targetMid, TAGS.SIG_SERVER, MESSAGES.MEDIA_INFO.FAILED_PROCESSING_MEDIA_INFO_EVENT], err);\n  }\n};\n\nexport default mediaInfoEventHandler;\n","import dispatchMediaStateChangeEvents from './dispatchMediaStateChangeEvents';\nimport shouldDropMessage from './shouldDropMessage';\n\nconst muteEventHelpers = {\n  dispatchMuteEvents: dispatchMediaStateChangeEvents,\n  shouldDropMessage,\n};\n\nexport default muteEventHelpers;\n","import PeerData from '../../../../../peer-data/index';\nimport { TAGS, SDK_VERSION } from '../../../../../constants';\nimport logger from '../../../../../logger/index';\nimport MESSAGES from '../../../../../messages';\n\nconst shouldDropMessage = (state, peerId) => {\n  const peerInfo = PeerData.getPeerInfo(peerId, state.room);\n\n  if (peerInfo.agent.SDKVersion && peerInfo.agent.SDKVersion === SDK_VERSION) {\n    logger.log.INFO([peerId, TAGS.SIG_SERVER, null, MESSAGES.SIGNALING.DROPPING_MUTE_EVENT]);\n    return true;\n  }\n\n  return false;\n};\n\nexport default shouldDropMessage;\n","import userMessageHandler from './userMessageHandler';\nimport inRoom from './inRoomHandler';\nimport enter from './enterHandler';\nimport offer from './offerHandler';\nimport answer from './answerHandler';\nimport answerAck from './answerAckHandler';\nimport welcome from './welcomeHandler';\nimport candidate from './candidateHandler';\nimport getPeerList from './getPeerListHandler';\nimport introduceError from './introduceErrorHandler';\nimport bye from './byeHandler';\nimport stream from './streamHandler';\nimport recording from './recordingHandler';\nimport redirect from './redirectHandler';\nimport rtmp from './rtmpHandler';\nimport setUserData from './setUserDataHandler';\nimport mediaInfoEvent from './mediaInfoEventHandler';\nimport muteVideoEvent from './muteVideoEventHandler';\nimport muteAudioEvent from './muteAudioEventHandler';\nimport storedMessages from './storedMessagesHandler';\n\nconst handlers = {\n  userMessageHandler,\n  answer,\n  answerAck,\n  inRoom,\n  enter,\n  offer,\n  welcome,\n  candidate,\n  getPeerList,\n  introduceError,\n  stream,\n  bye,\n  recording,\n  redirect,\n  rtmp,\n  muteVideoEvent,\n  muteAudioEvent,\n  setUserData,\n  mediaInfoEvent,\n  storedMessages,\n};\n\nexport default handlers;\n","import Skylink from '../../../../index';\nimport logger from '../../../../logger';\nimport MESSAGES from '../../../../messages';\nimport { MEDIA_STATUS, TAGS } from '../../../../constants';\nimport muteEventHelpers from './helpers/muteEventHelpers';\n\nconst muteVideoEventHandler = (message) => {\n  const {\n    type, mid, muted, rid, stamp, streamId,\n  } = message;\n  const targetMid = mid;\n  const updatedState = Skylink.getSkylinkState(rid);\n  const { room } = updatedState;\n\n  if (muteEventHelpers.shouldDropMessage(updatedState, targetMid)) {\n    return;\n  }\n\n  logger.log.INFO([targetMid, null, type, MESSAGES.MEDIA_STREAM.VIDEO_MUTED, muted, streamId], message);\n\n  if (!updatedState.peerInformations[targetMid]) {\n    logger.log.WARN([targetMid, TAGS.PEER_INFORMATION, type, `${MESSAGES.PEER_INFORMATIONS.NO_PEER_INFO} ${targetMid}`]);\n    return;\n  }\n\n  if (updatedState.peerMessagesStamps[targetMid]) {\n    if (stamp < updatedState.peerMessagesStamps[targetMid].videoMuted) {\n      logger.log.WARN([targetMid, TAGS.SIG_SERVER, type, MESSAGES.SIGNALING.OUTDATED_MSG], message);\n      return;\n    }\n    updatedState.peerMessagesStamps[targetMid].videoMuted = stamp;\n  }\n  if (!updatedState.peerInformations[targetMid].mediaStatus[streamId]) {\n    updatedState.peerInformations[targetMid].mediaStatus[streamId] = {};\n  }\n  updatedState.peerInformations[targetMid].mediaStatus[streamId].videoMuted = muted ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE;\n\n  Skylink.setSkylinkState(updatedState, room.id);\n\n  muteEventHelpers.dispatchMuteEvents(updatedState, streamId, targetMid);\n};\n\nexport default muteVideoEventHandler;\n","import { MEDIA_STATUS, TAGS } from '../../../../constants';\nimport Skylink from '../../../../index';\nimport logger from '../../../../logger';\nimport MESSAGES from '../../../../messages';\nimport muteEventHelpers from './helpers/muteEventHelpers';\n\nconst muteAudioEventHandler = (message) => {\n  const {\n    type, mid, rid, muted, stamp, streamId,\n  } = message;\n  const targetMid = mid;\n  const updatedState = Skylink.getSkylinkState(rid);\n  const { room } = updatedState;\n\n  if (muteEventHelpers.shouldDropMessage(updatedState, targetMid)) {\n    return;\n  }\n\n  logger.log.INFO([targetMid, TAGS.SIG_SERVER, type, MESSAGES.MEDIA_STREAM.AUDIO_MUTED, muted, streamId], message);\n\n  if (!updatedState.peerInformations[targetMid]) {\n    logger.log.WARN([targetMid, TAGS.PEER_INFORMATION, type, `${MESSAGES.PEER_INFORMATIONS.NO_PEER_INFO} ${targetMid}`]);\n    return;\n  }\n\n  if (updatedState.peerMessagesStamps[targetMid]) {\n    if (stamp < updatedState.peerMessagesStamps[targetMid].audioMuted) {\n      logger.log.WARN([targetMid, TAGS.SIG_SERVER, type, MESSAGES.SIGNALING.OUTDATED_MSG], message);\n      return;\n    }\n    updatedState.peerMessagesStamps[targetMid].audioMuted = stamp;\n  }\n  if (!updatedState.peerInformations[targetMid].mediaStatus[streamId]) {\n    updatedState.peerInformations[targetMid].mediaStatus[streamId] = {};\n  }\n  updatedState.peerInformations[targetMid].mediaStatus[streamId].audioMuted = muted ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE;\n  Skylink.setSkylinkState(updatedState, room.id);\n\n  muteEventHelpers.dispatchMuteEvents(updatedState, streamId, targetMid);\n};\n\nexport default muteAudioEventHandler;\n","import AsyncMessaging from '../../../../features/messaging/async-messaging';\n\n/**\n * Function that handles the \"storedMessages\" socket message received.\n * @param {JSON} message\n * @memberOf SignalingMessageHandler\n */\nconst storedMessagesHandler = (message) => {\n  AsyncMessaging.processStoredMessages(message);\n};\n\nexport default storedMessagesHandler;\n","/* eslint-disable class-methods-use-this */\nimport handlers from './handlers/index';\n\n/**\n * @class\n * @classdesc Class representing a SignalingMessageHandler instance.\n * @namespace SignalingMessageHandler\n * @private\n */\nclass SignalingMessageHandler {\n  userMessageHandler(...args) {\n    handlers.userMessageHandler(...args);\n  }\n\n  answerHandler(...args) {\n    handlers.answer(...args);\n  }\n\n  answerAckHandler(...args) {\n    handlers.answerAck(...args);\n  }\n\n  inRoomHandler(...args) {\n    handlers.inRoom(...args);\n  }\n\n  enterRoomHandler(...args) {\n    handlers.enter(...args);\n  }\n\n  offerHandler(...args) {\n    handlers.offer(...args);\n  }\n\n  welcomeHandler(...args) {\n    handlers.welcome(...args);\n  }\n\n  candidateHandler(...args) {\n    handlers.candidate(...args);\n  }\n\n  getPeerListHandler(...args) {\n    handlers.getPeerList(...args);\n  }\n\n  introduceErrorHandler(...args) {\n    handlers.introduceError(...args);\n  }\n\n  byeHandler(...args) {\n    handlers.bye(...args);\n  }\n\n  streamHandler(...args) {\n    handlers.stream(...args);\n  }\n\n  recordingHandler(...args) {\n    handlers.recording(...args);\n  }\n\n  redirectHandler(...args) {\n    handlers.redirect(...args);\n  }\n\n  rtmpHandler(...args) {\n    handlers.rtmp(...args);\n  }\n\n  setUserDataHandler(...args) {\n    handlers.setUserData(...args);\n  }\n\n  mediaInfoEventHandler(...args) {\n    handlers.mediaInfoEvent(...args);\n  }\n\n  muteAudioEventHandler(...args) {\n    handlers.muteAudioEvent(...args);\n  }\n\n  muteVideoEventHandler(...args) {\n    handlers.muteVideoEvent(...args);\n  }\n\n  storedMessagesHandler(...args) {\n    handlers.storedMessages(...args);\n  }\n}\n\nexport default SignalingMessageHandler;\n","import joinRoomMessage from './joinRoomMessage';\nimport enterRoomMessage from './enterRoomMessage';\nimport welcomeMessage from './welcomeMessage';\nimport offerMessage from './offerMessage';\nimport answerMessage from './answerMessage';\nimport answerAckMessage from './answerAckMessage';\nimport candidateMessage from './candidateMessage';\nimport setUserDataMessage from './setUserDataMessage';\nimport getPeerListMessage from './getPeerListMessage';\nimport restartOfferMessage from './restartOfferMessage';\nimport streamMessage from './streamMessage';\nimport recordingMessage from './recordingMessage';\nimport rtmpMessage from './rtmpMessage';\nimport byeMessage from './byeMessage';\nimport roomLockMessage from './roomLockMeessage';\nimport mediaInfoEventMessage from './mediaInfoEventMessage';\nimport muteAudioEventMessage from './muteAudioEventMessage';\nimport muteVideoEventMessage from './muteVideoEventMessage';\nimport getStoredMessagesMessage from './getStoredMessagesMessage';\nimport userMessagesMessage from './getUserMessages';\n\nconst messageBuilders = {\n  joinRoom: joinRoomMessage,\n  enterRoom: enterRoomMessage,\n  welcome: welcomeMessage,\n  offer: offerMessage,\n  answer: answerMessage,\n  answerAck: answerAckMessage,\n  candidate: candidateMessage,\n  setUserData: setUserDataMessage,\n  getPeerList: getPeerListMessage,\n  restartOffer: restartOfferMessage,\n  stream: streamMessage,\n  recording: recordingMessage,\n  rtmp: rtmpMessage,\n  bye: byeMessage,\n  roomLock: roomLockMessage,\n  mediaInfoEvent: mediaInfoEventMessage,\n  muteAudioEvent: muteAudioEventMessage,\n  muteVideoEvent: muteVideoEventMessage,\n  getStoredMessages: getStoredMessagesMessage,\n  userMessages: userMessagesMessage,\n};\n\nexport default messageBuilders;\n","import Skylink from '../../../../index';\nimport { SIG_MESSAGE_TYPE } from '../../../../constants';\n\nconst getJoinRoomMessage = (roomState) => {\n  const { room } = roomState;\n  const state = Skylink.getSkylinkState(room.id);\n  const initOptions = Skylink.getInitOptions();\n  return {\n    type: SIG_MESSAGE_TYPE.JOIN_ROOM,\n    uid: state.user.uid,\n    cid: state.key,\n    rid: room.id,\n    userCred: state.user.token,\n    timeStamp: state.user.timeStamp,\n    apiOwner: state.appKeyOwner,\n    roomCred: room.token,\n    start: room.startDateTime,\n    len: room.duration,\n    isPrivileged: state.isPrivileged,\n    autoIntroduce: state.autoIntroduce,\n    key: initOptions.appKey,\n  };\n};\n\nexport default getJoinRoomMessage;\n","import Skylink from '../../../../index';\nimport {\n  SIG_MESSAGE_TYPE, SM_PROTOCOL_VERSION, DT_PROTOCOL_VERSION, PEER_TYPE,\n} from '../../../../constants';\nimport PeerData from '../../../../peer-data/index';\n\nexport const getEnterRoomMessage = (roomState) => {\n  // FIXME: Welcome and Enter are exactly same but for targetMid which is extra in welcomeMsg. @Ishan to merge code for Welcome and Enter\n  const { room } = roomState;\n  const state = Skylink.getSkylinkState(room.id);\n  const initOptions = Skylink.getInitOptions();\n  const {\n    user, peerPriorityWeight, enableIceRestart, hasMCU,\n  } = state;\n  const { enableDataChannel } = initOptions;\n  const { AdapterJS } = window;\n  const userInfo = PeerData.getUserInfo(room);\n  const enterMsg = {\n    type: SIG_MESSAGE_TYPE.ENTER,\n    mid: user.sid,\n    rid: room.id,\n    agent: AdapterJS.webrtcDetectedBrowser,\n    version: (AdapterJS.webrtcDetectedVersion || 0).toString(),\n    os: window.navigator.platform,\n    userInfo,\n    receiveOnly: PeerData.getCurrentSessionInfo(room).config.receiveOnly,\n    weight: peerPriorityWeight,\n    temasysPluginVersion: AdapterJS.WebRTCPlugin.plugin ? AdapterJS.WebRTCPlugin.plugin.VERSION : null,\n    enableDataChannel,\n    enableIceRestart,\n    SMProtocolVersion: SM_PROTOCOL_VERSION,\n    DTProtocolVersion: DT_PROTOCOL_VERSION,\n  };\n\n  if (hasMCU) {\n    enterMsg.target = PEER_TYPE.MCU;\n    enterMsg.publisherId = user.sid;\n  }\n\n  return enterMsg;\n};\n\nexport default getEnterRoomMessage;\n","import Skylink from '../../../../index';\nimport { SIG_MESSAGE_TYPE, SM_PROTOCOL_VERSION, DT_PROTOCOL_VERSION } from '../../../../constants';\nimport PeerData from '../../../../peer-data/index';\n\nconst getWelcomeMessage = (currentRoom, targetMid) => {\n  // FIXME: Welcome and Enter are exactly same but for targetMid which is extra in welcomeMsg. @Ishan to merge code for Welcome and Enter\n  const state = Skylink.getSkylinkState(currentRoom.id);\n  const initOptions = Skylink.getInitOptions();\n  const {\n    user, peerPriorityWeight, enableIceRestart, room,\n  } = state;\n  const { enableDataChannel } = initOptions;\n  const { AdapterJS } = window;\n  const userInfo = PeerData.getUserInfo(room);\n\n  return {\n    type: SIG_MESSAGE_TYPE.WELCOME,\n    mid: user.sid,\n    rid: room.id,\n    agent: AdapterJS.webrtcDetectedBrowser,\n    version: (AdapterJS.webrtcDetectedVersion || 0).toString(),\n    os: window.navigator.platform,\n    userInfo,\n    receiveOnly: PeerData.getCurrentSessionInfo(room).config.receiveOnly,\n    weight: peerPriorityWeight,\n    temasysPluginVersion: AdapterJS.WebRTCPlugin.plugin ? AdapterJS.WebRTCPlugin.plugin.VERSION : null,\n    enableDataChannel,\n    enableIceRestart,\n    SMProtocolVersion: SM_PROTOCOL_VERSION,\n    DTProtocolVersion: DT_PROTOCOL_VERSION,\n    target: targetMid,\n  };\n};\n\nexport default getWelcomeMessage;\n","import PeerConnection from '../../../../peer-connection/index';\n\nconst getOfferMessage = (...args) => PeerConnection.createOffer(...args);\n\nexport default getOfferMessage;\n","import PeerConnection from '../../../../peer-connection/index';\n\nconst getAnswerMessage = (...args) => PeerConnection.createAnswer(...args);\n\nexport default getAnswerMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\n\nconst answerAckMessage = (state, targetMid, isSuccess) => {\n  const { room, user } = state;\n\n  return {\n    type: SIG_MESSAGE_TYPE.ANSWER_ACK,\n    rid: room.id,\n    mid: user.sid,\n    target: targetMid,\n    success: isSuccess,\n  };\n};\n\nexport default answerAckMessage;\n","import Skylink from '../../../../index';\nimport { SIG_MESSAGE_TYPE } from '../../../../constants';\n\nconst candidateMessage = (targetMid, roomState, candidate) => {\n  const rid = roomState.room.id;\n  const state = Skylink.getSkylinkState(rid);\n  return {\n    type: SIG_MESSAGE_TYPE.CANDIDATE,\n    label: candidate.sdpMLineIndex,\n    id: candidate.sdpMid,\n    candidate: candidate.candidate,\n    mid: state.user.sid,\n    target: targetMid,\n    rid,\n  };\n};\n\nexport default candidateMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\nimport { isAString } from '../../../../utils/helpers';\n\n/**\n * @typedef userDataMessage\n * @property {SkylinkConstants.SIG_MESSAGE_TYPE.UPDATE_USER} type\n * @property {SkylinkUser.sid} mid\n * @property {SkylinkRoom.id} rid\n * @property {SkylinkUser.userData} userData\n * @property {Number} state\n */\n/**\n * @param {SkylinkState} roomState\n * @returns {userDataMessage}\n * @memberOf SignalingMessageBuilder\n * @private\n */\nconst setUserDataMessage = roomState => ({\n  type: SIG_MESSAGE_TYPE.UPDATE_USER,\n  mid: roomState.user.sid,\n  rid: roomState.room.id,\n  userData: isAString(roomState.userData) ? roomState.userData : JSON.stringify(roomState.userData),\n  stamp: (new Date()).getTime(),\n});\n\nexport default setUserDataMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\n\n\n/**\n * @typedef peerListMessage\n * @property {SkylinkConstants.SIG_MESSAGE_TYPE.GET_PEERS} type\n * @property {boolean} showAll\n */\n\n/**\n * @param {boolean} showAll\n * @return {peerListMessage}\n * @memberOf SignalingMessageBuilder\n * @private\n */\nconst getPeerListMessage = showAll => ({\n  type: SIG_MESSAGE_TYPE.GET_PEERS,\n  showAll,\n});\n\nexport default getPeerListMessage;\n","import Skylink from '../../../../index';\nimport { SIG_MESSAGE_TYPE, SM_PROTOCOL_VERSION, DT_PROTOCOL_VERSION } from '../../../../constants';\nimport PeerData from '../../../../peer-data/index';\n\nconst restartOfferMessage = (roomKey, peerId, doIceRestart) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { AdapterJS } = window;\n  const initOptions = Skylink.getInitOptions();\n  const {\n    user, room, enableIceRestart, peerInformations, peerPriorityWeight,\n  } = state;\n\n  return {\n    type: SIG_MESSAGE_TYPE.RESTART,\n    mid: user.sid,\n    rid: room.id,\n    agent: AdapterJS.webrtcDetectedBrowser,\n    version: (AdapterJS.webrtcDetectedVersion || 0).toString(),\n    os: window.navigator.platform,\n    userInfo: PeerData.getUserInfo(room),\n    target: peerId,\n    weight: peerPriorityWeight,\n    receiveOnly: PeerData.getCurrentSessionInfo(room).config.receiveOnly,\n    publishOnly: PeerData.getCurrentSessionInfo(room).config.publishOnly,\n    enableDataChannel: initOptions.enableDataChannel,\n    enableIceRestart,\n    doIceRestart: doIceRestart === true && enableIceRestart && peerInformations[peerId]\n      && peerInformations[peerId].config.enableIceRestart,\n    isRestartResend: false,\n    temasysPluginVersion: AdapterJS.WebRTCPlugin.plugin ? AdapterJS.WebRTCPlugin.plugin.VERSION : null,\n    SMProtocolVersion: SM_PROTOCOL_VERSION,\n    DTProtocolVersion: DT_PROTOCOL_VERSION,\n  };\n};\n\nexport default restartOfferMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\n\n/**\n * Function that builds the 'stream' socket message.\n * @param {String} roomKey - The room rid.\n * @param {SkylinkUser} user - The peer sending the streamMessage.\n * @param {MediaStream} stream - The media stream.\n * @param {String} status - The stream status.\n * @param {Object} options\n * @param {String} options.isScreensharing - The flag if the ended stream is a screensharing stream.\n * @returns {JSON}\n * @memberOf SignalingMessageBuilder\n */\nconst streamMessage = (roomKey, user, stream, status, options) => ({\n  type: SIG_MESSAGE_TYPE.STREAM,\n  mid: user.sid,\n  rid: roomKey,\n  status,\n  streamId: stream.id,\n  settings: options,\n});\n\nexport default streamMessage;\n","import { PEER_TYPE } from '../../../../constants';\n\nconst recordingMessage = (rid, type) => ({\n  type,\n  rid,\n  target: PEER_TYPE.MCU,\n});\n\nexport default recordingMessage;\n","import { SIG_MESSAGE_TYPE, PEER_TYPE } from '../../../../constants';\n\nconst rtmpMessage = (type, rid, mid, rtmpId, streamId = null, endpoint = null) => {\n  const message = {\n    type,\n    rid,\n    rtmpId,\n    streamId,\n    endpoint,\n    mid,\n    target: PEER_TYPE.MCU,\n  };\n\n  if (type === SIG_MESSAGE_TYPE.STOP_RTMP) {\n    delete message.endpoint;\n    delete message.streamId;\n  }\n\n  return message;\n};\n\nexport default rtmpMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\n\nconst byeMessage = (state, peerId) => {\n  const { room, user, hasMCU } = state;\n  const byeMsg = {\n    type: SIG_MESSAGE_TYPE.BYE,\n    rid: room.id,\n    mid: user.sid,\n    target: peerId,\n  };\n\n  if (hasMCU) {\n    byeMsg.publisherId = user.sid;\n  }\n\n  return byeMsg;\n};\n\nexport default byeMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\n\nconst roomLockMessage = (roomState) => {\n  const { user, room, roomLocked } = roomState;\n\n  return {\n    type: SIG_MESSAGE_TYPE.ROOM_LOCK,\n    mid: user.sid,\n    rid: room.id,\n    lock: roomLocked,\n  };\n};\n\nexport default roomLockMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\n\nconst mediaInfoEventMessage = (roomState, peerId, mediaInfo) => ({\n  type: SIG_MESSAGE_TYPE.MEDIA_INFO_EVENT,\n  rid: roomState.room.id,\n  mid: mediaInfo.publisherId,\n  target: peerId,\n  publisherId: mediaInfo.publisherId,\n  mediaId: mediaInfo.mediaId,\n  mediaType: mediaInfo.mediaType,\n  mediaState: mediaInfo.mediaState,\n  transceiverMid: mediaInfo.transceiverMid,\n});\n\nexport default mediaInfoEventMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\nimport Skylink from '../../../../index';\n\nconst muteAudioEventMessage = (room, streamId) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  const { user, streamsMutedSettings } = roomState;\n\n  return {\n    type: SIG_MESSAGE_TYPE.MUTE_AUDIO_EVENT,\n    mid: user.sid,\n    rid: room.id,\n    muted: streamsMutedSettings[streamId].audioMuted,\n    stamp: (new Date()).getTime(),\n    streamId,\n  };\n};\n\nexport default muteAudioEventMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\nimport Skylink from '../../../../index';\n\nconst muteVideoEventMessage = (room, streamId) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  const { user, streamsMutedSettings } = roomState;\n\n  return {\n    type: SIG_MESSAGE_TYPE.MUTE_VIDEO_EVENT,\n    mid: user.sid,\n    rid: room.id,\n    muted: streamsMutedSettings[streamId].videoMuted,\n    stamp: (new Date()).getTime(),\n    streamId,\n  };\n};\n\nexport default muteVideoEventMessage;\n","import { SIG_MESSAGE_TYPE } from '../../../../constants';\n\nconst getStoredMessagesMessage = (roomState) => {\n  const { user, room } = roomState;\n  return {\n    mid: user.sid,\n    rid: room.id,\n    target: user.sid,\n    type: SIG_MESSAGE_TYPE.GET_STORED_MESSAGES,\n  };\n};\n\nexport default getStoredMessagesMessage;\n","import { generateUUID } from '../../../../utils/helpers';\nimport { SIG_MESSAGE_TYPE, TAGS } from '../../../../constants';\nimport logger from '../../../../logger';\nimport MESSAGES from '../../../../messages';\n\nconst getUserMessages = (roomState, config, message) => {\n  const signalingReadyMessages = [];\n  const { user, room } = roomState;\n  const {\n    listOfPeers, isPrivate, isPersistent, secretId,\n  } = config;\n\n  const messageBody = {\n    data: message,\n    mid: user.sid,\n    rid: room.id,\n    msgId: generateUUID(),\n    type: SIG_MESSAGE_TYPE.MESSAGE,\n  };\n\n  if (secretId) {\n    messageBody.secretId = secretId;\n  }\n\n  if (isPrivate) {\n    for (let i = 0; i < listOfPeers.length; i += 1) {\n      const peerId = listOfPeers[i];\n      const mBody = Object.assign({}, messageBody);\n      mBody.target = peerId;\n      signalingReadyMessages.push(mBody);\n      logger.log.DEBUG([peerId, TAGS.MESSAGING, null, MESSAGES.MESSAGING.PRIVATE_MESSAGE], { message });\n    }\n  } else {\n    if (isPersistent) {\n      messageBody.isPersistent = isPersistent;\n    }\n\n    signalingReadyMessages.push(messageBody);\n    logger.log.DEBUG([null, TAGS.MESSAGING, null, MESSAGES.MESSAGING.BROADCAST_MESSAGE], { message });\n  }\n\n  return signalingReadyMessages;\n};\n\nexport default getUserMessages;\n","import messageBuilders from './builders/index';\n\n/**\n * @class\n * @classdesc Class representing a SignalingMessageBuilder instance.\n * @namespace SignalingMessageBuilder\n * @private\n */\nclass SignalingMessageBuilder {\n  constructor() {\n    this.messageBuilders = messageBuilders;\n  }\n\n  getJoinRoomMessage(...args) {\n    return this.messageBuilders.joinRoom(...args);\n  }\n\n  getWelcomeMessage(...args) {\n    return this.messageBuilders.welcome(...args);\n  }\n\n  getEnterRoomMessage(...args) {\n    return this.messageBuilders.enterRoom(...args);\n  }\n\n  getAnswerMessage(...args) {\n    return this.messageBuilders.answer(...args);\n  }\n\n  getAnswerAckMessage(...args) {\n    return this.messageBuilders.answerAck(...args);\n  }\n\n  getOfferMessage(...args) {\n    return this.messageBuilders.offer(...args);\n  }\n\n  getCandidateMessage(...args) {\n    return this.messageBuilders.candidate(...args);\n  }\n\n  getSetUserDataMessage(roomState) {\n    return this.messageBuilders.setUserData(roomState);\n  }\n\n  getPeerListMessage(...args) {\n    return this.messageBuilders.getPeerList(...args);\n  }\n\n  getRestartOfferMessage(...args) {\n    return this.messageBuilders.restartOffer(...args);\n  }\n\n  getStreamMessage(...args) {\n    return this.messageBuilders.stream(...args);\n  }\n\n  getRecordingMessage(...args) {\n    return this.messageBuilders.recording(...args);\n  }\n\n  getPeerMessagesForSignaling(...args) {\n    return this.messageBuilders.signalingMessages(...args);\n  }\n\n  getMuteAudioMessage(...args) {\n    return this.messageBuilders.muteAudioEvent(...args);\n  }\n\n  getMuteVideoMessage(...args) {\n    return this.messageBuilders.muteVideoEvent(...args);\n  }\n\n  getRTMPMessage(...args) {\n    return this.messageBuilders.rtmp(...args);\n  }\n\n  getByeMessage(...args) {\n    return this.messageBuilders.bye(...args);\n  }\n\n  getRoomLockMessage(...args) {\n    return this.messageBuilders.roomLock(...args);\n  }\n\n  getMediaInfoEventMessage(...args) {\n    return this.messageBuilders.mediaInfoEvent(...args);\n  }\n\n  getGetStoredMessagesMessage(...args) {\n    return this.messageBuilders.getStoredMessages(...args);\n  }\n\n  getUserMessages(...args) {\n    return this.messageBuilders.userMessages(...args);\n  }\n}\n\nexport default SignalingMessageBuilder;\n","import clone from 'clone';\nimport {\n  createSocket,\n  sendChannelMessage,\n  processSignalingMessage,\n  setSocketCallbacks,\n  shouldBufferMessage,\n} from './signaling-server-helpers';\nimport logger from '../../logger';\nimport SignalingMessageHandler from './message-handler/index';\nimport SignalingMessageBuilder from './message-builder/index';\nimport {\n  socketError, channelMessage, handshakeProgress,\n} from '../../skylink-events';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport Skylink from '../../index';\nimport MESSAGES from '../../messages';\nimport { TAGS, SOCKET_ERROR, HANDSHAKE_PROGRESS } from '../../constants';\n\nconst SOCKET_TYPE = {\n  POLLING: 'Polling',\n  WEBSOCKET: 'WebSocket',\n  XHR_POLLING: 'xhr-polling',\n  JSONP_POLLING: 'jsonp-polling',\n};\n\nlet instance = null;\n\n/**\n * @class\n * @classdesc Singleton class that represents a signaling server\n * @private\n */\nclass SkylinkSignalingServer {\n  constructor() {\n    if (!instance) {\n      instance = this;\n    }\n    /**\n     * Stores the WebSocket object\n     * @type {WebSocket}\n     */\n    this.socket = null;\n    /**\n     * Stores the number of socket reconnect attempts\n     * @type {number}\n     */\n    this.attempts = 0;\n    /**\n     * Current timestamp\n     * @type {number}\n     */\n    this.timestamp = new Date().valueOf();\n    /**\n     * Handler for incoming messages on the socket\n     * @type {SignalingMessageHandler}\n     */\n    this.messageHandler = new SignalingMessageHandler();\n    /**\n     * Handler for outbound messages via the socket\n     * @type {SignalingMessageBuilder}\n     */\n    this.messageBuilder = new SignalingMessageBuilder();\n    /**\n     * Config needed for create a socket and establishing a socket connection with the Signaling Server\n     * @type {{protocol: Window.location.protocol, socketType: string, signalingServerProtocol: Window.location.protocol, socketSession: {finalAttempts: number, attempts: number}, fallbackType: null, signalingServerPort: null}}\n     */\n    this.config = null;\n    return instance;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  resetSocketConfig(protocol) {\n    return {\n      protocol,\n      socketType: !window.WebSocket ? SOCKET_TYPE.POLLING : SOCKET_TYPE.WEBSOCKET,\n      signalingServerProtocol: protocol,\n      socketSession: {\n        finalAttempts: 0,\n        attempts: 0,\n      },\n      fallbackType: null,\n      signalingServerPort: null,\n      socketTimeout: false,\n    };\n  }\n\n  /**\n   * Method that creates a socket - Returns the same instance of socket if already created.\n   * @param {SkylinkRoom.id} roomKey\n   * @fires socketError\n   * @return {Promise}\n   */\n  createSocket(roomKey) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n    roomState.socketSession = this.resetSocketConfig(roomState.signalingServerProtocol);\n    Skylink.setSkylinkState(roomState, roomKey);\n\n    return new Promise((resolve, reject) => {\n      try {\n        if (this.socket !== null && this.socket instanceof window.io.Socket && this.socket.connected) {\n          resolve();\n        } else {\n          this.tryCreateSocket(roomKey, resolve, reject);\n        }\n      } catch (ex) {\n        this.handleCreateSocketFailure(roomKey, resolve, reject, ex);\n      }\n    });\n  }\n\n  tryCreateSocket(roomKey, resolve, reject) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n    const { socketSession } = roomState;\n\n    this.socket = createSocket({\n      config: socketSession,\n      roomKey,\n    });\n\n    setSocketCallbacks(roomKey, this, resolve, reject);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  handleCreateSocketFailure(roomKey, resolve, reject, error) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n    const { socketSession } = roomState;\n    logger.log.ERROR(MESSAGES.INIT.SOCKET_CREATE_FAILED, error);\n\n    dispatchEvent(socketError({\n      session: clone(socketSession),\n      errorCode: SOCKET_ERROR.CONNECTION_FAILED,\n      type: socketSession.fallbackType,\n      error,\n    }));\n\n    reject(error);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  dispatchHandshakeProgress(roomState, state) {\n    dispatchEvent(handshakeProgress({\n      peerId: roomState.user.sid,\n      state: HANDSHAKE_PROGRESS[state],\n      error: null,\n      room: roomState.room,\n    }));\n  }\n\n  /**\n   *\n   * @param args\n   */\n  answer(...args) {\n    return this.messageBuilder.getAnswerMessage(...args).then((answer) => {\n      const state = args[0];\n      this.sendMessage(answer);\n      this.dispatchHandshakeProgress(state, 'ANSWER');\n      return answer;\n    });\n  }\n\n  answerAck(...args) {\n    const answerAck = this.messageBuilder.getAnswerAckMessage(...args);\n    const roomState = args[0];\n    this.sendMessage(answerAck);\n    this.dispatchHandshakeProgress(roomState, 'ANSWER_ACK');\n  }\n\n  /**\n   *\n   * @param args\n   */\n  enterRoom(...args) {\n    const enter = this.messageBuilder.getEnterRoomMessage(...args);\n    this.sendMessage(enter);\n    this.dispatchHandshakeProgress(...args, 'ENTER');\n  }\n\n  joinRoom(...args) {\n    const join = this.messageBuilder.getJoinRoomMessage(...args);\n    this.sendMessage(join);\n  }\n\n  offer(...args) {\n    const room = args[0];\n    const peerId = args[1];\n    const state = Skylink.getSkylinkState(room.id);\n    if (state.peerConnections[peerId].negotiating) {\n      logger.log.DEBUG([peerId, TAGS.SIG_SERVER, null, `${MESSAGES.SIGNALING.ABORTING_OFFER}`]);\n      return;\n    }\n\n    this.messageBuilder.getOfferMessage(...args).then((offer) => {\n      this.sendMessage(offer);\n      this.dispatchHandshakeProgress(state, 'OFFER');\n    });\n  }\n\n  welcome(...args) {\n    const welcome = this.messageBuilder.getWelcomeMessage(...args);\n    this.sendMessage(welcome);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  noop() {\n    return null;\n  }\n\n  sendCandidate(...args) {\n    const candidate = this.messageBuilder.getCandidateMessage(...args);\n    if (candidate) {\n      this.sendMessage(candidate);\n    }\n  }\n\n  /**\n   * @param {SkylinkState} roomState\n   */\n  setUserData(roomState) {\n    const userData = this.messageBuilder.getSetUserDataMessage(roomState);\n    if (userData) {\n      this.sendMessage(userData);\n    }\n  }\n\n  /**\n   * @param {boolean} showAll\n   */\n  getPeerList(showAll) {\n    const peers = this.messageBuilder.getPeerListMessage(showAll);\n    if (peers) {\n      this.sendMessage(peers);\n    }\n  }\n\n  stream(...args) {\n    const stream = this.messageBuilder.getStreamMessage(...args);\n    if (stream) {\n      this.sendMessage(stream);\n    }\n  }\n\n  recording(...args) {\n    const recordingMessage = this.messageBuilder.getRecordingMessage(...args);\n    this.sendMessage(recordingMessage);\n  }\n\n  rtmp(...args) {\n    const rtmpMessage = this.messageBuilder.getRTMPMessage(...args);\n    this.sendMessage(rtmpMessage);\n  }\n\n  muteAudioEvent(roomState, streamIds) {\n    const muteAudio = this.messageBuilder.getMuteAudioMessage(roomState, streamIds);\n    if (muteAudio) {\n      this.sendMessage(muteAudio);\n    }\n  }\n\n  muteVideoEvent(roomState, streamId) {\n    const muteVideo = this.messageBuilder.getMuteVideoMessage(roomState, streamId);\n    if (muteVideo) {\n      this.sendMessage(muteVideo);\n    }\n  }\n\n  roomLock(roomState) {\n    const roomLock = this.messageBuilder.getRoomLockMessage(roomState);\n    if (roomLock) {\n      this.sendMessage(roomLock);\n    }\n  }\n\n  bye(...args) {\n    const byeMessage = this.messageBuilder.getByeMessage(...args);\n    this.sendMessage(byeMessage);\n  }\n\n  mediaInfoEvent(roomState, peerId, mediaInfo) {\n    const mInfo = this.messageBuilder.getMediaInfoEventMessage(roomState, peerId, mediaInfo);\n    if (mInfo) {\n      this.sendMessage(mInfo);\n    }\n  }\n\n  getStoredMessages(roomState) {\n    const history = this.messageBuilder.getGetStoredMessagesMessage(roomState);\n    if (history) {\n      this.sendMessage(history);\n    }\n  }\n\n  onMessage(message) {\n    const roomState = Skylink.getSkylinkState(JSON.parse(message).rid);\n    if (!roomState) {\n      return; // FIXME: to handle multi room when the last peer has left one room and that roomState has been removed but the socket channel is still open as the peer is still in the other room\n    }\n    const { socketSession } = roomState;\n    dispatchEvent(channelMessage({\n      message,\n      socketSession: clone(socketSession),\n    }));\n    processSignalingMessage(this.messageHandler, JSON.parse(message));\n  }\n\n  sendMessage(message) {\n    if (!shouldBufferMessage(message)) {\n      logger.log.INFO(['SIG SERVER', null, message.type, 'sent']);\n      sendChannelMessage(this.socket, message);\n    }\n  }\n\n  sendUserMessage(roomState, config, message) {\n    const peerMessages = this.messageBuilder.getUserMessages(roomState, config, message);\n    if (Array.isArray(peerMessages) && peerMessages.length) {\n      peerMessages.map((peerMessage) => {\n        this.sendMessage(peerMessage);\n        return null;\n      });\n    }\n  }\n\n  updateAttempts(roomKey, key, attempts) {\n    this.attempts = attempts;\n\n    const state = Skylink.getSkylinkState(roomKey);\n    const { socketSession } = state;\n    socketSession.socketSession[key] = attempts;\n\n    Skylink.setSkylinkState(state, roomKey);\n  }\n\n  getAttempts() {\n    return this.attempts;\n  }\n}\n\nexport default SkylinkSignalingServer;\n","import retrieveTransceiverMid from './retrieveTransceiverMid';\nimport retrieveMediaState from './retrieveMediaState';\nimport retrieveMediaId from './retrieveMediaId';\nimport buildPeerMediaInfo from './buildPeerMediaInfo';\nimport retrieveStreamIdOfTrack from './retrieveStreamIdOfTrack';\nimport retrieveTracks from './retrieveTracks';\nimport updatePeerMediaInfo from './updatePeerMediaInfo';\nimport sendMediaInfoMsg from './sendMediaInfoMsg';\nimport parseSDPForTransceiverMid from './parseSDPForTransceiverMid';\nimport retrieveValueGivenTransceiverMid from './retrieveValueGivenTransceiverMid';\nimport retrieveFormattedMediaInfo from './retrieveFormattedMediaInfo';\nimport resetPeerMedia from './resetPeerMedia';\nimport populatePeerMediaInfo from './populatePeerMediaInfo';\nimport processOnRemoveTrack from './processOnRemoveTrack';\n\nconst helpers = {\n  retrieveTransceiverMid,\n  retrieveMediaState,\n  retrieveMediaId,\n  buildPeerMediaInfo,\n  retrieveStreamIdOfTrack,\n  retrieveTracks,\n  updatePeerMediaInfo,\n  sendMediaInfoMsg,\n  parseSDPForTransceiverMid,\n  retrieveValueGivenTransceiverMid,\n  retrieveFormattedMediaInfo,\n  resetPeerMedia,\n  populatePeerMediaInfo,\n  processOnRemoveTrack,\n};\n\nexport default helpers;\n","import SkylinkSignalingServer from '../../server-communication/signaling-server/index';\nimport Skylink from '../../index';\nimport { PEER_TYPE } from '../../constants';\n\nconst sendMediaInfoMsg = (room, updatedMediaInfo) => {\n  const signaling = new SkylinkSignalingServer();\n  const state = Skylink.getSkylinkState(room.id);\n  const { user, hasMCU, peerConnections } = state;\n  const peerIds = hasMCU ? [PEER_TYPE.MCU] : Object.keys(peerConnections).filter(peerId => (peerId !== user.sid) && (peerId !== PEER_TYPE.MCU));\n\n  peerIds.forEach((target) => {\n    signaling.mediaInfoEvent(state, target, updatedMediaInfo);\n  });\n};\n\nexport default sendMediaInfoMsg;\n","import SessionDescription from '../../session-description';\nimport helpers from './index';\nimport { MEDIA_INFO, MEDIA_STATE } from '../../constants';\nimport Skylink from '../../index';\n\nconst parseSDPForTransceiverMid = (room, peerId, sessionDescription) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerMedias } = state;\n  const { beSilentOnParseLogs } = Skylink.getInitOptions();\n  const mediaInfos = Object.values(peerMedias[peerId]);\n  const mediaMids = SessionDescription.getTransceiverMid(sessionDescription, beSilentOnParseLogs);\n  const audioMids = mediaMids.audio;\n  const videoMids = mediaMids.video;\n\n  for (let m = 0; m < mediaInfos.length; m += 1) {\n    const mediaInfo = mediaInfos[m];\n    // If mediaState is unavailable, there is no corresponding transceiverMid in the SDP and mediaInfo.transceiverMid will be 'null'. mediaInfo.transceiverMid cannot be 'null'.\n    mediaInfo.transceiverMid = mediaInfo.mediaState === MEDIA_STATE.UNAVAILABLE ? mediaInfo.transceiverMid : null;\n    for (let a = 0; a < audioMids.length; a += 1) {\n      if (audioMids[a].streamId === mediaInfo.streamId && (audioMids[a].direction === 'sendonly' || audioMids[a].direction === 'sendrecv')) {\n        helpers.updatePeerMediaInfo(room, peerId, false, mediaInfo.mediaId, MEDIA_INFO.TRANSCEIVER_MID, audioMids[a].transceiverMid);\n        break;\n      }\n    }\n\n    for (let v = 0; v < videoMids.length; v += 1) {\n      if (videoMids[v].streamId === mediaInfo.streamId && (videoMids[v].direction === 'sendonly' || videoMids[v].direction === 'sendrecv')) {\n        helpers.updatePeerMediaInfo(room, peerId, false, mediaInfo.mediaId, MEDIA_INFO.TRANSCEIVER_MID, videoMids[v].transceiverMid);\n        break;\n      }\n    }\n  }\n};\n\nexport default parseSDPForTransceiverMid;\n","const retrieveValueGivenTransceiverMid = (state, peerId, transceiverMid, key) => {\n  const { peerMedias } = state;\n  const mediaInfos = Object.values(peerMedias[peerId]);\n  for (let m = 0; m < mediaInfos.length; m += 1) {\n    if (mediaInfos[m].transceiverMid === transceiverMid) {\n      return mediaInfos[m][key];\n    }\n  }\n\n  return null;\n};\n\nexport default retrieveValueGivenTransceiverMid;\n","import clone from 'clone';\nimport Skylink from '../../index';\n\nconst retrieveFormattedMediaInfo = (room, peerId) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { peerMedias } = state;\n  const mediaInfos = Object.values(peerMedias[peerId]);\n  const formattedMediaInfos = [];\n\n  for (let m = 0; m < mediaInfos.length; m += 1) {\n    const mediaInfo = mediaInfos[m];\n    const clonedMediaInfo = clone(mediaInfo);\n    delete clonedMediaInfo.trackId;\n    delete clonedMediaInfo.streamId;\n    formattedMediaInfos.push(clonedMediaInfo);\n  }\n\n  return formattedMediaInfos;\n};\n\nexport default retrieveFormattedMediaInfo;\n","import Skylink from '../../index';\n\nconst resetPeerMedia = (room, peerId) => {\n  const updatedState = Skylink.getSkylinkState(room.id);\n  const peerMedia = updatedState.peerMedias[peerId];\n\n  if (peerMedia) {\n    updatedState.peerMedias[peerId] = {};\n  }\n\n  return updatedState;\n};\n\nexport default resetPeerMedia;\n","import { isEmptyObj } from '../../utils/helpers';\n\n// peerMedia will have a previous state if setPeerMediaInfo is called from renegotiation\nconst peerMediaHasPreviousState = (clonedPeerMedia, mediaId) => !isEmptyObj(clonedPeerMedia) && clonedPeerMedia[mediaId];\n\nconst populatePeerMediaInfo = (updatedState, clonedPeerMedia, mediaInfo) => {\n  const peerMedia = updatedState.peerMedias[mediaInfo.publisherId] || {};\n  peerMedia[mediaInfo.mediaId] = mediaInfo;\n\n  if (peerMediaHasPreviousState(clonedPeerMedia, mediaInfo.mediaId)) {\n    peerMedia[mediaInfo.mediaId].streamId = (mediaInfo.transceiverMid === clonedPeerMedia[mediaInfo.mediaId].transceiverMid) ? clonedPeerMedia[mediaInfo.mediaId].streamId : '';\n  }\n\n  return peerMedia;\n};\n\nexport default populatePeerMediaInfo;\n","import {\n  BROWSER_AGENT, MEDIA_TYPE, TAGS, TRACK_KIND,\n} from '../../constants';\nimport PeerConnectionCallbacks from '../../peer-connection/helpers/peer-addition/callbacks';\nimport logger from '../../logger';\nimport MESSAGES from '../../messages';\n\nconst processOnRemoveTrack = (state, peerId, clonedMediaInfo) => {\n  // This method is required because react native android does not have a way for the remote to register onremovetrack event\n  // onremovetrack needs to be caught in the renegotiation when the remote calls stopStreams and sends an offer\n  // the removed track/stream will be set to unavailable\n  // Although react native ios has didRemoveReceiver callback, and onremovetrack can be artificially attached to the peerConnection to process\n  // a stopped stream, the type of stream is not identifiable i.e is screenshare or not.\n  // Therefore react native ios and android will implement the same workaround for now.\n  const { AdapterJS } = window;\n  if (AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.REACT_NATIVE && clonedMediaInfo) {\n    const { room } = state;\n    const trackInfo = {\n      track: {\n        id: null,\n        kind: null,\n      },\n    };\n    const stream = {\n      id: null,\n    };\n    trackInfo.track.id = clonedMediaInfo.trackId;\n    trackInfo.track.kind = (clonedMediaInfo.mediaType === MEDIA_TYPE.AUDIO || clonedMediaInfo.mediaType === MEDIA_TYPE.AUDIO_MIC) ? TRACK_KIND.AUDIO : TRACK_KIND.VIDEO;\n    stream.id = clonedMediaInfo.streamId;\n    trackInfo.stream = stream;\n    if (!(trackInfo.track.id || trackInfo.track.kind || stream.id)) {\n      logger.log.DEBUG([peerId, TAGS.MEDIA_STREAM, null, `${MESSAGES.BROWSER_AGENT.REACT_NATIVE.ERRORS.DROPPING_ONREMOVETRACK}`], trackInfo);\n      return;\n    }\n    PeerConnectionCallbacks.onremovetrack(peerId, room, clonedMediaInfo.mediaType === MEDIA_TYPE.VIDEO_SCREEN, trackInfo);\n  }\n};\n\nexport default processOnRemoveTrack;\n","import clone from 'clone';\nimport Skylink from '../index';\nimport helpers from './helpers/index';\nimport {\n  MEDIA_TYPE, MEDIA_INFO, TAGS, TRACK_KIND, MEDIA_STATE, PEER_TYPE,\n} from '../constants';\nimport logger from '../logger';\nimport MESSAGES from '../messages';\nimport { mediaInfoDeleted } from '../skylink-events';\nimport { dispatchEvent } from '../utils/skylinkEventManager';\nimport { isEmptyArray } from '../utils/helpers';\n\nclass PeerMedia {\n  /**\n   * Method that updates local media info with user sid returned from inRoom message. There is no user.sid information prior to inRoom message.\n   * @param room\n   * @param sid\n   * @private\n   */\n  static updatePeerMediaWithUserSid(room, sid) {\n    const updatedState = Skylink.getSkylinkState(room.id);\n\n    updatedState.peerMedias[sid] = Object.assign({}, updatedState.peerMedias.null);\n    delete updatedState.peerMedias.null;\n    Skylink.setSkylinkState(updatedState, room.id);\n    Object.keys(updatedState.peerMedias[sid]).forEach((mediaId) => {\n      helpers.updatePeerMediaInfo(room, sid, false, mediaId, MEDIA_INFO.PUBLISHER_ID, sid);\n    });\n  }\n\n  /**\n   * Method that updates the stream id of the remote peer in the peer media info\n   * @param room\n   * @param peerId\n   * @param transceiverMid\n   * @param streamId\n   */\n  static updateStreamIdFromOntrack(room, peerId, transceiverMid, streamId) {\n    const state = Skylink.getSkylinkState(room.id);\n    const mediaId = helpers.retrieveValueGivenTransceiverMid(state, peerId, transceiverMid, MEDIA_INFO.MEDIA_ID);\n    helpers.updatePeerMediaInfo(room, peerId, false, mediaId, MEDIA_INFO.STREAM_ID, streamId);\n  }\n\n  /**\n   * Method that checks if a transceiver mid corresponds to a screen stream\n   * @param state\n   * @param peerId\n   * @param transceiverMid\n   * @returns {boolean}\n   */\n  static isVideoScreenTrack(state, peerId, transceiverMid) {\n    const { peerMedias } = state;\n    const mediaInfos = Object.values(peerMedias[peerId]);\n\n    for (let m = 0; m < mediaInfos.length; m += 1) {\n      if (mediaInfos[m].transceiverMid === transceiverMid) {\n        return mediaInfos[m].mediaType === MEDIA_TYPE.VIDEO_SCREEN;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Method that updates the peer media info state to unavailable.\n   * @param room\n   * @param peerId\n   * @param mediaId\n   */\n  static setMediaStateToUnavailable(room, peerId, mediaId) {\n    helpers.updatePeerMediaInfo(room, peerId, false, mediaId, MEDIA_INFO.MEDIA_STATE, MEDIA_STATE.UNAVAILABLE);\n  }\n\n  /**\n   * Method that removes mediaInfo that has mediaState set to unavailable.\n   * @param {SkylinkRoom} room\n   * @param {String} peerId\n   * @param {String|null} mediaId\n   */\n  static deleteUnavailableMedia(room, peerId, mediaId = null) {\n    const updatedState = Skylink.getSkylinkState(room.id);\n\n    if (peerId === PEER_TYPE.MCU || !updatedState.peerMedias[peerId]) {\n      return;\n    }\n\n    let clonedMediaInfo;\n    if (!mediaId) {\n      const mediaInfos = updatedState.peerMedias[peerId];\n      Object.values(mediaInfos).forEach((mInfo) => {\n        if (mInfo.mediaState === MEDIA_STATE.UNAVAILABLE) {\n          clonedMediaInfo = clone(mInfo);\n          delete updatedState.peerMedias[peerId][mInfo.mediaId];\n        }\n      });\n    } else {\n      clonedMediaInfo = clone(updatedState.peerMedias[peerId][mediaId]);\n      delete updatedState.peerMedias[peerId][mediaId];\n    }\n\n    Skylink.setSkylinkState(updatedState, room.id);\n\n    helpers.processOnRemoveTrack(updatedState, peerId, clonedMediaInfo);\n\n    if (clonedMediaInfo) {\n      dispatchEvent(mediaInfoDeleted({\n        mediaInfo: clonedMediaInfo,\n      }));\n    }\n  }\n\n  /**\n   * Method that updates the peer media info.\n   * @param room\n   * @param peerId\n   * @param mediaId\n   * @param key\n   * @param value\n   * @private\n   */\n  static updatePeerMediaInfo(room, peerId, mediaId, key, value) {\n    helpers.updatePeerMediaInfo(room, peerId, true, mediaId, key, value);\n  }\n\n  /**\n   * Method that updates the transceiver mid value of local media info after set local description.\n   * // TODO: remove as it is no longer called\n   * @param room\n   * @param peerId\n   * @private\n   */\n  static updateTransceiverMid(room, peerId) {\n    try {\n      const tracks = helpers.retrieveTracks(room);\n      tracks.forEach((track) => {\n        const transceiverMid = helpers.retrieveTransceiverMid(room, track);\n        const streamId = helpers.retrieveStreamIdOfTrack(room, track);\n        const mediaId = helpers.retrieveMediaId(track.kind, streamId);\n        helpers.updatePeerMediaInfo(room, peerId, false, mediaId, MEDIA_INFO.TRANSCEIVER_MID, transceiverMid);\n      });\n    } catch (err) {\n      logger.log.ERROR([peerId, TAGS.PEER_MEDIA, null, MESSAGES.MEDIA_INFO.ERRORS.FAILED_UPDATING_TRANSCEIVER_MID], err);\n    }\n  }\n\n  /**\n   * Method that sets the remote peer media info from the offer.\n   * @param room\n   * @param targetMid\n   * @param mediaInfoList\n   */\n  static setPeerMediaInfo(room, targetMid, mediaInfoList = []) {\n    try {\n      const state = Skylink.getSkylinkState(room.id);\n\n      if (targetMid === PEER_TYPE.MCU && !isEmptyArray(mediaInfoList)) { // targetMid needs to be obtained from\n        // mediaInfoList\n        const targetPeerIds = [];\n        mediaInfoList.forEach((mediaInfo) => {\n          if (targetPeerIds.indexOf(mediaInfo.publisherId) === -1) {\n            targetPeerIds.push(mediaInfo.publisherId);\n          }\n        });\n        targetPeerIds.forEach(peerId => this.setPeerMediaInfo(room, peerId, mediaInfoList));\n      } else if (targetMid !== PEER_TYPE.MCU) {\n        const clonedPeerMedia = clone(state.peerMedias[targetMid]) || {};\n        const updatedState = helpers.resetPeerMedia(room, targetMid);\n        mediaInfoList.forEach((mediaInfo) => {\n          updatedState.peerMedias[mediaInfo.publisherId] = helpers.populatePeerMediaInfo(updatedState, clonedPeerMedia, mediaInfo);\n        });\n        Skylink.setSkylinkState(updatedState, room.id);\n      }\n    } catch (err) {\n      logger.log.ERROR([targetMid, TAGS.PEER_MEDIA, null, MESSAGES.MEDIA_INFO.ERRORS.FAILED_SETTING_PEER_MEDIA_INFO]);\n    }\n  }\n\n  /**\n   * Method that returns the streamId from the peer media info.\n   * @param room\n   * @param peerId\n   * @param mediaId\n   * @param transceiverMid\n   * @returns {String} streamId\n   */\n  static retrieveStreamId(room, peerId, mediaId, transceiverMid) {\n    const state = Skylink.getSkylinkState(room.id);\n    const { peerMedias } = state;\n    const mediaInfo = peerMedias[peerId][mediaId];\n    const streamId = mediaInfo.transceiverMid === transceiverMid ? mediaInfo.streamId : null;\n\n    if (!streamId) {\n      logger.log.ERROR([peerId, TAGS.PEER_MEDIA, null, MESSAGES.MEDIA_INFO.ERRORS.NO_ASSOCIATED_STREAM_ID]);\n    }\n\n    return streamId;\n  }\n\n  /**\n   * Method that returns the mediaId\n   * @param trackKind\n   * @param streamId\n   * @returns {String} mediaId\n   */\n  static retrieveMediaId(trackKind, streamId) {\n    return helpers.retrieveMediaId(trackKind, streamId);\n  }\n\n  /**\n   * Method that returns the local media info format for offer and answer message.\n   * @param room\n   * @param peerId\n   * @param sessionDescription\n   * @returns {object} mediaInfo\n   * @private\n   */\n  static retrieveMediaInfoForOfferAnswer(room, sessionDescription) {\n    const state = Skylink.getSkylinkState(room.id);\n    const peerId = state.user.sid;\n\n    helpers.parseSDPForTransceiverMid(room, peerId, sessionDescription);\n    return helpers.retrieveFormattedMediaInfo(room, peerId);\n  }\n\n  /**\n   * Method that processes the peer media and adds it to the state after successfully obtaining the stream from getUserMedia. MediaInfoEvent is not dispatched.\n   * @param room\n   * @param peerId\n   * @param stream\n   * @param isScreensharing\n   * @param dispatchEvt - The flag if the update should dispatch mediaInfoEvent signaling message.\n   * @private\n   */\n  static processPeerMedia(room, peerId, stream, isScreensharing, dispatchEvt = false) {\n    const updatedState = Skylink.getSkylinkState(room.id);\n    const peerMedia = updatedState.peerMedias[peerId] || {};\n    const tracks = stream.getTracks();\n    let mediaId = null;\n\n    try {\n      tracks.forEach((track) => {\n        mediaId = helpers.retrieveMediaId(track.kind, stream.id);\n        // eslint-disable-next-line no-nested-ternary\n        peerMedia[mediaId] = helpers.buildPeerMediaInfo(room, peerId, track, stream.id, track.kind === TRACK_KIND.AUDIO ? MEDIA_TYPE.AUDIO_MIC : (isScreensharing ? MEDIA_TYPE.VIDEO_SCREEN : MEDIA_TYPE.VIDEO_CAMERA));\n        helpers.updatePeerMediaInfo(room, peerId, dispatchEvt, mediaId, null, null, peerMedia[mediaId]);\n      });\n    } catch (err) {\n      logger.log.ERROR([peerId, TAGS.MEDIA_INFO, MESSAGES.MEDIA_INFO.ERRORS.FAILED_PROCESSING_PEER_MEDIA], err);\n    }\n  }\n}\n\nexport default PeerMedia;\n","import helpers from './index';\nimport Skylink from '../../index';\nimport MESSAGES from '../../messages';\nimport logger from '../../logger';\nimport { mediaAccessSuccess } from '../../skylink-events';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport PeerMedia from '../../peer-media/index';\nimport { TAGS } from '../../constants';\nimport { hasAudioTrack, hasVideoTrack } from '../../utils/helpers';\n\nconst isStreamInState = (state, stream) => {\n  const { streams } = state;\n\n  if (!streams.userMedia && !streams.screenshare) {\n    return false;\n  }\n\n  const streamObjs = streams.userMedia ? Object.values(streams.userMedia) : [];\n  if (streamObjs.some(streamObj => streamObj.id === stream.id)) {\n    return true;\n  }\n\n  return streams.screenshare && streams.screenshare.id === stream.id;\n};\n\n/**\n * Function that processes the streams object in the state.\n * @param {MediaStream} stream - User MediaStream object\n * @param {GetUserMediaOptions} settings - Options used to get the peer-media stream\n * @param {SkylinkRoom.id} roomkey - Room's id\n * @param {boolean} [isScreensharing=false] isScreensharing\n * @param {boolean} [isAudioFallback=false] isAudioFallback\n * @memberOf MediaStreamHelpers\n * @fires mediaAccessSuccess\n * @private\n * */\nconst processStreamInState = (stream = null, settings = {}, roomkey, isScreensharing = false, isAudioFallback = false) => {\n  if (!stream) return;\n  const updatedState = Skylink.getSkylinkState(roomkey);\n\n  if (isStreamInState(updatedState, stream)) {\n    return;\n  }\n\n  helpers.processNewStream(updatedState.room, stream, settings, isScreensharing);\n  PeerMedia.processPeerMedia(updatedState.room, updatedState.user.sid, stream, isScreensharing);\n\n  if (isAudioFallback) {\n    logger.log.DEBUG([updatedState.user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.FALLBACK_SUCCESS]);\n  }\n\n  if (isScreensharing) {\n    logger.log.DEBUG([updatedState.user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.START_SCREEN_SUCCESS]);\n  }\n\n  dispatchEvent(mediaAccessSuccess({\n    stream,\n    isScreensharing,\n    isAudioFallback,\n    streamId: stream.id,\n    isAudio: hasAudioTrack(stream),\n    isVideo: hasVideoTrack(stream),\n  }));\n};\n\nexport default processStreamInState;\n","import clone from 'clone';\nimport { VIDEO_RESOLUTION, TRACK_KIND } from '../../constants';\n\n/**\n * Parse the options provided to make sure they are compatible\n * @param {GetUserMediaOptions} options\n * @param {String|null} type - The type of stream i.e. audio or video\n * @memberOf MediaStreamHelpers\n * @private\n * @return {{settings: {audio: boolean, video: boolean}, mutedSettings: {shouldAudioMuted: boolean, shouldVideoMuted: boolean}, getUserMediaSettings: {audio: boolean, video: boolean}}}\n */\nconst parseStreamSettings = (options, type = null) => {\n  const { AdapterJS } = window;\n  const settings = {\n    settings: { audio: false, video: false },\n    mutedSettings: { shouldAudioMuted: false, shouldVideoMuted: false },\n    getUserMediaSettings: { audio: false, video: false },\n  };\n\n  if ((options.audio && !type) || (options.audio && type === TRACK_KIND.AUDIO)) {\n    // For Edge to work since they do not support the advanced constraints yet\n    settings.settings.audio = {\n      stereo: false,\n      exactConstraints: !!options.useExactConstraints,\n      echoCancellation: true,\n    };\n    settings.getUserMediaSettings.audio = {\n      echoCancellation: true,\n    };\n\n    if (typeof options.audio === 'object') {\n      if (typeof options.audio.stereo === 'boolean') {\n        settings.settings.audio.stereo = options.audio.stereo;\n      }\n\n      if (typeof options.audio.useinbandfec === 'boolean') {\n        settings.settings.audio.useinbandfec = options.audio.useinbandfec;\n      }\n\n      if (typeof options.audio.usedtx === 'boolean') {\n        settings.settings.audio.usedtx = options.audio.usedtx;\n      }\n\n      if (typeof options.audio.maxplaybackrate === 'number'\n        && options.audio.maxplaybackrate >= 8000 && options.audio.maxplaybackrate <= 48000) {\n        settings.settings.audio.maxplaybackrate = options.audio.maxplaybackrate;\n      }\n\n      if (typeof options.audio.mute === 'boolean') {\n        settings.mutedSettings.shouldAudioMuted = options.audio.mute;\n      }\n\n      // Not supported in Edge browser features\n      if (AdapterJS.webrtcDetectedBrowser !== 'edge') {\n        if (typeof options.audio.echoCancellation === 'boolean') {\n          settings.settings.audio.echoCancellation = options.audio.echoCancellation;\n          settings.getUserMediaSettings.audio.echoCancellation = options.audio.echoCancellation;\n        }\n\n        if (Array.isArray(options.audio.optional)) {\n          settings.settings.audio.optional = clone(options.audio.optional);\n          settings.getUserMediaSettings.audio.optional = clone(options.audio.optional);\n        }\n\n        if (options.audio.deviceId && typeof options.audio.deviceId === 'string'\n          && AdapterJS.webrtcDetectedBrowser !== 'firefox') {\n          settings.settings.audio.deviceId = options.audio.deviceId;\n          settings.getUserMediaSettings.audio.deviceId = options.useExactConstraints\n            ? { exact: options.audio.deviceId } : { ideal: options.audio.deviceId };\n        }\n      }\n    }\n\n    if (AdapterJS.webrtcDetectedBrowser === 'edge') {\n      settings.getUserMediaSettings.audio = true;\n    }\n  }\n\n  if ((options.video && !type) || (options.video && type === TRACK_KIND.VIDEO)) {\n    // For Edge to work since they do not support the advanced constraints yet\n    settings.settings.video = {\n      resolution: clone(VIDEO_RESOLUTION.VGA),\n      // screenshare: false,\n      exactConstraints: !!options.useExactConstraints,\n    };\n    settings.getUserMediaSettings.video = {};\n\n    if (typeof options.video === 'object') {\n      if (typeof options.video.mute === 'boolean') {\n        settings.mutedSettings.shouldVideoMuted = options.video.mute;\n      }\n\n      if (Array.isArray(options.video.optional)) {\n        settings.settings.video.optional = clone(options.video.optional);\n        settings.getUserMediaSettings.video.optional = clone(options.video.optional);\n      }\n\n      if (options.video.deviceId && typeof options.video.deviceId === 'string') {\n        settings.settings.video.deviceId = options.video.deviceId;\n        settings.getUserMediaSettings.video.deviceId = options.useExactConstraints\n          ? { exact: options.video.deviceId } : { ideal: options.video.deviceId };\n      }\n\n      if (options.video.resolution && typeof options.video.resolution === 'object') {\n        if ((options.video.resolution.width && typeof options.video.resolution.width === 'object')\n          || typeof options.video.resolution.width === 'number') {\n          settings.settings.video.resolution.width = options.video.resolution.width;\n        }\n        if ((options.video.resolution.height && typeof options.video.resolution.height === 'object')\n          || typeof options.video.resolution.height === 'number') {\n          settings.settings.video.resolution.height = options.video.resolution.height;\n        }\n      }\n\n      /* eslint-disable no-nested-ternary */\n      /* eslint-disable no-mixed-operators */\n      settings.getUserMediaSettings.video.width = typeof settings.settings.video.resolution.width === 'object'\n        ? settings.settings.video.resolution.width : (options.useExactConstraints\n          ? { exact: settings.settings.video.resolution.width } : { max: settings.settings.video.resolution.width });\n\n      settings.getUserMediaSettings.video.height = typeof settings.settings.video.resolution.height === 'object'\n        ? settings.settings.video.resolution.height : (options.useExactConstraints\n          ? { exact: settings.settings.video.resolution.height } : { max: settings.settings.video.resolution.height });\n\n      if ((options.video.frameRate && typeof options.video.frameRate === 'object')\n        || typeof options.video.frameRate === 'number' && AdapterJS.webrtcDetectedType !== 'plugin') {\n        settings.settings.video.frameRate = options.video.frameRate;\n        settings.getUserMediaSettings.video.frameRate = typeof settings.settings.video.frameRate === 'object'\n          ? settings.settings.video.frameRate : (options.useExactConstraints\n            ? { exact: settings.settings.video.frameRate } : { max: settings.settings.video.frameRate });\n      }\n\n      if (options.video.facingMode && ['string', 'object'].indexOf(typeof options.video.facingMode) > -1 && AdapterJS.webrtcDetectedType === 'plugin') {\n        settings.settings.video.facingMode = options.video.facingMode;\n        settings.getUserMediaSettings.video.facingMode = typeof settings.settings.video.facingMode === 'object'\n          ? settings.settings.video.facingMode : (options.useExactConstraints\n            ? { exact: settings.settings.video.facingMode } : { max: settings.settings.video.facingMode });\n      }\n    } else {\n      settings.getUserMediaSettings.video = {\n        width: options.useExactConstraints ? { exact: settings.settings.video.resolution.width }\n          : { max: settings.settings.video.resolution.width },\n        height: options.useExactConstraints ? { exact: settings.settings.video.resolution.height }\n          : { max: settings.settings.video.resolution.height },\n      };\n    }\n\n    if (AdapterJS.webrtcDetectedBrowser === 'edge') {\n      settings.settings.video = {\n        // screenshare: false,\n        exactConstraints: !!options.useExactConstraints,\n      };\n      settings.getUserMediaSettings.video = true;\n    }\n  }\n\n  return settings;\n};\n\nexport default parseStreamSettings;\n","/* eslint-disable no-nested-ternary */\nimport logger from '../../logger';\nimport MESSAGES from '../../messages';\nimport {\n  isABoolean, isANumber, isAObj, hasAudioTrack, hasVideoTrack, isEmptyArray,\n} from '../../utils/helpers';\nimport SkylinkSignalingServer from '../../server-communication/signaling-server/index';\nimport { localMediaMuted, peerUpdated, streamMuted } from '../../skylink-events';\nimport { dispatchEvent, addEventListener, removeEventListener } from '../../utils/skylinkEventManager';\nimport PeerData from '../../peer-data/index';\nimport Skylink from '../../index';\nimport {\n  MEDIA_STATUS, MEDIA_INFO, MEDIA_STATE, TRACK_KIND, EVENTS, HANDSHAKE_PROGRESS, PEER_TYPE,\n} from '../../constants';\nimport PeerMedia from '../../peer-media/index';\n\nconst dispatchStreamMutedEvent = (room, stream, isScreensharing) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  dispatchEvent(streamMuted({\n    isSelf: true,\n    peerId: roomState.user.sid,\n    peerInfo: PeerData.getUserInfo(room),\n    streamId: stream.id,\n    isScreensharing,\n    isAudio: hasAudioTrack(stream),\n    isVideo: hasVideoTrack(stream),\n  }));\n};\n\nconst dispatchPeerUpdatedEvent = (room) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  const isSelf = true;\n  const peerId = roomState.user.sid;\n  const peerInfo = PeerData.getCurrentSessionInfo(room);\n\n  dispatchEvent(peerUpdated({\n    isSelf,\n    peerId,\n    peerInfo,\n  }));\n};\n\nconst getAudioTracks = stream => stream.getAudioTracks();\n\nconst getVideoTracks = stream => stream.getVideoTracks();\n\nconst dispatchLocalMediaMutedEvent = (hasToggledVideo, hasToggledAudio, stream, roomKey, isScreensharing = false) => {\n  const state = Skylink.getSkylinkState(roomKey);\n\n  if ((hasVideoTrack(stream) && hasToggledVideo) || (hasAudioTrack(stream) && hasToggledAudio)) {\n    dispatchEvent(localMediaMuted({\n      streamId: stream.id,\n      isScreensharing,\n      mediaStatus: state.streamsMediaStatus[stream.id],\n    }));\n  }\n\n  return true;\n};\n\nconst retrieveOriginalActiveStreamId = (roomState, currentActiveStreamId, replacedStreamIds) => {\n  let originalActiveStreamId = currentActiveStreamId;\n  const { streams: { userMedia } } = roomState;\n  const pReplacedStreamIds = replacedStreamIds || Object.keys(userMedia).filter(streamId => userMedia[streamId].isReplaced);\n\n  if (pReplacedStreamIds.length === 0) {\n    return originalActiveStreamId;\n  }\n\n  if (pReplacedStreamIds.indexOf(originalActiveStreamId) > -1) {\n    pReplacedStreamIds.splice(pReplacedStreamIds.indexOf(originalActiveStreamId), 1);\n  }\n\n  if (pReplacedStreamIds.length > 1) {\n    for (let i = 0; i < pReplacedStreamIds.length; i += 1) {\n      if (userMedia[pReplacedStreamIds[i]].newStream && userMedia[pReplacedStreamIds[i]].newStream.id === originalActiveStreamId) {\n        originalActiveStreamId = pReplacedStreamIds[i];\n        retrieveOriginalActiveStreamId(roomState, originalActiveStreamId, pReplacedStreamIds);\n        break;\n      }\n    }\n  }\n\n  return pReplacedStreamIds[0];\n};\n\nconst updateMediaInfo = (hasToggledVideo, hasToggledAudio, room, streamId) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  const originalStreamId = retrieveOriginalActiveStreamId(roomState, streamId);\n  const { streamsMutedSettings } = roomState;\n\n  if (hasToggledVideo) {\n    const mediaId = PeerMedia.retrieveMediaId(TRACK_KIND.VIDEO, originalStreamId);\n    PeerMedia.updatePeerMediaInfo(room, roomState.user.sid, mediaId, MEDIA_INFO.MEDIA_STATE, streamsMutedSettings[originalStreamId].videoMuted ? MEDIA_STATE.MUTED : MEDIA_STATE.ACTIVE);\n  }\n\n  if (hasToggledAudio) {\n    const mediaId = PeerMedia.retrieveMediaId(TRACK_KIND.AUDIO, originalStreamId);\n    setTimeout(() => PeerMedia.updatePeerMediaInfo(room, roomState.user.sid, mediaId, MEDIA_INFO.MEDIA_STATE, streamsMutedSettings[originalStreamId].audioMuted ? MEDIA_STATE.MUTED : MEDIA_STATE.ACTIVE), hasToggledVideo ? 1050 : 0);\n  }\n};\n\n// eslint-disable-next-line no-unused-vars\nconst sendSigMsgs = (hasToggledVideo, hasToggledAudio, room, streamId) => {\n  const roomState = Skylink.getSkylinkState(room.id);\n  const signaling = new SkylinkSignalingServer();\n  const originalStreamId = retrieveOriginalActiveStreamId(roomState, streamId);\n\n  if (hasToggledVideo) {\n    signaling.muteVideoEvent(room, originalStreamId);\n  }\n\n  if (hasToggledAudio) {\n    setTimeout(() => signaling.muteAudioEvent(room, originalStreamId), hasToggledVideo ? 1050 : 0);\n  }\n};\n\nconst muteFn = (stream, state) => {\n  const updatedState = state;\n  const { room } = updatedState;\n  const audioTracks = getAudioTracks(stream);\n  const videoTracks = getVideoTracks(stream);\n  updatedState.streamsMediaStatus[stream.id].audioMuted = MEDIA_STATUS.UNAVAILABLE;\n  updatedState.streamsMediaStatus[stream.id].videoMuted = MEDIA_STATUS.UNAVAILABLE;\n\n  audioTracks.forEach((audioTrack) => {\n    // eslint-disable-next-line no-param-reassign\n    audioTrack.enabled = !updatedState.streamsMutedSettings[stream.id].audioMuted;\n    updatedState.streamsMediaStatus[stream.id].audioMuted = updatedState.streamsMutedSettings[stream.id].audioMuted ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE;\n  });\n\n  videoTracks.forEach((videoTrack) => {\n    // eslint-disable-next-line no-param-reassign\n    videoTrack.enabled = !updatedState.streamsMutedSettings[stream.id].videoMuted;\n    updatedState.streamsMediaStatus[stream.id].videoMuted = updatedState.streamsMutedSettings[stream.id].videoMuted ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE;\n  });\n\n  Skylink.setSkylinkState(updatedState, room.id);\n\n  logger.log.DEBUG(MESSAGES.MEDIA_STREAM.UPDATE_MEDIA_STATUS, updatedState.streamsMediaStatus, stream.id);\n};\n\nconst retrieveToggleState = (state, options, streamId) => {\n  const { streams, streamsMutedSettings } = state;\n  let hasToggledAudio = false;\n  let hasToggledVideo = false;\n\n  if (streams.screenshare && streams.screenshare.id === streamId && streamsMutedSettings[streamId].videoMuted !== options.videoMuted) {\n    hasToggledVideo = true;\n  } else if (streams.userMedia && streams.userMedia[streamId]) {\n    if (hasAudioTrack(streams.userMedia[streamId].stream) && streamsMutedSettings[streamId].audioMuted !== options.audioMuted) {\n      hasToggledAudio = true;\n    }\n\n    if (hasVideoTrack(streams.userMedia[streamId].stream) && streamsMutedSettings[streamId].videoMuted !== options.videoMuted) {\n      hasToggledVideo = true;\n    }\n  }\n\n  return {\n    hasToggledAudio,\n    hasToggledVideo,\n  };\n};\n\nconst updateStreamsMutedSettings = (state, toggleState, streamId) => {\n  const updatedState = state;\n  const { room } = updatedState;\n\n  if (toggleState.hasToggledAudio) {\n    updatedState.streamsMutedSettings[streamId].audioMuted = !updatedState.streamsMutedSettings[streamId].audioMuted;\n  }\n\n  if (toggleState.hasToggledVideo) {\n    updatedState.streamsMutedSettings[streamId].videoMuted = !updatedState.streamsMutedSettings[streamId].videoMuted;\n  }\n\n  logger.log.DEBUG(MESSAGES.MEDIA_STREAM.UPDATE_MUTED_SETTINGS, updatedState.streamsMutedSettings, streamId);\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nconst startMuteEvents = (roomKey, streamId, options) => {\n  const roomState = Skylink.getSkylinkState(roomKey);\n  const {\n    streams, room, peerConnections, peerInformations,\n  } = roomState;\n  const toggleState = retrieveToggleState(roomState, options, streamId);\n  const { hasToggledAudio, hasToggledVideo } = toggleState;\n  let mutedStream = null;\n  let isScreensharing = false;\n\n  if (streams.userMedia && streams.userMedia[streamId]) {\n    mutedStream = streams.userMedia[streamId].stream;\n  } else if (streams.screenshare && streams.screenshare.id === streamId) {\n    mutedStream = streams.screenshare.stream;\n    isScreensharing = true;\n  }\n\n  if (!mutedStream) {\n    return;\n  }\n\n  updateStreamsMutedSettings(roomState, toggleState, streamId);\n  muteFn(mutedStream, roomState);\n  dispatchLocalMediaMutedEvent(hasToggledVideo, hasToggledAudio, mutedStream, room.id, isScreensharing);\n  dispatchPeerUpdatedEvent(room);\n  dispatchStreamMutedEvent(room, mutedStream, isScreensharing);\n  // TODO: remove audioMuteEvent and videoMuteEvent\n  // sendSigMsgs(hasToggledVideo, hasToggledAudio, room, streamId);\n\n  // wait for at least 1 connection before sending mediaInfoEvent otherwise sig message will be dropped at sendMediaInfoMsg if there are no\n  // connections\n  if ((!peerConnections[PEER_TYPE.MCU] && isEmptyArray(Object.keys(peerConnections))) || (peerConnections[PEER_TYPE.MCU] && isEmptyArray(Object.keys(peerInformations)))) { // no P2P peers || no MCU peers\n    const updateMediaInfoAndRemoveListener = (evt) => {\n      const { state } = evt.detail;\n      if (state === HANDSHAKE_PROGRESS.ANSWER_ACK) {\n        updateMediaInfo(hasToggledVideo, hasToggledAudio, room, streamId);\n        removeEventListener(EVENTS.HANDSHAKE_PROGRESS, updateMediaInfoAndRemoveListener);\n      }\n    };\n\n    addEventListener(EVENTS.HANDSHAKE_PROGRESS, updateMediaInfoAndRemoveListener);\n  } else {\n    // Workaround for sendStream with mute option and existing peerConnections throwing \"no streamId\" error message:\n    // delay sending the mediaInfoEvent sig message to ensure that ontrack on the remote is fired and the streamId is populated in mediaInfo\n    // before mediaInfoEvent is received\n    setTimeout(() => {\n      updateMediaInfo(hasToggledVideo, hasToggledAudio, room, streamId);\n    }, 500);\n  }\n};\n\nconst retrieveMutedSetting = (mediaMutedOption) => {\n  switch (mediaMutedOption) {\n    case 1:\n      return false;\n    case 0:\n      return true;\n    default:\n      return true;\n  }\n};\n\nconst isValidStreamId = (streamId, state) => {\n  const { streams } = state;\n  let isValid = false;\n\n  Object.keys(streams.userMedia).forEach((gumStreamId) => {\n    if (gumStreamId === streamId) {\n      isValid = true;\n    }\n  });\n\n  if (streams.screenshare && streams.screenshare.id === streamId) {\n    isValid = true;\n  }\n\n  return isValid;\n};\n\n/**\n * @param {SkylinkState} roomState\n * @param {boolean} options\n * @param {boolean} options.audioMuted\n * @param {boolean} options.videoMuted\n * @param {String} streamId\n * @memberOf MediaStreamHelpers\n * @fires streamMuted, peerUpdated, localMediaMuted\n */\nconst muteStreams = (roomState, options, streamId = null) => {\n  const {\n    streams, room,\n  } = roomState;\n\n  if (!isAObj(options)) {\n    logger.log.ERROR(MESSAGES.MEDIA_STREAM.ERRORS.INVALID_MUTE_OPTIONS, options);\n    return;\n  }\n\n  if (!streams.userMedia && !streams.screenshare) {\n    logger.log.WARN(MESSAGES.MEDIA_STREAM.ERRORS.NO_STREAM);\n    return;\n  }\n\n  if (streamId && !isValidStreamId(streamId, roomState)) {\n    logger.log.ERROR(MESSAGES.MEDIA_STREAM.ERRORS.INVALID_MUTE_OPTIONS, options);\n    return;\n  }\n\n  const fOptions = {\n    audioMuted: isABoolean(options.audioMuted) ? options.audioMuted : (isANumber(options.audioMuted) ? retrieveMutedSetting(options.audioMuted) : true),\n    videoMuted: isABoolean(options.videoMuted) ? options.videoMuted : (isANumber(options.videoMuted) ? retrieveMutedSetting(options.videoMuted) : true),\n  };\n\n  let streamIdsThatCanBeMuted = [];\n  if (streamId && ((streams.userMedia[streamId] && !streams.userMedia[streamId].isReplaced) || (streams.screenshare.id === streamId && !streams.screenshare.isReplaced))) {\n    streamIdsThatCanBeMuted.push(streamId);\n  } else {\n    streamIdsThatCanBeMuted = Object.keys(streams.userMedia).filter(id => !streams.userMedia[id].isReplaced);\n    if (streams.screenshare && !streams.screenshare.isReplaced) {\n      streamIdsThatCanBeMuted.push(streams.screenshare.id);\n    }\n  }\n\n  if (isEmptyArray(streamIdsThatCanBeMuted)) {\n    logger.log.ERROR(MESSAGES.MEDIA_STREAM.ERRORS.NO_STREAMS_MUTED, options);\n    return;\n  }\n\n  const streamIdsToMute = Object.values(streamIdsThatCanBeMuted).filter(sId => (retrieveToggleState(roomState, fOptions, sId).hasToggledAudio || retrieveToggleState(roomState, fOptions, sId).hasToggledVideo));\n\n  streamIdsToMute.forEach((streamIdToMute, i) => {\n    setTimeout(() => startMuteEvents(room.id, streamIdToMute, fOptions), i === 0 ? 0 : 1050);\n    // TODO: Implement peerUpdatedEvent timeout here?\n  });\n};\n\nexport default muteStreams;\n","import Skylink from '../../index';\nimport { isEmptyArray } from '../../utils/helpers';\nimport helpers from '../../peer-connection/helpers/index';\n\nconst isSenderTrackAndTrackMatched = (senderTrack, tracks) => {\n  for (let x = 0; x < tracks.length; x += 1) {\n    if (senderTrack.id === tracks[x].id) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst isStreamOnPC = (peerConnection, stream) => {\n  const transceivers = peerConnection.getTransceivers ? peerConnection.getTransceivers() : [];\n  const tracks = stream.getTracks();\n\n  if (isEmptyArray(transceivers)) {\n    return false;\n  }\n\n  for (let i = 0; i < transceivers.length; i += 1) {\n    if (transceivers[i].sender.track && isSenderTrackAndTrackMatched(transceivers[i].sender.track, tracks)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst addTracksToPC = (state, peerId, stream, peerConnection) => {\n  const updatedState = state;\n  const tracks = stream.getTracks();\n  for (let track = 0; track < tracks.length; track += 1) {\n    const sender = peerConnection.addTrack(tracks[track], stream);\n    if (sender) {\n      helpers.processNewSender(updatedState, peerId, sender);\n    }\n  }\n\n  Skylink.setSkylinkState(updatedState, updatedState.room.id);\n};\n\nconst addUserMediaStreams = (state, peerId, userMediaStreams, peerConnection) => {\n  const streamIds = Object.keys(userMediaStreams);\n  for (let x = 0; x < streamIds.length; x += 1) {\n    const { stream } = userMediaStreams[streamIds[x]];\n    if (!isStreamOnPC(peerConnection, stream)) {\n      addTracksToPC(state, peerId, stream, peerConnection);\n    }\n  }\n};\n\nconst addScreenshareStream = (state, peerId, screenshareStream, peerConnection) => {\n  const { stream } = screenshareStream;\n  if (!isStreamOnPC(peerConnection, stream)) {\n    addTracksToPC(state, peerId, stream, peerConnection);\n  }\n};\n\n/**\n * Function that sets User's Stream to send to Peer connection.\n * Priority for <code>shareScreen()</code> Stream over <code>{@link MediaStream.getUserMedia}</code> Stream.\n * @param {String} targetMid - The mid of the target peer\n * @param {SkylinkState} roomState - Skylink State of current room\n * @memberOf MediaStreamHelpers\n * @private\n */\nconst addLocalMediaStreams = (targetMid, roomState) => {\n  // TODO: Full implementation (cross-browser) not done. Refer to stream-media.js for checks on AJS\n  const state = Skylink.getSkylinkState(roomState.room.id);\n  const { peerConnections, streams } = state;\n  const peerConnection = peerConnections[targetMid];\n\n  if (streams.userMedia) {\n    addUserMediaStreams(state, targetMid, streams.userMedia, peerConnection);\n  }\n\n  if (streams.screenshare) {\n    addScreenshareStream(state, targetMid, streams.screenshare, peerConnection);\n  }\n};\n\nexport default addLocalMediaStreams;\n","import logger from '../../logger';\nimport MESSAGES from '../../messages';\nimport { TAGS } from '../../constants';\n\nconst getTrackSender = (state, peerId, trackId, mediaType) => {\n  const { peerConnections } = state;\n  const senders = peerConnections[peerId].getSenders();\n  let trackSender = null;\n\n  if (!trackId) {\n    return trackSender;\n  }\n  senders.forEach((sender) => {\n    if (sender.track && (sender.track.id === trackId) && (sender.track.kind === mediaType)) {\n      trackSender = sender;\n    }\n  });\n\n  return trackSender;\n};\n\n/**\n * Function that replaces a track screensharing track.\n * @param {MediaStream} oldStream - The stream to be replaced with newStream\n * @param {MediaStream} newStream - The new stream\n * @param {String} peerId - The PeerId\n * @param {SkylinkState} state\n * @private\n */\nconst replaceTrack = (oldStream, newStream, peerId, state) => {\n  const oldVideoTrack = oldStream.getVideoTracks()[0];\n  const oldAudioTrack = oldStream.getAudioTracks()[0];\n  const videoSender = getTrackSender(state, peerId, oldVideoTrack ? oldVideoTrack.id : null, 'video');\n  const audioSender = getTrackSender(state, peerId, oldAudioTrack ? oldAudioTrack.id : null, 'audio');\n  const newVideoTrack = newStream.getVideoTracks()[0];\n  const newAudioTrack = newStream.getAudioTracks()[0];\n\n  try {\n    if (oldVideoTrack && newVideoTrack && videoSender) {\n      videoSender.replaceTrack(newVideoTrack);\n    }\n\n    if (oldAudioTrack && newAudioTrack && audioSender) {\n      audioSender.replaceTrack(newAudioTrack);\n    }\n  } catch (error) {\n    logger.log.ERROR([peerId, TAGS.PEER_CONNECTION, null, MESSAGES.PEER_CONNECTION.ERRORS.REPLACE_TRACK], error);\n  }\n};\n\nexport default replaceTrack;\n","import {\n  isAObj, isAFunction, hasVideoTrack, hasAudioTrack,\n} from '../../utils/helpers';\nimport logger from '../../logger';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport PeerData from '../../peer-data';\nimport { peerUpdated, onIncomingStream } from '../../skylink-events';\nimport PeerConnection from '../../peer-connection/index';\nimport MediaStream from '../index';\nimport MESSAGES from '../../messages';\n\nconst dispatchEvents = (roomState, stream) => {\n  const { user, room } = roomState;\n  const isSelf = true;\n  const peerId = user.sid;\n  const peerInfo = PeerData.getCurrentSessionInfo(room);\n\n  dispatchEvent(onIncomingStream({\n    room,\n    stream,\n    streamId: stream.id,\n    isSelf,\n    peerId,\n    peerInfo,\n    isScreensharing: false,\n    isVideo: hasVideoTrack(stream),\n    isAudio: hasAudioTrack(stream),\n  }));\n\n  dispatchEvent(peerUpdated({\n    isSelf,\n    peerId,\n    peerInfo,\n  }));\n};\n\nconst dispatchEventsToLocalEnd = (roomState, streams) => {\n  for (let i = 0; i < streams.length; i += 1) {\n    if (streams[i]) {\n      if (Array.isArray(streams[i])) {\n        for (let x = 0; x < streams[i].length; x += 1) {\n          if (streams[i][x]) {\n            dispatchEvents(roomState, streams[i][x]);\n          }\n        }\n      } else {\n        dispatchEvents(roomState, streams[i]);\n      }\n    }\n  }\n};\n\nconst restartFn = (roomState, streams, resolve, reject) => {\n  const { AdapterJS } = window;\n  const { peerConnections, hasMCU } = roomState;\n\n  if (AdapterJS.webrtcDetectedBrowser === 'edge') {\n    reject(new Error(MESSAGES.PEER_CONNECTION.refresh_no_edge_support));\n  }\n\n  try {\n    dispatchEventsToLocalEnd(roomState, streams);\n\n    if (Object.keys(peerConnections).length > 0 || hasMCU) {\n      const refreshPeerConnectionPromise = PeerConnection.refreshPeerConnection(Object.keys(peerConnections), roomState, false, {});\n\n      refreshPeerConnectionPromise.then(() => {\n        resolve(streams);\n      }).catch((error) => {\n        logger.log.ERROR(MESSAGES.PEER_CONNECTION.ERRORS.REFRESH);\n        reject(error);\n      });\n    } else {\n      logger.log.WARN(MESSAGES.ROOM.ERRORS.NO_PEERS);\n      resolve(streams);\n    }\n  } catch (error) {\n    logger.log.ERROR(error);\n  }\n};\n\nconst processMediaOptions = (roomState, stream, resolve, reject) => {\n  const getUserMediaPromise = MediaStream.getUserMedia(roomState, stream);\n\n  return getUserMediaPromise.then((userMediaStreams) => {\n    restartFn(roomState, userMediaStreams, resolve, reject);\n  }).catch((error) => {\n    reject(error);\n  });\n};\n\nconst processMediaStream = (roomState, stream, resolve, reject) => {\n  const usePrefetchedStreamPromise = MediaStream.usePrefetchedStream(roomState.room.id, stream);\n\n  return usePrefetchedStreamPromise.then((prefetchedStreams) => {\n    restartFn(roomState, prefetchedStreams, resolve, reject);\n  }).catch((error) => {\n    reject(error);\n  });\n};\n\nconst processMediaStreamArray = (roomState, streams, resolve, reject) => {\n  const usePrefetchedStreamsPromises = [];\n\n  streams.forEach((stream) => {\n    usePrefetchedStreamsPromises.push(MediaStream.usePrefetchedStream(roomState.room.id, stream));\n  });\n\n  return Promise.all(usePrefetchedStreamsPromises)\n    .then((results) => {\n      restartFn(roomState, results, resolve, reject);\n    })\n    .catch((error) => {\n      reject(error);\n    });\n};\n\n/**\n * Function that sends a MediaStream if provided or gets and sends an new getUserMedia stream.\n * @param {SkylinkState} roomState\n * @param {MediaStream|Object} options\n * @memberOf MediaStreamHelpers\n * @fires onIncomingStream, peerUpdated\n */\n// eslint-disable-next-line consistent-return\nconst sendStream = (roomState, options = null) => new Promise((resolve, reject) => {\n  if (!roomState) {\n    return reject(new Error(MESSAGES.ROOM_STATE.NO_ROOM_NAME));\n  }\n\n  const { inRoom } = roomState;\n  const { AdapterJS } = window;\n  const isNotObjOrNullOrPlugin = (!isAObj(options) || options === null) && !(AdapterJS && AdapterJS.WebRTCPlugin && AdapterJS.WebRTCPlugin.plugin);\n\n  if (!inRoom) {\n    logger.log.WARN(MESSAGES.ROOM.ERRORS.NOT_IN_ROOM);\n    return reject(new Error(`${MESSAGES.ROOM.ERRORS.NOT_IN_ROOM}`));\n  }\n\n  if (isNotObjOrNullOrPlugin) {\n    return reject(new Error(`${MESSAGES.MEDIA_STREAM.ERRORS.INVALID_GUM_OPTIONS} ${options}`));\n  }\n\n  let isTypeStream = false;\n\n  try {\n    if (Array.isArray(options)) {\n      let isArrayOfTypeStream = true;\n      options.forEach((item) => {\n        if (!isAFunction(item.getAudioTracks) || !isAFunction(item.getVideoTracks)) {\n          isArrayOfTypeStream = false;\n        }\n      });\n\n      if (!isArrayOfTypeStream) {\n        return reject(new Error(MESSAGES.MEDIA_STREAM.ERRORS.INVALID_MEDIA_STREAM_ARRAY));\n      }\n\n      return processMediaStreamArray(roomState, options, resolve, reject);\n    }\n\n    isTypeStream = options ? (isAFunction(options.getAudioTracks) || isAFunction(options.getVideoTracks)) : false;\n    if (isTypeStream) {\n      return processMediaStream(roomState, options, resolve, reject);\n    }\n\n    return processMediaOptions(roomState, options, resolve, reject);\n  } catch (error) {\n    logger.log.ERROR(MESSAGES.MEDIA_STREAM.ERRORS.SEND_STREAM, error);\n  }\n});\n\nexport default sendStream;\n","import { isAFunction } from '../../utils/helpers';\n\nconst getOutputSources = (sources) => {\n  const outputSources = {\n    audio: {\n      input: [],\n      output: [],\n    },\n    video: {\n      input: [],\n    },\n  };\n\n  sources.forEach((sourceItem) => {\n    const item = {\n      deviceId: sourceItem.deviceId || sourceItem.sourceId || 'default',\n      label: sourceItem.label,\n      groupId: sourceItem.groupId || null,\n    };\n\n    item.label = item.label || `Source for ${item.deviceId}`;\n\n    if (['audio', 'audioinput'].indexOf(sourceItem.kind) > -1) {\n      outputSources.audio.input.push(item);\n    } else if (['video', 'videoinput'].indexOf(sourceItem.kind) > -1) {\n      outputSources.video.input.push(item);\n    } else if (sourceItem.kind === 'audiooutput') {\n      outputSources.audio.output.push(item);\n    }\n  });\n\n  return outputSources;\n};\n\n/**\n * Function that returns the camera and microphone sources.\n * @return {Promise}\n * @return {Object} outputSources\n * @return {Object} outputSources.audio The list of audio input (microphone) and output (speakers) sources.\n * @return {Array} outputSources.audio.input The list of audio input (microphone) sources.\n * @return {Object} outputSources.audio.input.#index The audio input source item.\n * @return {String} outputSources.audio.input.#index.deviceId The audio input source item device ID.\n * @return {String} outputSources.audio.input.#index.label The audio input source item device label name.\n * @return {String} [outputSources.audio.input.#index.groupId] The audio input source item device physical device ID.\n * <small>Note that there can be different <code>deviceId</code> due to differing sources but can share a\n * <code>groupId</code> because it's the same device.</small>\n * @return {Array} outputSources.audio.output The list of audio output (speakers) sources.\n * @return {Object} outputSources.audio.output.#index The audio output source item.\n * <small>Object signature matches <code>outputSources.audio.input.#index</code> format.</small>\n * @return {Object} outputSources.video The list of video input (camera) sources.\n * @return {Array} outputSources.video.input The list of video input (camera) sources.\n * @return {Object} outputSources.video.input.#index The video input source item.\n * <small>Object signature matches <code>callback.success.audio.input.#index</code> format.</small>\n * @memberOf MediaStreamHelpers\n */\nconst getStreamSources = () => {\n  const { navigator } = window;\n\n  return new Promise((resolve, reject) => {\n    if (navigator.mediaDevices && isAFunction(navigator.mediaDevices.enumerateDevices)) {\n      navigator.mediaDevices.enumerateDevices()\n        .then((devices) => {\n          resolve(getOutputSources(devices));\n        });\n    } else {\n      reject(getOutputSources([]));\n    }\n  });\n};\n\nexport default getStreamSources;\n","import Skylink from '../../index';\nimport helpers from './index';\n\nconst buildStreamObject = (room, user, stream, settings) => ({\n  id: stream.id,\n  stream,\n  isReplaced: false,\n  settings: settings.settings,\n  constraints: settings.getUserMediaSettings,\n});\n\nconst addStreamToState = (room, stream, settings, isScreensharing) => {\n  const updatedState = Skylink.getSkylinkState(room.id);\n  const streamKey = isScreensharing ? 'screenshare' : 'userMedia';\n\n  if (isScreensharing) {\n    updatedState.streams[streamKey] = buildStreamObject(updatedState.room, updatedState.user, stream, settings);\n  } else {\n    updatedState.streams[streamKey] = updatedState.streams[streamKey] ? updatedState.streams[streamKey] : {};\n    updatedState.streams[streamKey][stream.id] = buildStreamObject(updatedState.room, updatedState.user, stream, settings);\n  }\n\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nconst processNewStream = (room, stream, settings, isScreensharing) => {\n  addStreamToState(room, stream, settings, isScreensharing);\n  helpers.updateStreamsMutedSettings(room.id, settings, stream);\n  helpers.updateStreamsMediaStatus(room.id, settings, stream);\n};\n\nexport default processNewStream;\n","import parseMediaOptions from './parseMediaOptions';\nimport processStreamInState from './processStreamInState';\nimport parseStreamSettings from './parseStreamSettings';\nimport prepMediaAccessRequest from './prepMediaAccessRequest';\nimport addLocalMediaStreams from './addLocalMediaStreams';\nimport onRemoteTrackAdded from './onRemoteTrackAdded';\nimport onStreamAccessError from './onStreamAccessError';\nimport replaceTrack from './replaceTrack';\nimport muteStreams from './muteStreams';\nimport sendStream from './sendStream';\nimport getStreamSources from './getStreamSources';\nimport getStreams from './getStreams';\nimport getScreenSources from './getScreenSources';\nimport updateStreamsMediaStatus from './updateStreamsMediaStatus';\nimport updateRemoteStreams from './updateRemoteStreams';\nimport retrieveVideoStreams from './retrieveVideoStreams';\nimport splitAudioAndVideoStream from './splitAudioAndVideoStream';\nimport processNewStream from './processNewStream';\nimport updateStreamsMutedSettings from './updateStreamsMutedSettings';\nimport onStreamAccessSuccess from './onStreamAccessSuccess';\n\n/**\n * @namespace MediaStreamHelpers\n * @description All helper and utility functions for <code>{@link MediaStream}</code> class are listed here.\n * @private\n * @type {{parseMediaOptions, processStreamInState, parseStreamSettings, prepMediaAccessRequest, addLocalMediaStreams, onRemoteTrackAdded, onStreamAccessError, buildPeerStreamsInfo, replaceTrack, muteStreams, getStreamSources, sendStream, getStreams, getScreenSources, updateStreamsMediaStatus, updateRemoteStreams, retrieveVideoStreams, splitAudioAndVideoStream, processNewStream, updateStreamsMutedSettings, onStreamAccessSuccess}}\n */\nconst helpers = {\n  parseMediaOptions,\n  processStreamInState,\n  parseStreamSettings,\n  prepMediaAccessRequest,\n  addLocalMediaStreams,\n  onRemoteTrackAdded,\n  onStreamAccessError,\n  replaceTrack,\n  muteStreams,\n  sendStream,\n  getStreamSources,\n  getStreams,\n  getScreenSources,\n  updateStreamsMediaStatus,\n  updateRemoteStreams,\n  retrieveVideoStreams,\n  splitAudioAndVideoStream,\n  processNewStream,\n  updateStreamsMutedSettings,\n  onStreamAccessSuccess,\n};\n\nexport default helpers;\n","import helpers from './index';\nimport messages from '../../messages';\nimport { TRACK_KIND } from '../../constants';\nimport muteStreams from './muteStreams';\nimport Skylink from '../../index';\n\n/**\n * @description Helper function for {@link MediaStream.getUserMedia}\n * @param {GetUserMediaOptions} params - The camera Stream configuration options.\n * @memberOf MediaStreamHelpers\n * @return {Promise}\n */\nconst prepMediaAccessRequest = params => new Promise((resolve, reject) => {\n  const { roomKey, ...rest } = params;\n  const audioSettings = helpers.parseStreamSettings(rest, TRACK_KIND.AUDIO);\n  const videoSettings = helpers.parseStreamSettings(rest, TRACK_KIND.VIDEO);\n  const { AdapterJS } = window;\n\n  if (!audioSettings.getUserMediaSettings.audio && !videoSettings.getUserMediaSettings.video) {\n    reject(messages.MEDIA_STREAM.ERRORS.INVALID_GUM_OPTIONS);\n  }\n\n  AdapterJS.webRTCReady(() => {\n    window.navigator.mediaDevices.getUserMedia({ audio: audioSettings.getUserMediaSettings.audio, video: videoSettings.getUserMediaSettings.video }).then((stream) => {\n      const isAudioFallback = false;\n\n      const streams = helpers.onStreamAccessSuccess(roomKey, stream, audioSettings, videoSettings, isAudioFallback);\n      const state = Skylink.getSkylinkState(roomKey);\n      if (streams[0] && audioSettings.mutedSettings.shouldAudioMuted) {\n        muteStreams(state, { audioMuted: audioSettings.mutedSettings.shouldAudioMuted, videoMuted: videoSettings.mutedSettings.shouldVideoMuted }, streams[0].id);\n      }\n\n      if (streams[1] && videoSettings.mutedSettings.shouldVideoMuted) {\n        muteStreams(state, { audioMuted: audioSettings.mutedSettings.shouldAudioMuted, videoMuted: videoSettings.mutedSettings.shouldVideoMuted }, streams[1].id);\n      }\n\n      resolve(streams);\n    }).catch(error => helpers.onStreamAccessError(error, reject, resolve, roomKey, audioSettings, videoSettings));\n  });\n});\n\nexport default prepMediaAccessRequest;\n","import { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { onIncomingStream, peerUpdated, onIncomingScreenStream } from '../../skylink-events/index';\nimport PeerData from '../../peer-data/index';\n\n/**\n * Function that handles the <code>RTCPeerConnection.ontrack</code> event on remote stream added.\n * @param {MediaStream} stream - {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaStream}\n * @param {SkylinkState} currentRoomState - Current room state\n * @param {String} targetMid - The mid of the target peer\n * @param {boolean} isScreensharing - The flag if incoming stream is a screenshare stream.\n * @param {boolean} isVideo - The flag if incoming stream has a video track.\n * @param {boolean} isAudio- The flag if incoming stream has an audio track.\n * @memberOf MediaStreamHelpers\n * @fires onIncomingStream\n * @fires peerUpdated\n * @private\n */\nconst onRemoteTrackAdded = (stream, currentRoomState, targetMid, isScreensharing, isVideo, isAudio) => {\n  const { user, hasMCU, room } = currentRoomState;\n  const dispatchOnIncomingStream = (detail) => { dispatchEvent(onIncomingStream(detail)); };\n  const dispatchOnIncomingScreenStream = (detail) => {\n    // eslint-disable-next-line no-param-reassign\n    detail.isReplace = false;\n    dispatchEvent(onIncomingScreenStream(detail));\n  };\n  const methods = { dispatchOnIncomingStream, dispatchOnIncomingScreenStream };\n  const dispatch = { methodName: isScreensharing ? 'dispatchOnIncomingScreenStream' : 'dispatchOnIncomingStream' };\n  const detail = {\n    stream,\n    peerId: targetMid,\n    room,\n    isSelf: hasMCU ? (targetMid === user.sid || false) : false,\n    peerInfo: PeerData.getPeerInfo(targetMid, room),\n    streamId: stream.id,\n    isVideo,\n    isAudio,\n  };\n\n  methods[dispatch.methodName](detail);\n\n  dispatchEvent(peerUpdated({\n    peerId: targetMid,\n    peerInfo: PeerData.getPeerInfo(targetMid, room),\n    isSelf: hasMCU ? (targetMid === user.sid || false) : false,\n    room,\n  }));\n};\n\nexport default onRemoteTrackAdded;\n","/* eslint-disable consistent-return */\nimport Skylink from '../../index';\nimport logger from '../../logger';\nimport messages from '../../messages';\nimport { MEDIA_ACCESS_FALLBACK_STATE, TAGS } from '../../constants';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { mediaAccessError, mediaAccessFallback } from '../../skylink-events';\nimport helpers from './index';\n\n/**\n *\n * @param {Error} error - The error object.\n * @param {Function} reject - Reject function from promise.\n * @param {String} roomKey - The room rid.\n * @param {JSON} audioSettings - The audio media options.\n * @param {JSON} videoSettings - The video media options.\n * @param {object} resolve - The resolved promise.\n * @return {Promise<MediaStream | never>}\n * @memberOf MediaStreamHelpers\n * @fires mediaAccessError\n * @fires mediaAccessFallback\n */\nconst onStreamAccessError = (error, reject, resolve, roomKey, audioSettings, videoSettings) => {\n  const initOptions = Skylink.getInitOptions();\n  const state = Skylink.getSkylinkState(roomKey);\n  const { audioFallback } = initOptions;\n\n  if (audioSettings.settings.audio && videoSettings.settings.video && audioFallback) {\n    const isAudioFallback = true;\n    logger.log.DEBUG([state.user.sid, TAGS.MEDIA_STREAM, null, messages.MEDIA_STREAM.START_FALLBACK]);\n    dispatchEvent(mediaAccessFallback({\n      error,\n      state: MEDIA_ACCESS_FALLBACK_STATE.FALLBACKING,\n      isAudioFallback,\n    }));\n\n    return window.navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => helpers.onStreamAccessSuccess(roomKey, stream, audioSettings, videoSettings, isAudioFallback, resolve)).catch((fallbackError) => {\n      logger.log.ERROR([state.user.sid, TAGS.MEDIA_STREAM, null, messages.MEDIA_STREAM.ERRORS.FALLBACK, fallbackError]);\n      dispatchEvent(mediaAccessError({\n        error: fallbackError,\n        isAudioFallbackError: true,\n      }));\n      dispatchEvent(mediaAccessFallback({\n        error,\n        state: MEDIA_ACCESS_FALLBACK_STATE.ERROR,\n        isAudioFallback,\n      }));\n\n      reject(fallbackError);\n    });\n  }\n\n  logger.log.ERROR([state.user.sid, TAGS.MEDIA_STREAM, null, messages.MEDIA_STREAM.ERRORS.GET_USER_MEDIA], error);\n  dispatchEvent(mediaAccessError({\n    error,\n    isAudioFallbackError: false,\n  }));\n\n  reject(error);\n};\n\nexport default onStreamAccessError;\n","/**\n * Function that returns all active user streams including screenshare stream if present.\n * @param {SkylinkState} roomState\n * @return {streamList} streamList\n * @memberOf MediaStreamHelpers\n */\nconst getStreams = (roomState) => {\n  const { streams: { userMedia, screenshare } } = roomState;\n  const streamList = {\n    userMedia: null,\n    screenshare: null,\n  };\n\n  if (!userMedia && !screenshare) {\n    return streamList;\n  }\n\n  if (userMedia) {\n    const streamIds = Object.keys(userMedia);\n    streamList.userMedia = {};\n    streamIds.forEach((streamId) => {\n      streamList.userMedia[streamId] = userMedia[streamId].stream;\n    });\n  }\n\n  if (screenshare) {\n    streamList.screenshare = screenshare.stream;\n  }\n\n  return streamList;\n};\n\nexport default getStreams;\n","import logger from '../../logger';\n\nconst getScreenSources = () => new Promise((resolve) => {\n  const { navigator, AdapterJS } = window;\n  const outputSources = {\n    mediaSource: [],\n    mediaSourceInput: [],\n  };\n\n  // For chrome android 59+ has screensharing support behind chrome://flags (needs to be enabled by user)\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=487935\n  if (navigator.userAgent.toLowerCase().indexOf('android') > -1) {\n    if (AdapterJS.webrtcDetectedBrowser === 'chrome' && AdapterJS.webrtcDetectedVersion >= 59) {\n      outputSources.mediaSource = ['screen'];\n    }\n    resolve(outputSources);\n    return null;\n  }\n\n  // TODO: Check if AdapterJS.webrtcDetectedType === 'plugin' is needed for IE/Safari Commercial support. If they do not support gDM method, then we will need a plugin\n\n  if ((AdapterJS.webrtcDetectedBrowser === 'chrome' && AdapterJS.webrtcDetectedVersion >= 34)\n      || (AdapterJS.webrtcDetectedBrowser === 'firefox' && AdapterJS.webrtcDetectedVersion >= 38)\n      || (AdapterJS.webrtcDetectedBrowser === 'opera' && AdapterJS.webrtcDetectedVersion >= 21)) {\n    // Just warn users for those who did not configure the Opera screensharing extension settings, it will not work!\n    if (AdapterJS.webrtcDetectedBrowser === 'opera' && !(AdapterJS.extensionInfo\n        && AdapterJS.extensionInfo.opera && AdapterJS.extensionInfo.opera.extensionId)) {\n      logger.log.WARN('Please ensure that your application allows Opera screensharing!');\n    }\n\n    outputSources.mediaSource = ['window', 'screen'];\n\n    // Chrome 52+ and Opera 39+ supports tab and audio\n    // Reference: https://developer.chrome.com/extensions/desktopCapture\n    if ((AdapterJS.webrtcDetectedBrowser === 'chrome' && AdapterJS.webrtcDetectedVersion >= 52)\n        || (AdapterJS.webrtcDetectedBrowser === 'opera' && AdapterJS.webrtcDetectedVersion >= 39)) {\n      outputSources.mediaSource.push('tab', 'audio');\n\n      // Firefox supports some other sources\n      // Reference: http://fluffy.github.io/w3c-screen-share/#screen-based-video-constraints\n      //            https://bugzilla.mozilla.org/show_bug.cgi?id=1313758\n      //            https://bugzilla.mozilla.org/show_bug.cgi?id=1037405\n      //            https://bugzilla.mozilla.org/show_bug.cgi?id=1313758\n    } else if (AdapterJS.webrtcDetectedBrowser === 'firefox') {\n      outputSources.mediaSource.push('browser', 'camera', 'application');\n    }\n  }\n  resolve(outputSources);\n  return null;\n});\n\nexport default getScreenSources;\n","/* eslint-disable no-nested-ternary */\nimport Skylink from '../../index';\nimport { MEDIA_STATUS } from '../../constants';\n\nconst updateStreamsMediaStatus = (roomKey, settings, stream) => {\n  const updatedState = Skylink.getSkylinkState(roomKey);\n  const { room, streamsMediaStatus } = updatedState;\n  const { mutedSettings: { shouldAudioMuted }, settings: { audio, video } } = settings;\n\n  streamsMediaStatus[stream.id] = {};\n  streamsMediaStatus[stream.id].audioMuted = audio ? (shouldAudioMuted ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE) : MEDIA_STATUS.UNAVAILABLE;\n  streamsMediaStatus[stream.id].videoMuted = video ? (shouldAudioMuted ? MEDIA_STATUS.MUTED : MEDIA_STATUS.ACTIVE) : MEDIA_STATUS.UNAVAILABLE;\n\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nexport default updateStreamsMediaStatus;\n","import Skylink from '../../index';\n\nconst updateRemoteStreams = (room, peerId, stream) => {\n  const updatedState = Skylink.getSkylinkState(room.id);\n\n  updatedState.remoteStreams[peerId] = updatedState.remoteStreams[peerId] || {};\n  updatedState.remoteStreams[peerId][stream.id] = stream;\n\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nexport default updateRemoteStreams;\n","import Skylink from '../../index';\n\nconst retrieveVideoStreams = (room) => {\n  const state = Skylink.getSkylinkState(room.id);\n  const { streams } = state;\n  const videoStreams = [];\n  Object.values(streams.userMedia).forEach((streamObj) => {\n    if (streamObj.stream.getVideoTracks().length > 0) {\n      videoStreams.push(streamObj.stream);\n    }\n  });\n\n  return videoStreams;\n};\n\nexport default retrieveVideoStreams;\n","import { hasAudioTrack, hasVideoTrack } from '../../utils/helpers';\n\nconst splitAudioAndVideoStream = (stream) => {\n  const { MediaStream } = window;\n  const streams = [];\n  const audioTracks = stream.getAudioTracks();\n  const videoTracks = stream.getVideoTracks();\n\n  if (hasAudioTrack(stream)) {\n    streams.push(new MediaStream(audioTracks));\n  } else {\n    streams.push(null);\n  }\n\n  if (hasVideoTrack(stream)) {\n    streams.push(new MediaStream(videoTracks));\n  } else {\n    streams.push(null);\n  }\n\n  return streams;\n};\n\nexport default splitAudioAndVideoStream;\n","import Skylink from '../../index';\n\nconst updateStreamsMutedSettings = (roomKey, settings, stream) => {\n  const updatedState = Skylink.getSkylinkState(roomKey);\n  const { room, streamsMutedSettings } = updatedState;\n  const { audio, video } = settings.settings;\n\n  streamsMutedSettings[stream.id] = {};\n  streamsMutedSettings[stream.id].audioMuted = !audio;\n  streamsMutedSettings[stream.id].videoMuted = !video;\n\n  Skylink.setSkylinkState(updatedState, room.id);\n};\n\nexport default updateStreamsMutedSettings;\n","import helpers from './index';\nimport { hasAudioTrack } from '../../utils/helpers';\n\nconst onStreamAccessSuccess = (roomKey, stream, audioSettings, videoSettings, isAudioFallback) => {\n  const isScreensharing = false;\n  const streams = helpers.splitAudioAndVideoStream(stream);\n\n  streams.forEach((st) => {\n    if (!st) return;\n    helpers.processStreamInState(st, hasAudioTrack(st) ? audioSettings : videoSettings, roomKey, isScreensharing, isAudioFallback);\n  });\n\n  return streams;\n};\n\nexport default onStreamAccessSuccess;\n","import Skylink from '../index';\nimport logger from '../logger';\nimport MESSAGES from '../messages';\nimport mediaStreamHelpers from '../media-stream/helpers/index';\nimport SkylinkSignalingServer from '../server-communication/signaling-server/index';\nimport { BROWSER_AGENT } from '../constants';\n\n/**\n * @namespace UtilHelpers\n * @description Util helper functions\n * @private\n */\n\n/**\n * Function that tests if an object is empty.\n * @param {Object} obj\n * @return {boolean}\n * @memberOf UtilHelpers\n */\nexport const isEmptyObj = (obj) => {\n  const keys = Object.keys(obj);\n  return keys.length === 0;\n};\n\n/**\n * Function that tests if an array is empty.\n * @param {Array} array\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isEmptyArray = array => array.length === 0;\n\n/**\n * Function that tests if a string is an empty string.\n * @param string\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isEmptyString = string => string === '';\n\n/**\n * Function that tests if type is 'Object'.\n * @param {*} param\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isAObj = param => typeof param === 'object' && param !== null;\n\n/**\n * Function that tests if type is 'Null'.\n * @param {*} param\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isNull = param => typeof param === 'object' && param == null;\n\n/**\n * Function that tests if type is 'Number'.\n * @param {*} param\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isANumber = param => typeof param === 'number';\n\n/**\n * Function that tests if type is 'Function'.\n * @param {*} param\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isAFunction = param => typeof param === 'function';\n\n/**\n * Function that tests if type is 'Boolean'.\n * @param {Object|boolean}\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isABoolean = obj => typeof obj !== 'undefined' && typeof obj === 'boolean';\n\n/**\n * Function that tests if type is 'String'.\n * @param {*} param\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isAString = param => typeof param === 'string';\n\n/**\n * Function that tests if a param is null, undefined or a string.\n * @param param\n * @param paramName\n * @param methodName\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const getParamValidity = (param, paramName, methodName) => {\n  let proceed = true;\n  if (param === null || typeof param === 'undefined' || !isAString(param)) {\n    logger.log.ERROR(`${methodName}: ${paramName} is null, undefined or not a string.`);\n    proceed = false;\n  }\n  return proceed;\n};\n\n/**\n * Function that returns the Skylink state.\n * @param {SkylinkRoom.id} rid\n * @returns {SkylinkState|null} state\n * @memberOf UtilHelpers\n */\nexport const getStateByRid = (rid) => {\n  const proceed = getParamValidity(rid, 'roomId', 'getStateByRid');\n  if (proceed) {\n    const states = Skylink.getSkylinkState();\n    const roomKeys = Object.keys(states);\n    let roomState = null;\n    for (let i = 0; i < roomKeys.length; i += 1) {\n      const key = roomKeys[i];\n      if (key === rid) {\n        roomState = states[key];\n        break;\n      }\n    }\n    return roomState;\n  }\n  logger.log.ERROR(`getRoomStateByRid: ${MESSAGES.ROOM_STATE.NOT_FOUND} - ${rid}`);\n  return null;\n};\n\n/**\n * Function that returns the Skylink state.\n * @param {String} roomkey - The room key.\n * @returns {SkylinkState}\n * @memberOf UtilHelpers\n */\nexport const getStateByKey = roomkey => getStateByRid(roomkey);\n\n/**\n * Function that returns the room state.\n * @param {String} roomName - The room name.\n * @returns {SkylinkState|null} - The room state.\n * @memberOf UtilHelpers\n */\nexport const getRoomStateByName = (roomName) => {\n  const proceed = getParamValidity(roomName, 'roomName', 'getRoomStateByName');\n  let matchedRoomState = null;\n  if (proceed) {\n    const state = Skylink.getSkylinkState();\n    const roomKeys = Object.keys(state);\n    for (let i = 0; i < roomKeys.length; i += 1) {\n      const roomState = state[roomKeys[i]];\n      if (roomState.room.roomName.toLowerCase() === roomName.toLowerCase()) {\n        matchedRoomState = roomState;\n        break;\n      }\n    }\n  }\n  if (!matchedRoomState) {\n    logger.log.ERROR(`getRoomStateByName: ${MESSAGES.ROOM_STATE.NOT_FOUND} - ${roomName}`);\n  }\n  return matchedRoomState;\n};\n\n/**\n * Function that checks the agent version compatibility.\n * @param {String} agentVer\n * @param {String} requiredVer\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isLowerThanVersion = (agentVer, requiredVer) => {\n  const partsA = (agentVer || '').split('.');\n  const partsB = (requiredVer || '').split('.');\n\n  for (let i = 0; i < partsB.length; i += 1) {\n    if ((partsA[i] || '0') < (partsB[i] || '0')) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Disconnects from the signaling server.\n * @memberOf UtilHelpers\n */\nexport const disconnect = () => {\n  try {\n    new SkylinkSignalingServer().socket.disconnect();\n  } catch (error) {\n    logger.log.ERROR(error);\n  }\n};\n\n/**\n * Function that generates an <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\">UUID</a> (Unique ID).\n * @returns {String} Returns a generated UUID (Unique ID).\n * @memberOf UtilHelpers\n */\nexport const generateUUID = () => {\n  /* eslint-disable no-bitwise */\n  let d = new Date().getTime();\n  const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r && 0x7 | 0x8)).toString(16);\n  });\n  return uuid;\n};\n\n/**\n * Function that returns the getUserMedia stream when the user had not joined a room (is stateless)\n * @param {Object} options\n * @returns {Promise}\n * @memberOf UtilHelpers\n */\nexport const statelessGetUserMedia = options => new Promise((resolve, reject) => {\n  const { navigator } = window;\n  if (!options || !isAObj(options)) {\n    reject(new Error(`${MESSAGES.MEDIA_STREAM.ERRORS.INVALID_GUM_OPTIONS} ${options}`));\n  }\n\n  navigator.mediaDevices.getUserMedia(options).then((stream) => {\n    const streams = mediaStreamHelpers.splitAudioAndVideoStream(stream);\n    resolve(streams);\n  }).catch((error) => {\n    reject(error);\n  });\n});\n\n/**\n * Function that always returns are rejected Promise.\n * @param {String} errorMsg\n * @returns {Promise}\n * @memberOf UtilHelpers\n */\nexport const rejectPromise = errorMsg => new Promise((resolve, reject) => {\n  reject(new Error(errorMsg));\n});\n\n/**\n * Function that updates the replaced state of the streams\n * @param {MediaStream} replacedStream\n * @param {MediaStream} newStream\n * @param {SkylinkState} state\n * @param {boolean} isReplaced\n * @memberOf UtilHelpers\n */\nexport const updateReplacedStreamInState = (replacedStream, newStream, state, isReplaced) => {\n  const { streams, room } = state;\n  const streamObjs = Object.values(streams.userMedia);\n  for (let i = 0; i < streamObjs.length; i += 1) {\n    if (streamObjs[i].id === replacedStream.id) {\n      streamObjs[i].isReplaced = isReplaced;\n      streamObjs[i].newStream = newStream;\n    }\n  }\n\n  Skylink.setSkylinkState(state, room.id);\n};\n\n/**\n * Function that checks if the peerId exists on the peerConnection\n * @param {SkylinkRoom} room\n * @param {String} peerId\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isValidPeerId = (room, peerId) => {\n  const state = Skylink.getSkylinkState(room.id);\n\n  const { peerConnections } = state;\n  const peerIds = Object.keys(peerConnections);\n\n  let isValid = false;\n  peerIds.forEach((validPeerId) => {\n    if (validPeerId === peerId) {\n      isValid = true;\n    }\n  });\n\n  return isValid;\n};\n\n/**\n * Function that checks if a media stream has an audio track.\n * @param {MediaStream} stream\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const hasAudioTrack = stream => stream.getAudioTracks().length > 0;\n\n/**\n * Function that checks if a media stream has a video track.\n * @param {MediaStream} stream\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const hasVideoTrack = stream => stream.getVideoTracks().length > 0;\n\n/**\n * Function that checks the browser agent.\n * @param {String} agent\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isAgent = (agent) => {\n  const { AdapterJS } = window;\n  switch (agent) {\n    case BROWSER_AGENT.CHROME:\n      return AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.CHROME;\n    case BROWSER_AGENT.SAFARI:\n      return AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.SAFARI;\n    case BROWSER_AGENT.FIREFOX:\n      return AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.FIREFOX;\n    default:\n      logger.log.DEBUG(MESSAGES.UTILS.INVALID_BROWSER_AGENT);\n      return false;\n  }\n};\n\n/**\n * Function that checks the browser version.\n * @param {number} version\n * @returns {boolean}\n * @memberOf UtilHelpers\n */\nexport const isVersion = (version) => {\n  const { AdapterJS } = window;\n  return AdapterJS.webrtcDetectedVersion === version;\n};\n\n/**\n * Function that generates a timestamp in UNIX format.\n * @returns {number}\n * @memberOf UtilHelpers\n */\nexport const generateUNIXTimeStamp = () => Math.round(new Date().getTime() / 1000);\n\n/**\n * Function that parses UNIX timestamp and returns timestamp in ISO string.\n * @param timestamp\n * @returns {string}\n * @memberOf UtilHelpers\n */\nexport const parseUNIXTimeStamp = timestamp => new Date(timestamp).toISOString();\n\n/**\n * Function that generates a timestamp in ISO string format.\n * @returns {string}\n * @memberOf UtilHelpers\n */\nexport const generateISOStringTimesStamp = () => new Date().toISOString();\n","import logger from '../logger/index';\nimport { TAGS, EVENTS } from '../constants';\nimport { isAFunction } from './helpers';\nimport MESSAGES from '../messages';\n\nclass SkylinkEventManager {\n  constructor() {\n    this.events = {};\n    this.privateEvents = {};\n  }\n\n  addPrivateEventListener(eventName, callback) {\n    this.addListener(eventName, callback, true);\n  }\n\n  addEventListener(eventName, callback) {\n    this.addListener(eventName, callback, false);\n  }\n\n  addListener(eventName, callback, isPrivate) {\n    try {\n      const key = isPrivate ? 'privateEvents' : 'events';\n\n      if (!isAFunction(callback)) {\n        logger.log.DEBUG([null, TAGS.SKYLINK_EVENT, eventName, MESSAGES.LOGGER.INVALID_CB]);\n        return;\n      }\n\n      if (!this[key][eventName]) {\n        this[key][eventName] = {};\n      }\n\n      if (!this[key][eventName].callbacks) {\n        this[key][eventName].callbacks = [];\n      }\n\n      this[key][eventName].callbacks.push(callback);\n\n      if (!isPrivate) {\n        logger.log.DEBUG([null, TAGS.SKYLINK_EVENT, eventName, MESSAGES.LOGGER.EVENT_REGISTERED]);\n      }\n    } catch (err) {\n      logger.log.ERROR([null, TAGS.SKYLINK_EVENT, eventName, MESSAGES.LOGGER.EVENT_REGISTER_ERROR], err);\n    }\n  }\n\n  dispatchEvent(evt) {\n    if (evt.name === EVENTS.LOGGED_ON_CONSOLE) {\n      return;\n    }\n\n    let allEventCallbacks = [];\n    if (!this.events[evt.name]) {\n      logger.log.DEBUG([null, TAGS.SKYLINK_EVENT, evt.name, MESSAGES.LOGGER.EVENT_DISPATCHED]);\n    } else {\n      const userCallbacks = this.events[evt.name].callbacks;\n      allEventCallbacks = allEventCallbacks.concat(userCallbacks);\n    }\n\n    if (this.privateEvents[evt.name]) {\n      const privateCallbacks = this.privateEvents[evt.name] ? this.privateEvents[evt.name].callbacks : [];\n      allEventCallbacks = allEventCallbacks.concat(privateCallbacks);\n    }\n\n    allEventCallbacks.forEach((callback) => {\n      try {\n        callback(evt.detail);\n      } catch (err) {\n        logger.log.ERROR([null, TAGS.SKYLINK_EVENT, evt.name, MESSAGES.LOGGER.EVENT_DISPATCH_ERROR], err);\n      }\n    });\n  }\n\n  removeEventListener(eventName, callback) {\n    this.removeListener(eventName, callback, false);\n  }\n\n  removePrivateEventListener(eventName, callback) {\n    this.removeListener(eventName, callback, true);\n  }\n\n  removeListener(eventName, callback, isPrivate) {\n    const key = isPrivate ? 'privateEvents' : 'events';\n\n    if (!isPrivate && !(this.events[eventName] && this.events[eventName].callbacks)) {\n      logger.log.WARN([null, TAGS.SKYLINK_EVENT, eventName, MESSAGES.LOGGER.EVENT_UNREGISTERED]);\n      return;\n    }\n\n    try {\n      this[key][eventName].callbacks.forEach((cb, i) => {\n        if (cb === callback) {\n          delete this[key][eventName].callbacks[i];\n\n          if (!isPrivate) {\n            logger.log.DEBUG([null, TAGS.SKYLINK_EVENT, eventName, MESSAGES.LOGGER.EVENT_UNREGISTERED]);\n          }\n        }\n      });\n    } catch (err) {\n      logger.log.ERROR([null, TAGS.SKYLINK_EVENT, eventName, MESSAGES.LOGGER.EVENT_DISPATCH_ERROR], err);\n    }\n  }\n}\n\nconst skylinkEventManager = new SkylinkEventManager();\nconst addEventListener = skylinkEventManager.addPrivateEventListener.bind(skylinkEventManager);\nconst removeEventListener = skylinkEventManager.removePrivateEventListener.bind(skylinkEventManager);\nconst dispatchEvent = skylinkEventManager.dispatchEvent.bind(skylinkEventManager);\n\nexport default skylinkEventManager;\nexport { addEventListener, removeEventListener, dispatchEvent };\n","import { loggedOnConsole } from '../skylink-events';\nimport { dispatchEvent } from '../utils/skylinkEventManager';\nimport SkylinkLogger from './index';\n\nconst logMethods = [\n  'trace',\n  'debug',\n  'info',\n  'warn',\n  'error',\n];\n\nconst LEVEL_STORAGE_KEY = 'loglevel:skylinkjs';\n\nconst checkSupport = (methodName) => {\n  let hasSupport = true;\n  if (typeof console === 'undefined') {\n    hasSupport = false;\n  } else if (typeof console[methodName] === 'undefined') { // eslint-disable-line no-console\n    hasSupport = false;\n  }\n  return hasSupport;\n};\n\nconst getFormattedMessage = (message) => {\n  let log = 'SkylinkJS -';\n  if (Array.isArray(message)) {\n    // fragment1 - peerId\n    // fragment2 - tag\n    // fragment3 - additional info / state\n    const [fragment1, fragment2, fragment3, messageString] = message;\n    log += fragment1 ? ` [${fragment1}]` : ' -';\n    // eslint-disable-next-line no-nested-ternary\n    log += fragment2 ? ` <<${fragment2}>>` : (fragment1 ? '' : ' <<Method>>');\n    if (fragment3) {\n      if (Array.isArray(fragment3)) {\n        for (let i = 0; i < fragment3.length; i += 1) {\n          log += ` (${fragment3[i]})`;\n        }\n      } else {\n        log += ` (${fragment3})`;\n      }\n    }\n    log += ` ${messageString}`;\n  } else {\n    log += ` ${message}`;\n  }\n  return log;\n};\n\nexport const logFn = (logger, level, message, debugObject = null) => {\n  const datetime = `[${(new Date()).toISOString()}]`;\n  const currentLevel = logger.level;\n  const { logLevels } = logger;\n  if (currentLevel <= level && currentLevel !== logLevels.SILENT) {\n    const methodName = logMethods[level];\n    const hasSupport = checkSupport(methodName);\n\n    if (!hasSupport) {\n      return;\n    }\n\n    const formattedMessage = getFormattedMessage(message);\n    if (checkSupport(methodName)) {\n      console[methodName](datetime, formattedMessage, debugObject || ''); // eslint-disable-line no-console\n      dispatchEvent(loggedOnConsole({ level: methodName, message: formattedMessage, debugObject }));\n    }\n\n    if (SkylinkLogger.storeLogs) {\n      const logItems = [datetime, methodName.toUpperCase(), formattedMessage];\n      if (debugObject) {\n        logItems.push(debugObject);\n      }\n      SkylinkLogger.storedLogs.push(logItems);\n    }\n  }\n};\n\nexport const persistLogLevel = (level) => {\n  window.localStorage.setItem(LEVEL_STORAGE_KEY, level);\n};\n\nexport const getPersistedLevel = (logLevels) => {\n  const level = window.localStorage.getItem(LEVEL_STORAGE_KEY);\n  return level !== null && !Number.isNaN(+level) ? +level : logLevels.ERROR;\n};\n","import { logFn, persistLogLevel, getPersistedLevel } from './log-helpers';\nimport MESSAGES from '../messages';\n\n/**\n * @classdesc Class used for logging messages on the console. Exports a singleton logger object.\n * @class SkylinkLogger\n * @public\n * @example\n * import { SkylinkLogger } from 'skylinkjs';\n *\n * const skylinkLogger = new SkylinkLogger();\n */\nclass SkylinkLogger {\n  constructor() {\n    /**\n     * @description List of log levels.\n     * @type {Object} logLevels\n     * @property {number} TRACE - All logs.\n     * @property {number} DEBUG\n     * @property {number} INFO\n     * @property {number} WARN\n     * @property {number} ERROR\n     * @property {number} SILENT - No logs.\n     */\n    this.logLevels = {\n      TRACE: 0, // All Logs\n      DEBUG: 1,\n      INFO: 2,\n      WARN: 3,\n      ERROR: 4, // Ideal level for Production Env.\n      SILENT: 5, // No logging\n    };\n\n    this.level = getPersistedLevel(this.logLevels);\n\n    /**\n     * @description The flag that enables the store logs function.\n     * @type {boolean}\n     */\n    this.storeLogs = false;\n\n    /**\n     * @description The stored logs when storeLogs flag is set to true.\n     * @type {Array.<logItems>} The array of stored logs\n     */\n    this.storedLogs = [];\n  }\n\n  /**\n   * @description Method that sets the log level.\n   * @param {number} level - The log level to be set. REF: {@link SkylinkLogger#logLevels|logLevels}\n   * @param {Boolean} storeLogs - The flag if logs should be stored.\n   * @public\n   * @example\n   * skylinkLogger.setLogLevels(skylinkLogger.logLevels.TRACE);\n   * @alias SkylinkLogger#setLevel\n   */\n  setLevel(level = this.levels.ERROR, storeLogs) {\n    if (typeof level === 'number') {\n      this.level = level;\n      persistLogLevel(this.level);\n    } else {\n      this.level = this.levels.ERROR;\n    }\n\n    if (storeLogs) {\n      this.storeLogs = storeLogs;\n    }\n  }\n\n  /**\n   * @description Enables logging with highest level (TRACE).\n   * @public\n   * @alias SkylinkLogger#enableAll\n   */\n  enableAll() {\n    this.setLevel(this.logLevels.TRACE);\n  }\n\n  /**\n   * @description Disables all logging with lowest level (SILENT).\n   * @public\n   * @alias SkylinkLogger#disableAll\n   */\n  disableAll() {\n    this.setLevel(this.logLevels.SILENT);\n  }\n\n  getLogs() {\n    if (this.storeLogs) {\n      return this.storedLogs;\n    }\n\n    this.log.WARN(MESSAGES.LOGGER.LOGS_NOT_STORED);\n    return null;\n  }\n\n  clearLogs() {\n    this.log.INFO(MESSAGES.LOGGER.LOGS_CLEARED);\n    this.storedLogs = [];\n  }\n}\n\n/**\n * @type {SkylinkLogger}\n * @private\n */\nconst logger = new SkylinkLogger();\n\n/**\n * @description Method to trigger a log\n * @type {{TRACE: SkylinkLogger.log.TRACE, DEBUG: SkylinkLogger.log.DEBUG, INFO: SkylinkLogger.log.INFO, WARN: SkylinkLogger.log.WARN, ERROR: SkylinkLogger.log.ERROR}}\n * @private\n */\nSkylinkLogger.prototype.log = {\n  TRACE: (...params) => {\n    logFn(logger, logger.logLevels.TRACE, ...params);\n  },\n  DEBUG: (...params) => {\n    logFn(logger, logger.logLevels.DEBUG, ...params);\n  },\n  INFO: (...params) => {\n    logFn(logger, logger.logLevels.INFO, ...params);\n  },\n  WARN: (...params) => {\n    logFn(logger, logger.logLevels.WARN, ...params);\n  },\n  ERROR: (...params) => {\n    logFn(logger, logger.logLevels.ERROR, ...params);\n  },\n};\n\nexport default logger;\n","/* eslint-disable prefer-template */\n/* eslint-disable no-useless-escape */\n/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-nested-ternary */\n/* eslint-disable no-restricted-syntax */\nimport * as constants from '../../constants';\nimport Skylink from '../../index';\n\nconst parseFn = (sessionDescription, type, codecName, samplingRate, settings) => {\n  const mLine = sessionDescription.sdp.match(new RegExp('m=' + type + '\\ .*\\r\\n', 'gi'));\n  // Find the m= line\n  if (Array.isArray(mLine) && mLine.length > 0) {\n    const codecsList = sessionDescription.sdp.match(new RegExp('a=rtpmap:.*\\ ' + codecName + '\\/'\n      + (samplingRate ? samplingRate + (type === 'audio' ? '[\\/]*.*' : '.*') : '.*') + '\\r\\n', 'gi'));\n    // Get the list of codecs related to it\n    if (Array.isArray(codecsList) && codecsList.length > 0) {\n      for (let i = 0; i < codecsList.length; i += 1) {\n        const payload = (codecsList[i].split('a=rtpmap:')[1] || '').split(' ')[0];\n        if (!payload) {\n          continue;\n        }\n        const fmtpLine = sessionDescription.sdp.match(new RegExp('a=fmtp:' + payload + '\\ .*\\r\\n', 'gi'));\n        let updatedFmtpLine = 'a=fmtp:' + payload + ' ';\n        const addedKeys = [];\n        // Check if a=fmtp: line exists\n        if (Array.isArray(fmtpLine) && fmtpLine.length > 0) {\n          const fmtpParts = (fmtpLine[0].split('a=fmtp:' + payload + ' ')[1] || '').replace(/ /g, '').replace(/\\r\\n/g, '').split(';');\n          for (let j = 0; j < fmtpParts.length; j += 1) {\n            if (!fmtpParts[j]) {\n              continue;\n            }\n            const keyAndValue = fmtpParts[j].split('=');\n            if (settings.hasOwnProperty(keyAndValue[0])) {\n              // Dont append parameter key+value if boolean and false\n              updatedFmtpLine += typeof settings[keyAndValue[0]] === 'boolean' ? (settings[keyAndValue[0]]\n                ? keyAndValue[0] + '=1;' : '') : keyAndValue[0] + '=' + settings[keyAndValue[0]] + ';';\n            } else {\n              updatedFmtpLine += fmtpParts[j] + ';';\n            }\n            addedKeys.push(keyAndValue[0]);\n          }\n          sessionDescription.sdp = sessionDescription.sdp.replace(fmtpLine[0], '');\n        }\n        for (const key in settings) {\n          if (settings.hasOwnProperty(key) && addedKeys.indexOf(key) === -1) {\n            // Dont append parameter key+value if boolean and false\n            updatedFmtpLine += typeof settings[key] === 'boolean' ? (settings[key] ? key + '=1;' : '') : key + '=' + settings[key] + ';';\n            addedKeys.push(key);\n          }\n        }\n        if (updatedFmtpLine !== 'a=fmtp:' + payload + ' ') {\n          sessionDescription.sdp = sessionDescription.sdp.replace(codecsList[i], codecsList[i] + updatedFmtpLine + '\\r\\n');\n        }\n      }\n    }\n  }\n};\n\nconst setSDPCodecParams = (targetMid, sessionDescription, roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const initOptions = Skylink.getInitOptions();\n\n  // Set audio codecs -> OPUS\n  // RFC: https://tools.ietf.org/html/draft-ietf-payload-rtp-opus-11\n  parseFn(sessionDescription, 'audio', constants.AUDIO_CODEC.OPUS, 48000, (() => {\n    const opusOptions = {};\n    // let audioSettings = state.streams.screenshare ? state.streams.screenshare.settings.audio : (state.streams.userMedia ? state.streams.userMedia.settings.audio : {});\n    // TODO: check if settings across different streams are the same\n    // FIXME: Quickfix to pass in first stream\n    const streamIds = Object.keys(state.streams.userMedia);\n    let audioSettings = state.streams.userMedia ? state.streams.userMedia[streamIds[0]].settings.audio : {};\n    audioSettings = audioSettings && typeof audioSettings === 'object' ? audioSettings : {};\n    if (typeof initOptions.codecParams.audio.opus.stereo === 'boolean') {\n      opusOptions.stereo = initOptions.codecParams.audio.opus.stereo;\n    } else if (typeof audioSettings.stereo === 'boolean') {\n      opusOptions.stereo = audioSettings.stereo;\n    }\n    if (typeof initOptions.codecParams.audio.opus['sprop-stereo'] === 'boolean') {\n      opusOptions['sprop-stereo'] = initOptions.codecParams.audio.opus['sprop-stereo'];\n    } else if (typeof audioSettings.stereo === 'boolean') {\n      opusOptions['sprop-stereo'] = audioSettings.stereo;\n    }\n    if (typeof initOptions.codecParams.audio.opus.usedtx === 'boolean') {\n      opusOptions.usedtx = initOptions.codecParams.audio.opus.usedtx;\n    } else if (typeof audioSettings.usedtx === 'boolean') {\n      opusOptions.usedtx = audioSettings.usedtx;\n    }\n    if (typeof initOptions.codecParams.audio.opus.useinbandfec === 'boolean') {\n      opusOptions.useinbandfec = initOptions.codecParams.audio.opus.useinbandfec;\n    } else if (typeof audioSettings.useinbandfec === 'boolean') {\n      opusOptions.useinbandfec = audioSettings.useinbandfec;\n    }\n    if (typeof initOptions.codecParams.audio.opus.maxplaybackrate === 'number') {\n      opusOptions.maxplaybackrate = initOptions.codecParams.audio.opus.maxplaybackrate;\n    } else if (typeof audioSettings.maxplaybackrate === 'number') {\n      opusOptions.maxplaybackrate = audioSettings.maxplaybackrate;\n    }\n    if (typeof initOptions.codecParams.audio.opus.minptime === 'number') {\n      opusOptions.minptime = initOptions.codecParams.audio.opus.minptime;\n    } else if (typeof audioSettings.minptime === 'number') {\n      opusOptions.minptime = audioSettings.minptime;\n    }\n    // Possible future params: sprop-maxcapturerate, maxaveragebitrate, sprop-stereo, cbr\n    // NOT recommended: maxptime, ptime, rate, minptime\n    return opusOptions;\n  })());\n\n  // RFC: https://tools.ietf.org/html/rfc4733\n  // Future: Set telephone-event: 100 0-15,66,70\n\n  // RFC: https://tools.ietf.org/html/draft-ietf-payload-vp8-17\n  // Set video codecs -> VP8\n  parseFn(sessionDescription, 'video', constants.VIDEO_CODEC.VP8, null, (() => {\n    const vp8Options = {};\n    // NOT recommended: max-fr, max-fs (all are codec decoder capabilities)\n    if (typeof initOptions.codecParams.video.vp8.maxFr === 'number') {\n      vp8Options['max-fr'] = initOptions.codecParams.video.vp8.maxFr;\n    }\n    if (typeof initOptions.codecParams.video.vp8.maxFs === 'number') {\n      vp8Options['max-fs'] = initOptions.codecParams.video.vp8.maxFs;\n    }\n    return vp8Options;\n  })());\n\n  // RFC: https://tools.ietf.org/html/draft-ietf-payload-vp9-02\n  // Set video codecs -> VP9\n  parseFn(sessionDescription, 'video', constants.VIDEO_CODEC.VP9, null, (() => {\n    const vp9Options = {};\n    // NOT recommended: max-fr, max-fs (all are codec decoder capabilities)\n    if (typeof initOptions.codecParams.video.vp9.maxFr === 'number') {\n      vp9Options['max-fr'] = initOptions.codecParams.video.vp9.maxFr;\n    }\n    if (typeof initOptions.codecParams.video.vp9.maxFs === 'number') {\n      vp9Options['max-fs'] = initOptions.codecParams.video.vp9.maxFs;\n    }\n    return vp9Options;\n  })());\n\n  // RFC: https://tools.ietf.org/html/rfc6184\n  // Set the video codecs -> H264\n  parseFn(sessionDescription, 'video', constants.VIDEO_CODEC.H264, null, (() => {\n    const h264Options = {};\n    if (typeof initOptions.codecParams.video.h264.levelAsymmetryAllowed === 'string') {\n      h264Options['profile-level-id'] = initOptions.codecParams.video.h264.profileLevelId;\n    }\n    if (typeof initOptions.codecParams.video.h264.levelAsymmetryAllowed === 'boolean') {\n      h264Options['level-asymmetry-allowed'] = initOptions.codecParams.video.h264.levelAsymmetryAllowed;\n    }\n    if (typeof initOptions.codecParams.video.h264.packetizationMode === 'boolean') {\n      h264Options['packetization-mode'] = initOptions.codecParams.video.h264.packetizationMode;\n    }\n    // Possible future params (remove if they are decoder/encoder capabilities or info):\n    //   max-recv-level, max-mbps, max-smbps, max-fs, max-cpb, max-dpb, max-br,\n    //   max-mbps, max-smbps, max-fs, max-cpb, max-dpb, max-br, redundant-pic-cap, sprop-parameter-sets,\n    //   sprop-level-parameter-sets, use-level-src-parameter-sets, in-band-parameter-sets,\n    //   sprop-interleaving-depth, sprop-deint-buf-req, deint-buf-cap, sprop-init-buf-time,\n    //   sprop-max-don-diff, max-rcmd-nalu-size, sar-understood, sar-supported\n    //   NOT recommended: profile-level-id (WebRTC uses \"42e00a\" for the moment)\n    //   https://bugs.chromium.org/p/chromium/issues/detail?id=645599\n    return h264Options;\n  })());\n\n  return sessionDescription.sdp;\n};\n\nexport default setSDPCodecParams;\n","/* eslint-disable no-useless-escape */\n/* eslint-disable no-param-reassign */\n/* eslint-disable prefer-template */\nconst formatRtx = (str) => {\n  (str.match(/a=rtpmap:.*\\ rtx\\/.*\\r\\n/gi) || []).forEach((line) => {\n    const payload = (line.split('a=rtpmap:')[1] || '').split(' ')[0] || '';\n    const fmtpLine = (str.match(new RegExp('a=fmtp:' + payload + '\\ .*\\r\\n', 'gi')) || [])[0];\n\n    if (!fmtpLine) {\n      str = str.replace(new RegExp(line, 'g'), '');\n      return;\n    }\n\n    const codecPayload = (fmtpLine.split(' apt=')[1] || '').replace(/\\r\\n/gi, '');\n    const rtmpLine = str.match(new RegExp('a=rtpmap:' + codecPayload + '\\ .*\\r\\n', 'gi'));\n\n    if (!rtmpLine) {\n      str = str.replace(new RegExp(line, 'g'), '');\n      str = str.replace(new RegExp(fmtpLine, 'g'), '');\n    }\n  });\n\n  return str;\n};\n\n// Remove unmapped fmtp and rtcp-fb lines\nconst formatFmtpRtcpFb = (str) => {\n  (str.match(/a=(fmtp|rtcp-fb):.*\\ rtx\\/.*\\r\\n/gi) || []).forEach((line) => {\n    const payload = (line.split('a=' + (line.indexOf('rtcp') > 0 ? 'rtcp-fb' : 'fmtp'))[1] || '').split(' ')[0] || '';\n    const rtmpLine = str.match(new RegExp('a=rtpmap:' + payload + '\\ .*\\r\\n', 'gi'));\n\n    if (!rtmpLine) {\n      str = str.replace(new RegExp(line, 'g'), '');\n    }\n  });\n\n  return str;\n};\n\nconst removeSDPUnknownAptRtx = (targetMid, sessionDescription) => {\n  const mediaLines = sessionDescription.sdp.split('m=');\n\n  // Remove unmapped rtx lines\n  // Remove rtx or apt= lines that prevent connections for browsers without VP8 or VP9 support\n  // See: https://bugs.chromium.org/p/webrtc/issues/detail?id=3962\n  for (let m = 0; m < mediaLines.length; m += 1) {\n    mediaLines[m] = formatRtx(mediaLines[m]);\n    mediaLines[m] = formatFmtpRtcpFb(mediaLines[m]);\n  }\n\n  return mediaLines.join('m=');\n};\n\nexport default removeSDPUnknownAptRtx;\n","import getSDPCommonSupports from './getSDPCommonSupports';\nimport getSDPCodecsSupport from './getSDPCodecsSupport';\nimport getCodecsSupport from './getCodecsSupport';\nimport setSDPCodecParams from './setSDPCodecParams';\nimport removeSDPFilteredCandidates from './removeSDPFilteredCandidates';\nimport setSDPCodec from './setSDPCodec';\nimport setSDPBitrate from './setSDPBitrate';\nimport removeSDPCodecs from './removeSDPCodecs';\nimport removeSDPREMBPackets from './removeSDPREMBPackets';\nimport handleSDPConnectionSettings from './handleSDPConnectionSettings';\nimport removeSDPUnknownAptRtx from './removeSDPUnknownAptRtx';\nimport removeSDPFirefoxH264Pref from './removeSDPFirefoxH264Pref';\nimport renderSDPOutput from './renderSDPOutput';\nimport getSDPICECandidates from './getSDPICECandidates';\nimport getSDPSelectedCodec from './getSDPSelectedCodec';\nimport setOriginalDTLSRole from './setOriginalDTLSRole';\nimport modifyDTLSRole from './modifyDTLSRole';\nimport getTransceiverMid from './getTransceiverMid';\n\nconst helpers = {\n  getSDPCommonSupports,\n  getSDPCodecsSupport,\n  getCodecsSupport,\n  setSDPCodecParams,\n  removeSDPFilteredCandidates,\n  setSDPCodec,\n  setSDPBitrate,\n  removeSDPCodecs,\n  removeSDPREMBPackets,\n  handleSDPConnectionSettings,\n  removeSDPUnknownAptRtx,\n  removeSDPFirefoxH264Pref,\n  renderSDPOutput,\n  getSDPICECandidates,\n  getSDPSelectedCodec,\n  setOriginalDTLSRole,\n  modifyDTLSRole,\n  getTransceiverMid,\n};\n\nexport default helpers;\n","import logger from '../../logger';\n\nconst getSDPCodecsSupport = (targetMid, sessionDescription, beSilentOnParseLogs) => {\n  const codecs = { audio: {}, video: {} };\n\n  if (!(sessionDescription && sessionDescription.sdp)) {\n    return codecs;\n  }\n\n  const sdpLines = sessionDescription.sdp.split('\\r\\n');\n  let mediaType = '';\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    /* eslint-disable prefer-destructuring */\n    /* eslint-disable no-continue */\n    if (sdpLines[i].indexOf('m=') === 0) {\n      mediaType = (sdpLines[i].split('m=')[1] || '').split(' ')[0];\n      continue;\n    }\n\n    if (sdpLines[i].indexOf('a=rtpmap:') === 0) {\n      const parts = (sdpLines[i].split(' ')[1] || '').split('/');\n      const codec = (parts[0] || '').toLowerCase();\n      const info = parts[1] + (parts[2] ? `/${parts[2]}` : '');\n\n      if (['ulpfec', 'red', 'telephone-event', 'cn', 'rtx'].indexOf(codec) > -1) {\n        continue;\n      }\n\n      codecs[mediaType][codec] = codecs[mediaType][codec] || [];\n\n      if (codecs[mediaType][codec].indexOf(info) === -1) {\n        codecs[mediaType][codec].push(info);\n      }\n    }\n  }\n\n  if (!beSilentOnParseLogs) {\n    logger.log.INFO([targetMid || null, 'RTCSessionDescription', sessionDescription.type, 'Parsed codecs support ->'], codecs);\n  }\n\n  return codecs;\n};\n\nexport default getSDPCodecsSupport;\n","import Skylink from '../../index';\nimport * as constants from '../../constants';\nimport SessionDescription from '../index';\n\nconst getCodecsSupport = roomKey => new Promise((resolve, reject) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const { beSilentOnParseLogs } = Skylink.getInitOptions();\n  const updatedState = state;\n  const { AdapterJS, RTCRtpSender, RTCPeerConnection } = window;\n\n  if (state.currentCodecSupport) {\n    resolve(state.currentCodecSupport);\n  }\n\n  updatedState.currentCodecSupport = { audio: {}, video: {} };\n\n  // Safari 11 REQUIRES a stream first before connection works, hence let's spoof it for now\n  if (AdapterJS.webrtcDetectedType === 'AppleWebKit') {\n    updatedState.currentCodecSupport.audio = {\n      opus: ['48000/2'],\n    };\n    updatedState.currentCodecSupport.video = {\n      h264: ['48000'],\n    };\n    resolve(updatedState.currentCodecSupport);\n  }\n\n  try {\n    if (window.webrtcDetectedBrowser === 'edge') {\n      const { codecs } = RTCRtpSender.getCapabilities();\n\n      for (let i = 0; i < codecs.length; i += 1) {\n        if (['audio', 'video'].indexOf(codecs[i].kind) > -1 && codecs[i].name) {\n          const codec = codecs[i].name.toLowerCase();\n          updatedState.currentCodecSupport[codecs[i].kind][codec] = codecs[i].clockRate + (codecs[i].numChannels > 1 ? `/${codecs[i].numChannels}` : '');\n        }\n      }\n      // Ignore .fecMechanisms for now\n      resolve(updatedState.currentCodecSupport);\n    } else {\n      const pc = new RTCPeerConnection(null);\n      const offerConstraints = AdapterJS.webrtcDetectedType !== 'plugin' ? {\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n      } : {\n        mandatory: {\n          OfferToReceiveVideo: true,\n          OfferToReceiveAudio: true,\n        },\n      };\n\n      // Prevent errors and proceed with create offer still...\n      try {\n        const channel = pc.createDataChannel('test');\n        updatedState.binaryChunkType = channel.binaryType || state.binaryChunkType;\n        updatedState.binaryChunkType = state.binaryChunkType.toLowerCase().indexOf('array') > -1 ? constants.DATA_TRANSFER_DATA_TYPE.ARRAY_BUFFER : state.binaryChunkType;\n        // Set the value according to the property\n        const prop = Object.keys(constants.DATA_TRANSFER_DATA_TYPE);\n        for (let i = 0; i < prop.length; i += 1) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (constants.DATA_TRANSFER_DATA_TYPE.hasOwnProperty(prop)\n              && state.binaryChunkType.toLowerCase() === constants.DATA_TRANSFER_DATA_TYPE[prop].toLowerCase()) {\n            updatedState.binaryChunkType = constants.DATA_TRANSFER_DATA_TYPE[prop];\n            break;\n          }\n        }\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n\n      pc.createOffer(offerConstraints)\n        .then((offer) => {\n          updatedState.currentCodecSupport = SessionDescription.getSDPCodecsSupport(null, offer, beSilentOnParseLogs);\n          resolve(updatedState.currentCodecSupport);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    }\n  } catch (error) {\n    reject(error);\n  }\n});\n\nexport default getCodecsSupport;\n","import Skylink from '../../index';\nimport logger from '../../logger';\nimport { PEER_TYPE, HANDSHAKE_PROGRESS } from '../../constants';\n\n/* eslint-disable no-param-reassign */\nconst removeSDPFilteredCandidates = (targetMid, sessionDescription, roomKey) => {\n  const initOptions = Skylink.getInitOptions();\n  const state = Skylink.getSkylinkState(roomKey);\n  // Handle Firefox MCU Peer ICE candidates\n  if (targetMid === PEER_TYPE.MCU && sessionDescription.type === HANDSHAKE_PROGRESS.ANSWER\n    && window.webrtcDetectedBrowser === 'firefox') {\n    sessionDescription.sdp = sessionDescription.sdp.replace(/ generation 0/g, '');\n    sessionDescription.sdp = sessionDescription.sdp.replace(/ udp /g, ' UDP ');\n  }\n\n  if (initOptions.forceTURN && state.hasMCU) {\n    logger.log.WARN([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Not filtering ICE candidates as '\n    + 'TURN connections are enforced as MCU is present (and act as a TURN itself) so filtering of ICE candidate '\n    + 'flags are not honoured']);\n    return sessionDescription.sdp;\n  }\n\n  if (initOptions.filterCandidatesType.host) {\n    logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Removing \"host\" ICE candidates.']);\n    sessionDescription.sdp = sessionDescription.sdp.replace(/a=candidate:.*host.*\\r\\n/g, '');\n  }\n\n  if (initOptions.filterCandidatesType.srflx) {\n    logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Removing \"srflx\" ICE candidates.']);\n    sessionDescription.sdp = sessionDescription.sdp.replace(/a=candidate:.*srflx.*\\r\\n/g, '');\n  }\n\n  if (initOptions.filterCandidatesType.relay) {\n    logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Removing \"relay\" ICE candidates.']);\n    sessionDescription.sdp = sessionDescription.sdp.replace(/a=candidate:.*relay.*\\r\\n/g, '');\n  }\n  // sessionDescription.sdp = sessionDescription.sdp.replace(/a=candidate:(?!.*relay.*).*\\r\\n/g, '');\n  return sessionDescription.sdp;\n};\n\nexport default removeSDPFilteredCandidates;\n","/* eslint-disable prefer-template */\n/* eslint-disable no-useless-escape */\n/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-else-return */\n/* eslint-disable consistent-return */\nimport Skylink from '../../index';\nimport logger from '../../logger';\nimport * as constants from '../../constants';\n\nconst setSDPCodec = (targetMid, sessionDescription, roomKey, overrideSettings) => {\n  const initOptions = Skylink.getInitOptions(roomKey);\n  const parseFn = (type, codecSettings) => {\n    const codec = typeof codecSettings === 'object' ? codecSettings.codec : codecSettings;\n    let samplingRate = typeof codecSettings === 'object' ? codecSettings.samplingRate : null;\n    let channels = typeof codecSettings === 'object' ? codecSettings.channels : null;\n\n    if (codec === constants[type === 'audio' ? 'AUDIO_CODEC' : 'VIDEO_CODEC'].AUTO) {\n      logger.log.WARN([targetMid, 'RTCSessionDesription', sessionDescription.type, `Not preferring any codec for ${type} streaming. Using browser selection.`]);\n      return;\n    }\n\n    const mLine = sessionDescription.sdp.match(new RegExp('m=' + type + ' .*\\r\\n', 'gi'));\n\n    if (!(Array.isArray(mLine) && mLine.length > 0)) {\n      logger.log.ERROR([targetMid, 'RTCSessionDesription', sessionDescription.type, `Not preferring any codec for ${type} streaming as m= line is not found.`]);\n      return;\n    }\n\n    const setLineFn = (codecsList, isSROk, isChnlsOk) => {\n      if (Array.isArray(codecsList) && codecsList.length > 0) {\n        if (!isSROk) {\n          samplingRate = null;\n        }\n        if (!isChnlsOk) {\n          channels = null;\n        }\n        logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Preferring \"' + codec + '\" (samplingRate: ' + (samplingRate || 'n/a') + ', channels: ' + (channels || 'n/a') + ') for \"' + type + '\" streaming.']);\n\n        let line = mLine[0];\n        const lineParts = line.replace('\\r\\n', '').split(' ');\n        // Set the m=x x UDP/xxx\n        line = lineParts[0] + ' ' + lineParts[1] + ' ' + lineParts[2] + ' ';\n        // Remove them to leave the codecs only\n        lineParts.splice(0, 3);\n        // Loop for the codecs list to append first\n        for (let i = 0; i < codecsList.length; i += 1) {\n          const parts = (codecsList[i].split('a=rtpmap:')[1] || '').split(' ');\n          if (parts.length < 2) {\n            continue;\n          }\n          line += parts[0] + ' ';\n        }\n        // Loop for later fallback codecs to append\n        for (let j = 0; j < lineParts.length; j += 1) {\n          if (line.indexOf(' ' + lineParts[j]) > 0) {\n            lineParts.splice(j, 1);\n            j -= 1;\n          } else if (sessionDescription.sdp.match(new RegExp('a=rtpmap:' + lineParts[j] + '\\ ' + codec + '/.*\\r\\n', 'gi'))) {\n            line += lineParts[j] + ' ';\n            lineParts.splice(j, 1);\n            j -= 1;\n          }\n        }\n        // Append the rest of the codecs\n        line += lineParts.join(' ') + '\\r\\n';\n        sessionDescription.sdp = sessionDescription.sdp.replace(mLine[0], line);\n        return true;\n      }\n    };\n\n    // If samplingRate & channels\n    if (samplingRate) {\n      if (type === 'audio' && channels && setLineFn(sessionDescription.sdp.match(new RegExp('a=rtpmap:.*\\ '\n        + codec + '\\/' + samplingRate + (channels === 1 ? '[\\/1]*' : '\\/' + channels) + '\\r\\n', 'gi')), true, true)) {\n        return;\n      } else if (setLineFn(sessionDescription.sdp.match(new RegExp('a=rtpmap:.*\\ ' + codec + '\\/' + samplingRate + '[\\/]*.*\\r\\n', 'gi')), true)) {\n        return;\n      }\n    }\n    if (type === 'audio' && channels && setLineFn(sessionDescription.sdp.match(new RegExp('a=rtpmap:.*\\ ' + codec + '\\/.*\\/' + channels + '\\r\\n', 'gi')), false, true)) {\n      return;\n    }\n\n    setLineFn(sessionDescription.sdp.match(new RegExp('a=rtpmap:.*\\ ' + codec + '\\/.*\\r\\n', 'gi')));\n  };\n\n  parseFn('audio', overrideSettings ? overrideSettings.audio : initOptions.audioCodec);\n  parseFn('video', overrideSettings ? overrideSettings.video : initOptions.videoCodec);\n\n  return sessionDescription.sdp;\n};\n\nexport default setSDPCodec;\n","/* eslint-disable prefer-template */\n/* eslint-disable prefer-destructuring */\nimport Skylink from '../../index';\nimport logger from '../../logger';\n\n// alternative to munging is to implement RTCRtpSender.setParameters()\nconst setSDPBitrate = (targetMid, sessionDescription, roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const sdpLines = sessionDescription.sdp.split('\\r\\n');\n  const parseFn = function (type, bw) {\n    let mLineType = type;\n    let mLineIndex = -1;\n    let cLineIndex = -1;\n\n    if (type === 'data') {\n      mLineType = 'application';\n    }\n\n    for (let i = 0; i < sdpLines.length; i += 1) {\n      if (sdpLines[i].indexOf('m=' + mLineType) === 0) {\n        mLineIndex = i;\n      } else if (mLineIndex > 0) {\n        if (sdpLines[i].indexOf('m=') === 0) {\n          break;\n        }\n\n        if (sdpLines[i].indexOf('c=') === 0) {\n          cLineIndex = i;\n          // Remove previous b:AS settings\n        } else if (sdpLines[i].indexOf('b=AS:') === 0 || sdpLines[i].indexOf('b:TIAS:') === 0) {\n          sdpLines.splice(i, 1);\n          i -= 1;\n        }\n      }\n    }\n\n    if (!(typeof bw === 'number' && bw > 0)) {\n      logger.log.WARN([targetMid, 'RTCSessionDesription', sessionDescription.type, `Not limiting ${type} bandwidth`]);\n      return;\n    }\n\n    if (cLineIndex === -1) {\n      logger.log.ERROR([targetMid, 'RTCSessionDesription', sessionDescription.type, `Failed setting ${type} bandwidth as c-line is missing.`]);\n      return;\n    }\n\n    // Follow RFC 4566, that the b-line should follow after c-line.\n    logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, `Limiting maximum sending ${type} bandwidth ->`], bw);\n    sdpLines.splice(cLineIndex + 1, 0, window.webrtcDetectedBrowser === 'firefox' ? 'b=TIAS:' + (bw * 1000 * (window.webrtcDetectedVersion > 52 && window.webrtcDetectedVersion < 55 ? 1000 : 1)).toFixed(0) : 'b=AS:' + bw);\n  };\n\n  let bASAudioBw = state.streamsBandwidthSettings.bAS.audio;\n  let bASVideoBw = state.streamsBandwidthSettings.bAS.video;\n  let bASDataBw = state.streamsBandwidthSettings.bAS.data;\n  let googleXMinBw = state.streamsBandwidthSettings.googleX.min;\n  let googleXMaxBw = state.streamsBandwidthSettings.googleX.max;\n\n  if (state.peerCustomConfigs[targetMid]) {\n    if (state.peerCustomConfigs[targetMid].bandwidth\n      && typeof state.peerCustomConfigs[targetMid].bandwidth === 'object') {\n      if (typeof state.peerCustomConfigs[targetMid].bandwidth.audio === 'number') {\n        bASAudioBw = state.peerCustomConfigs[targetMid].bandwidth.audio;\n      }\n      if (typeof state.peerCustomConfigs[targetMid].bandwidth.video === 'number') {\n        bASVideoBw = state.peerCustomConfigs[targetMid].bandwidth.video;\n      }\n      if (typeof state.peerCustomConfigs[targetMid].bandwidth.data === 'number') {\n        bASDataBw = state.peerCustomConfigs[targetMid].bandwidth.data;\n      }\n    }\n    if (state.peerCustomConfigs[targetMid].googleXBandwidth && typeof state.peerCustomConfigs[targetMid].googleXBandwidth === 'object') {\n      if (typeof state.peerCustomConfigs[targetMid].googleXBandwidth.min === 'number') {\n        googleXMinBw = state.peerCustomConfigs[targetMid].googleXBandwidth.min;\n      }\n      if (typeof state.peerCustomConfigs[targetMid].googleXBandwidth.max === 'number') {\n        googleXMaxBw = state.peerCustomConfigs[targetMid].googleXBandwidth.max;\n      }\n    }\n  }\n\n  parseFn('audio', bASAudioBw);\n  parseFn('video', bASVideoBw);\n  parseFn('data', bASDataBw);\n\n  // Sets the experimental google bandwidth\n  if ((typeof googleXMinBw === 'number') || (typeof googleXMaxBw === 'number')) {\n    let codec = null;\n    let codecRtpMapLineIndex = -1;\n    let codecFmtpLineIndex = -1;\n\n    for (let j = 0; j < sdpLines.length; j += 1) {\n      if (sdpLines[j].indexOf('m=video') === 0) {\n        codec = sdpLines[j].split(' ')[3];\n      } else if (codec) {\n        if (sdpLines[j].indexOf('m=') === 0) {\n          break;\n        }\n\n        if (sdpLines[j].indexOf('a=rtpmap:' + codec + ' ') === 0) {\n          codecRtpMapLineIndex = j;\n        } else if (sdpLines[j].indexOf('a=fmtp:' + codec + ' ') === 0) {\n          sdpLines[j] = sdpLines[j].replace(/x-google-(min|max)-bitrate=[0-9]*[;]*/gi, '');\n          codecFmtpLineIndex = j;\n          break;\n        }\n      }\n    }\n\n    if (codecRtpMapLineIndex > -1) {\n      let xGoogleParams = '';\n\n      if (typeof googleXMinBw === 'number') {\n        xGoogleParams += 'x-google-min-bitrate=' + googleXMinBw + ';';\n      }\n\n      if (typeof googleXMaxBw === 'number') {\n        xGoogleParams += 'x-google-max-bitrate=' + googleXMaxBw + ';';\n      }\n\n      logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Limiting x-google-bitrate ->'], xGoogleParams);\n\n      if (codecFmtpLineIndex > -1) {\n        sdpLines[codecFmtpLineIndex] += (sdpLines[codecFmtpLineIndex].split(' ')[1] ? ';' : '') + xGoogleParams;\n      } else {\n        sdpLines.splice(codecRtpMapLineIndex + 1, 0, 'a=fmtp:' + codec + ' ' + xGoogleParams);\n      }\n    }\n  }\n\n  return sdpLines.join('\\r\\n');\n};\n\nexport default setSDPBitrate;\n","/* eslint-disable prefer-template,no-param-reassign */\nimport PeerData from '../../peer-data';\nimport Skylink from '../../index';\nimport logger from '../../logger';\n\nconst removeSDPCodecs = (targetMid, sessionDescription, roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  const audioSettings = PeerData.getCurrentSessionInfo(state.room).settings.audio;\n  const initOptions = Skylink.getInitOptions();\n\n  const parseFn = (type, codec) => {\n    const payloadList = sessionDescription.sdp.match(new RegExp('a=rtpmap:(\\\\d*)\\\\ ' + codec + '.*', 'gi'));\n\n    if (!(Array.isArray(payloadList) && payloadList.length > 0)) {\n      logger.log.WARN([targetMid, 'RTCSessionDesription', sessionDescription.type, `Not removing ${codec} as it does not exists.`]);\n      return;\n    }\n\n    for (let i = 0; i < payloadList.length; i += 1) {\n      const payload = payloadList[i].split(' ')[0].split(':')[1];\n\n      logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type,\n        'Removing \"' + codec + '\" payload ->'], payload);\n\n      sessionDescription.sdp = sessionDescription.sdp.replace(new RegExp('a=rtpmap:' + payload + '\\\\ .*\\\\r\\\\n', 'g'), '');\n      sessionDescription.sdp = sessionDescription.sdp.replace(new RegExp('a=fmtp:' + payload + '\\\\ .*\\\\r\\\\n', 'g'), '');\n      sessionDescription.sdp = sessionDescription.sdp.replace(new RegExp('a=rtpmap:\\\\d+ rtx\\\\/\\\\d+\\\\r\\\\na=fmtp:\\\\d+ apt=' + payload + '\\\\r\\\\n', 'g'), '');\n\n      // Remove the m-line codec\n      const sdpLines = sessionDescription.sdp.split('\\r\\n');\n\n      for (let j = 0; j < sdpLines.length; j += 1) {\n        if (sdpLines[j].indexOf('m=' + type) === 0) {\n          const parts = sdpLines[j].split(' ');\n\n          if (parts.indexOf(payload) >= 3) {\n            parts.splice(parts.indexOf(payload), 1);\n          }\n\n          sdpLines[j] = parts.join(' ');\n          break;\n        }\n      }\n\n      sessionDescription.sdp = sdpLines.join('\\r\\n');\n    }\n  };\n\n  if (initOptions.disableVideoFecCodecs) {\n    if (state.hasMCU) {\n      logger.log.WARN([targetMid, 'RTCSessionDesription', sessionDescription.type,\n        'Not removing \"ulpfec\" or \"red\" codecs as connected to MCU to prevent connectivity issues.']);\n    } else {\n      parseFn('video', 'red');\n      parseFn('video', 'ulpfec');\n    }\n  }\n\n  if (initOptions.disableComfortNoiseCodec && audioSettings && typeof audioSettings === 'object' && audioSettings.stereo) {\n    parseFn('audio', 'CN');\n  }\n\n  if (window.webrtcDetectedBrowser === 'edge' && (((state.peerInformations[targetMid] || {}).agent || {}).name || 'unknown').name !== 'edge') {\n    // eslint-disable-next-line no-useless-escape\n    sessionDescription.sdp = sessionDescription.sdp.replace(/a=rtcp-fb:.*\\ x-message\\ .*\\r\\n/gi, '');\n  }\n\n  return sessionDescription.sdp;\n};\n\nexport default removeSDPCodecs;\n","import Skylink from '../../index';\nimport logger from '../../logger';\n\nconst removeSDPREMBPackets = (targetMid, sessionDescription) => {\n  const initOptions = Skylink.getInitOptions();\n  if (!initOptions.disableREMB) {\n    return sessionDescription.sdp;\n  }\n\n  logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Removing REMB packets.']);\n  return sessionDescription.sdp.replace(/a=rtcp-fb:\\d+ goog-remb\\r\\n/g, '');\n};\n\nexport default removeSDPREMBPackets;\n","/* eslint-disable no-continue,no-nested-ternary */\nimport clone from 'clone';\nimport Skylink from '../../index';\nimport logger from '../../logger';\nimport PeerData from '../../peer-data';\nimport { PEER_TYPE, BUNDLE_POLICY, HANDSHAKE_PROGRESS } from '../../constants';\nimport SessionDescription from '../index';\n\nconst handleSDPConnectionSettings = (targetMid, sessionDescription, roomKey, direction) => {\n  const state = Skylink.getSkylinkState(roomKey);\n\n  if (!state.sdpSessions[targetMid]) {\n    return sessionDescription.sdp;\n  }\n\n  const sessionDescriptionStr = sessionDescription.sdp;\n  const sdpLines = sessionDescriptionStr.split('\\r\\n');\n  const peerAgent = ((state.peerInformations[targetMid] || {}).agent || {}).name || '';\n  const bundleLineMids = [];\n  const settings = clone(state.sdpSettings);\n  let mediaType = '';\n  let bundleLineIndex = -1;\n  let mLineIndex = -1;\n\n  if (targetMid === PEER_TYPE.MCU) {\n    settings.connection.audio = true;\n    settings.connection.video = true;\n    settings.connection.data = true;\n  }\n\n  // Patches for MCU sending empty video stream despite audio+video is not sending at all\n  // Apply as a=inactive when supported\n  if (state.hasMCU) {\n    const peerStreamSettings = clone(PeerData.getPeerInfo(targetMid, state.room)).settings || {};\n    settings.direction.audio.receive = targetMid === PEER_TYPE.MCU ? true : !!peerStreamSettings.audio;\n    settings.direction.audio.send = targetMid === PEER_TYPE.MCU;\n    settings.direction.video.receive = targetMid === PEER_TYPE.MCU ? true : !!peerStreamSettings.video;\n    settings.direction.video.send = targetMid === PEER_TYPE.MCU;\n  }\n\n  if (direction === 'remote') {\n    const offerCodecs = SessionDescription.getSDPCommonSupports(targetMid, sessionDescription, roomKey);\n\n    if (!offerCodecs.audio) {\n      settings.connection.audio = false;\n    }\n\n    if (!offerCodecs.video) {\n      settings.connection.video = false;\n    }\n  }\n\n  // ANSWERER: Reject only the m= lines. Returned rejected m= lines as well.\n  // OFFERER: Remove m= lines\n\n  state.sdpSessions[targetMid][direction].mLines = [];\n  state.sdpSessions[targetMid][direction].bundleLine = '';\n  state.sdpSessions[targetMid][direction].connection = {\n    audio: null,\n    video: null,\n    data: null,\n  };\n\n  for (let i = 0; i < sdpLines.length; i += 1) {\n    // Cache the a=group:BUNDLE line used for remote answer from Edge later\n    if (sdpLines[i].indexOf('a=group:BUNDLE') === 0) {\n      state.sdpSessions[targetMid][direction].bundleLine = sdpLines[i];\n      bundleLineIndex = i;\n\n      // Check if there's a need to reject m= line\n    } else if (sdpLines[i].indexOf('m=') === 0) {\n      mediaType = (sdpLines[i].split('m=')[1] || '').split(' ')[0] || '';\n      mediaType = mediaType === 'application' ? 'data' : mediaType;\n      mLineIndex += 1;\n\n      state.sdpSessions[targetMid][direction].mLines[mLineIndex] = sdpLines[i];\n\n      // Check if there is missing unsupported video codecs support and reject it regardles of MCU Peer or not\n      if (!settings.connection[mediaType]) {\n        logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, `Removing rejected m=${mediaType} line ->`], sdpLines[i]);\n\n        // Check if answerer and we do not have the power to remove the m line if index is 0\n        // Set as a=inactive because we do not have that power to reject it somehow.\n        // first m= line cannot be rejected for BUNDLE\n        if (state.peerConnectionConfig.bundlePolicy === BUNDLE_POLICY.MAX_BUNDLE && bundleLineIndex > -1 && mLineIndex === 0 && (direction === 'remote' ? sessionDescription.type === HANDSHAKE_PROGRESS.OFFER : sessionDescription.type === HANDSHAKE_PROGRESS.ANSWER)) {\n          logger.log.WARN([targetMid, 'RTCSessionDesription', sessionDescription.type, `Not removing rejected m='${mediaType} line ->`], sdpLines[i]);\n          settings.connection[mediaType] = true;\n          if (['audio', 'video'].indexOf(mediaType) > -1) {\n            settings.direction[mediaType].send = false;\n            settings.direction[mediaType].receive = false;\n          }\n          continue;\n        }\n\n        if (window.webrtcDetectedBrowser === 'edge') {\n          sdpLines.splice(i, 1);\n          i -= 1;\n          continue;\n        } else if (direction === 'remote' || sessionDescription.type === HANDSHAKE_PROGRESS.ANSWER) {\n          const parts = sdpLines[i].split(' ');\n          parts[1] = 0;\n          sdpLines[i] = parts.join(' ');\n          continue;\n        }\n      }\n    }\n\n    if (mediaType) {\n      // Remove lines if we are rejecting the media and ensure unless (rejectVideoMedia is true), MCU has to enable those m= lines\n      if (!settings.connection[mediaType]) {\n        sdpLines.splice(i, 1);\n        i -= 1;\n\n        // Store the mids session description\n      } else if (sdpLines[i].indexOf('a=mid:') === 0) {\n        bundleLineMids.push(sdpLines[i].split('a=mid:')[1] || '');\n\n        // Configure direction a=sendonly etc for local sessiondescription\n      } else if (mediaType && ['a=sendrecv', 'a=sendonly', 'a=recvonly'].indexOf(sdpLines[i]) > -1) {\n        if (['audio', 'video'].indexOf(mediaType) === -1) {\n          state.sdpSessions[targetMid][direction].connection.data = sdpLines[i];\n          continue;\n        }\n\n        if (direction === 'local') {\n          if (settings.direction[mediaType].send && !settings.direction[mediaType].receive) {\n            sdpLines[i] = sdpLines[i].indexOf('send') > -1 ? 'a=sendonly' : 'a=inactive';\n          } else if (!settings.direction[mediaType].send && settings.direction[mediaType].receive) {\n            sdpLines[i] = sdpLines[i].indexOf('recv') > -1 ? 'a=recvonly' : 'a=inactive';\n          } else if (!settings.direction[mediaType].send && !settings.direction[mediaType].receive) {\n            // MCU currently does not support a=inactive flag.. what do we do here?\n            sdpLines[i] = 'a=inactive';\n          }\n\n          // Handle Chrome bundle bug. - See: https://bugs.chromium.org/p/webrtc/issues/detail?id=6280\n          if (!state.hasMCU && window.webrtcDetectedBrowser !== 'firefox' && peerAgent === 'firefox'\n            && sessionDescription.type === HANDSHAKE_PROGRESS.OFFER && sdpLines[i] === 'a=recvonly') {\n            logger.log.WARN([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Overriding any original settings to receive only to send and receive to resolve chrome BUNDLE errors.']);\n            sdpLines[i] = 'a=sendrecv';\n            settings.direction[mediaType].send = true;\n            settings.direction[mediaType].receive = true;\n          }\n          // Patch for incorrect responses\n        } else if (sessionDescription.type === HANDSHAKE_PROGRESS.ANSWER) {\n          const localOfferRes = state.sdpSessions[targetMid].local.connection[mediaType];\n          // Parse a=sendonly response\n          if (localOfferRes === 'a=sendonly') {\n            sdpLines[i] = ['a=inactive', 'a=recvonly'].indexOf(sdpLines[i]) === -1 ? (sdpLines[i] === 'a=sendonly' ? 'a=inactive' : 'a=recvonly') : sdpLines[i];\n            // Parse a=recvonly\n          } else if (localOfferRes === 'a=recvonly') {\n            sdpLines[i] = ['a=inactive', 'a=sendonly'].indexOf(sdpLines[i]) === -1 ? (sdpLines[i] === 'a=recvonly' ? 'a=inactive' : 'a=sendonly') : sdpLines[i];\n            // Parse a=sendrecv\n          } else if (localOfferRes === 'a=inactive') {\n            sdpLines[i] = 'a=inactive';\n          }\n        }\n        state.sdpSessions[targetMid][direction].connection[mediaType] = sdpLines[i];\n      }\n    }\n\n    // Remove weird empty characters for Edge case.. :(\n    // eslint-disable-next-line\n    if (!(sdpLines[i] || '').replace(/\\n|\\r|\\s|\\ /gi, '')) {\n      sdpLines.splice(i, 1);\n      i -= 1;\n    }\n  }\n\n  // Fix chrome \"offerToReceiveAudio\" local offer not removing audio BUNDLE\n  if (bundleLineIndex > -1) {\n    if (state.peerConnectionConfig.bundlePolicy === BUNDLE_POLICY.MAX_BUNDLE) {\n      // eslint-disable-next-line\n      sdpLines[bundleLineIndex] = 'a=group:BUNDLE ' + bundleLineMids.join(' ');\n      // Remove a=group:BUNDLE line\n    } else if (state.peerConnectionConfig.bundlePolicy === BUNDLE_POLICY.NONE) {\n      sdpLines.splice(bundleLineIndex, 1);\n    }\n  }\n\n  // Append empty space below\n  if (window.webrtcDetectedBrowser !== 'edge') {\n    if (!sdpLines[sdpLines.length - 1].replace(/\\n|\\r|\\s/gi, '')) {\n      sdpLines[sdpLines.length - 1] = '';\n    } else {\n      sdpLines.push('');\n    }\n  }\n\n  logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Handling connection lines and direction ->'], settings);\n\n  return sdpLines.join('\\r\\n');\n};\n\nexport default handleSDPConnectionSettings;\n","import logger from '../../logger';\n\nconst removeSDPFirefoxH264Pref = (targetMid, sessionDescription) => {\n  logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Removing Firefox experimental H264 flag to ensure interopability reliability']);\n  return sessionDescription.sdp.replace(/a=fmtp:0 profile-level-id=0x42e00c;packetization-mode=1\\r\\n/g, '');\n};\n\nexport default removeSDPFirefoxH264Pref;\n","/* eslint-disable prefer-template */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable consistent-return */\nimport Skylink from '../../index';\nimport logger from '../../logger';\nimport * as constants from '../../constants';\n\nconst renderSDPOutput = (targetMid, sessionDescription, roomKey) => {\n  const state = Skylink.getSkylinkState(roomKey);\n  let localStream = null;\n  let localStreamId = null;\n\n  if (!(sessionDescription && sessionDescription.sdp)) {\n    return;\n  }\n\n  if (!state.peerConnections[targetMid]) {\n    return sessionDescription.sdp;\n  }\n\n  if (state.peerConnections[targetMid].localStream) {\n    localStream = state.peerConnections[targetMid].localStream;\n    localStreamId = state.peerConnections[targetMid].localStreamId || state.peerConnections[targetMid].localStream.id;\n  }\n\n  const sdpLines = sessionDescription.sdp.split('\\r\\n');\n  // Parse and replace with the correct msid to prevent unwanted streams.\n  // Making it simple without replacing with the track IDs or labels, neither setting prefixing \"mslabel\" and \"label\" as required labels.\n  if (localStream) {\n    let mediaType = '';\n\n    for (let i = 0; i < sdpLines.length; i += 1) {\n      if (sdpLines[i].indexOf('m=') === 0) {\n        mediaType = (sdpLines[i].split('m=')[1] || '').split(' ')[0] || '';\n        mediaType = ['audio', 'video'].indexOf(mediaType) === -1 ? '' : mediaType;\n      } else if (mediaType) {\n        if (sdpLines[i].indexOf('a=msid:') === 0) {\n          const msidParts = sdpLines[i].split(' ');\n          msidParts[0] = 'a=msid:' + localStreamId;\n          sdpLines[i] = msidParts.join(' ');\n        } else if (sdpLines[i].indexOf('a=ssrc:') === 0) {\n          let ssrcParts = null;\n\n          // Replace for \"msid:\" and \"mslabel:\"\n          if (sdpLines[i].indexOf(' msid:') > 0) {\n            ssrcParts = sdpLines[i].split(' msid:');\n          } else if (sdpLines[i].indexOf(' mslabel:') > 0) {\n            ssrcParts = sdpLines[i].split(' mslabel:');\n          }\n\n          if (ssrcParts) {\n            const ssrcMsidParts = (ssrcParts[1] || '').split(' ');\n            ssrcMsidParts[0] = localStreamId;\n            ssrcParts[1] = ssrcMsidParts.join(' ');\n\n            if (sdpLines[i].indexOf(' msid:') > 0) {\n              sdpLines[i] = ssrcParts.join(' msid:');\n            } else if (sdpLines[i].indexOf(' mslabel:') > 0) {\n              sdpLines[i] = ssrcParts.join(' mslabel:');\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Replace the bundle policy to prevent complete removal of m= lines for some cases that do not accept missing m= lines except edge.\n  if (sessionDescription.type === constants.HANDSHAKE_PROGRESS.ANSWER && state.sdpSessions[targetMid]) {\n    let mLineIndex = -1;\n\n    for (let j = 0; j < sdpLines.length; j += 1) {\n      if (sdpLines[j].indexOf('a=group:BUNDLE') === 0 && state.sdpSessions[targetMid].remote.bundleLine && state.peerConnectionConfig.bundlePolicy === constants.BUNDLE_POLICY.MAX_BUNDLE) {\n        sdpLines[j] = state.sdpSessions[targetMid].remote.bundleLine;\n      } else if (sdpLines[j].indexOf('m=') === 0) {\n        mLineIndex += 1;\n        const compareA = sdpLines[j].split(' ');\n        const compareB = (state.sdpSessions[targetMid].remote.mLines[mLineIndex] || '').split(' ');\n\n        if (compareA[0] && compareB[0] && compareA[0] !== compareB[0]) {\n          compareB[1] = 0;\n          logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Appending middle rejected m= line ->'], compareB.join(' '));\n          sdpLines.splice(j, 0, compareB.join(' '));\n          j += 1;\n          mLineIndex += 1;\n        }\n      }\n    }\n\n    while (state.sdpSessions[targetMid].remote.mLines[mLineIndex + 1]) {\n      mLineIndex += 1;\n      let appendIndex = sdpLines.length;\n      if (!sdpLines[appendIndex - 1].replace(/\\s/gi, '')) {\n        appendIndex -= 1;\n      }\n      const parts = (state.sdpSessions[targetMid].remote.mLines[mLineIndex] || '').split(' ');\n      parts[1] = 0;\n      logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type,\n        'Appending later rejected m= line ->'], parts.join(' '));\n      sdpLines.splice(appendIndex, 0, parts.join(' '));\n    }\n  }\n\n  // Ensure for chrome case to have empty \"\" at last line or it will return invalid SDP errors\n  if (window.webrtcDetectedBrowser === 'edge' && sessionDescription.type === constants.HANDSHAKE_PROGRESS.OFFER && !sdpLines[sdpLines.length - 1].replace(/\\s/gi, '')) {\n    logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type, 'Removing last empty space for Edge browsers']);\n    sdpLines.splice(sdpLines.length - 1, 1);\n  }\n\n  logger.log.INFO([targetMid, 'RTCSessionDescription', sessionDescription.type, 'Formatted output ->'], sdpLines.join('\\r\\n'));\n\n  return sdpLines.join('\\r\\n');\n};\n\nexport default renderSDPOutput;\n","import logger from '../../logger/index';\n\nconst getSDPICECandidates = (targetMid, sessionDescription, beSilentOnParseLogs) => {\n  const { RTCIceCandidate } = window;\n  // TODO: implement getSDPICECandidates\n  const candidates = {\n    host: [],\n    srflx: [],\n    relay: [],\n  };\n\n  if (!(sessionDescription && sessionDescription.sdp)) {\n    return candidates;\n  }\n\n  sessionDescription.sdp.split('m=').forEach((mediaItem, index) => {\n    // Ignore the v=0 lines etc..\n    if (index === 0) {\n      return;\n    }\n\n    // Remove a=mid: and \\r\\n\n    const sdpMid = ((mediaItem.match(/a=mid:.*\\r\\n/gi) || [])[0] || '').replace(/a=mid:/gi, '').replace(/\\r\\n/, '');\n    const sdpMLineIndex = index - 1;\n\n    (mediaItem.match(/a=candidate:.*\\r\\n/gi) || []).forEach((item) => {\n      // Remove \\r\\n for candidate type being set at the end of candidate DOM string.\n      const canType = (item.split(' ')[7] || 'host').replace(/\\r\\n/g, '');\n      candidates[canType] = candidates[canType] || [];\n      candidates[canType].push(new RTCIceCandidate({\n        sdpMid,\n        sdpMLineIndex,\n        // Remove initial \"a=\" in a=candidate\n        candidate: (item.split('a=')[1] || '').replace(/\\r\\n/g, ''),\n      }));\n    });\n  });\n\n  if (!beSilentOnParseLogs) {\n    logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type,\n      'Parsing session description ICE candidates ->'], candidates);\n  }\n\n  return candidates;\n};\n\nexport default getSDPICECandidates;\n","/* eslint-disable prefer-destructuring,no-continue */\nimport logger from '../../logger/index';\n\nconst getSDPSelectedCodec = (targetMid, sessionDescription, type, beSilentOnParseLogs) => {\n  // TODO implement getSDPSelectedCodec\n  const codecInfo = {\n    name: null,\n    implementation: null,\n    clockRate: null,\n    channels: null,\n    payloadType: null,\n    params: null,\n  };\n\n  if (!(sessionDescription && sessionDescription.sdp)) {\n    return codecInfo;\n  }\n\n  sessionDescription.sdp.split('m=').forEach((mediaItem, index) => {\n    if (index === 0 || mediaItem.indexOf(`${type} `) !== 0) {\n      return;\n    }\n\n    const codecs = (mediaItem.split('\\r\\n')[0] || '').split(' ');\n    // Remove audio[0] 65266[1] UDP/TLS/RTP/SAVPF[2]\n    codecs.splice(0, 3);\n\n    for (let i = 0; i < codecs.length; i += 1) {\n      const match = mediaItem.match(new RegExp(`a=rtpmap:${codecs[i]}.*\\r\\n`, 'gi'));\n\n      if (!match) {\n        continue;\n      }\n\n      // Format: codec/clockRate/channels\n      const parts = ((match[0] || '').replace(/\\r\\n/g, '').split(' ')[1] || '').split('/');\n\n      // Ignore rtcp codecs, dtmf or comfort noise\n      if (['red', 'ulpfec', 'telephone-event', 'cn', 'rtx'].indexOf(parts[0].toLowerCase()) > -1) {\n        continue;\n      }\n\n      codecInfo.name = parts[0];\n      codecInfo.clockRate = parseInt(parts[1], 10) || 0;\n      codecInfo.channels = parseInt(parts[2] || '1', 10) || 1;\n      codecInfo.payloadType = parseInt(codecs[i], 10);\n      codecInfo.params = '';\n\n      // Get the list of codec parameters\n      const params = mediaItem.match(new RegExp(`a=fmtp:${codecs[i]}.*\\r\\n`, 'gi')) || [];\n      params.forEach((paramItem) => {\n        codecInfo.params += paramItem.replace(new RegExp(`a=fmtp:${codecs[i]}`, 'gi'), '').replace(/ /g, '').replace(/\\r\\n/g, '');\n      });\n      break;\n    }\n  });\n\n  if (!beSilentOnParseLogs) {\n    logger.log.INFO([targetMid, 'RTCSessionDesription', sessionDescription.type,\n      `Parsing session description \"${type}\" codecs ->`], codecInfo);\n  }\n\n  return codecInfo;\n};\n\nexport default getSDPSelectedCodec;\n","import Skylink from '../../index';\n\n/**\n * Function sets the original DTLS role which was negotiated on first offer/ansswer exchange\n * This needs to be done until https://bugzilla.mozilla.org/show_bug.cgi?id=1240897 is released in Firefox 68\n * Estimated release date for Firefox 68 : 2019-07-09 (https://wiki.mozilla.org/Release_Management/Calendar)\n * @private\n */\nconst setOriginalDTLSRole = (state, sessionDescription, isRemote) => {\n  const { room } = state;\n  const { type } = sessionDescription;\n  const invertRoleMap = { active: 'passive', passive: 'active' };\n  const aSetupPattern = sessionDescription.sdp.match(/a=setup:([a-z]+)/);\n\n  if (state.originalDTLSRole !== null || type === 'offer') {\n    return;\n  }\n\n  if (!aSetupPattern) {\n    return;\n  }\n\n  const role = aSetupPattern[1];\n  // eslint-disable-next-line\n  state.originalDTLSRole = isRemote ? invertRoleMap[role] : role;\n  Skylink.setSkylinkState(state, room.id);\n};\n\nexport default setOriginalDTLSRole;\n","/* eslint-disable no-param-reassign */\n/**\n * Function that modifies the DTLS role in answer sdp\n * This needs to be done until https://bugzilla.mozilla.org/show_bug.cgi?id=1240897 is released in Firefox 68\n * Estimated release date for Firefox 68 : 2019-07-09 (https://wiki.mozilla.org/Release_Management/Calendar)\n * @private\n */\nconst modifyDTLSRole = (state, sessionDescription) => {\n  const { originalDTLSRole } = state;\n  const { type } = sessionDescription;\n\n  if (originalDTLSRole === null || type === 'offer') {\n    return sessionDescription.sdp;\n  }\n\n  sessionDescription.sdp = sessionDescription.sdp.replace(/a=setup:[a-z]+/g, `a=setup:${originalDTLSRole}`);\n\n  return sessionDescription.sdp;\n};\n\nexport default modifyDTLSRole;\n","/* eslint-disable prefer-destructuring */\nimport logger from '../../logger';\n\nconst getTransceiverMid = (sessionDescription, beSilentOnParseLogs) => {\n  const results = {\n    audio: [],\n    video: [],\n  };\n\n  sessionDescription.sdp.split('m=').forEach((mediaItem, index) => {\n    const msidLines = mediaItem.split(/\\n/);\n    const mediaType = msidLines[0].split(' ')[0];\n    if (mediaType === 'application' || index === 0) {\n      return;\n    }\n    let parsedMline = {};\n    for (let i = 0; i < msidLines.length; i += 1) {\n      if (msidLines[i].match(/a=recvonly|a=sendonly|a=sendrecv|a=inactive/)) {\n        const array = msidLines[i].split('=');\n        parsedMline.direction = array[1].trim();\n      }\n\n      if (msidLines[i].match(/a=mid:*/)) {\n        parsedMline.transceiverMid = msidLines[i].split(/:/)[1].trim();\n      }\n      if (msidLines[i].match(/a=msid:([\\w|-|{]+)/)) { // include '{' character for firefox sdp parsing\n        const array = msidLines[i].split(' ');\n        const firstItem = array[0].split(/:/)[1].trim();\n        parsedMline.streamId = firstItem === '-' ? '' : firstItem;\n        parsedMline.trackId = array[1].trim();\n      }\n      if (parsedMline.transceiverMid && parsedMline.streamId && parsedMline.trackId) {\n        results[mediaType].push(parsedMline);\n        parsedMline = {};\n      }\n    }\n  });\n\n  if (!beSilentOnParseLogs) {\n    logger.log.INFO([null, 'RTCSessionDesription', sessionDescription.type,\n      `Parsing session description \"${sessionDescription.type}\" transceivers ->`], results);\n  }\n\n  return results;\n};\n\nexport default getTransceiverMid;\n","import helpers from './helpers/index';\n\nclass SessionDescription {\n  static getSDPCommonSupports(...args) {\n    return helpers.getSDPCommonSupports(...args);\n  }\n\n  static getCodecsSupport(...args) {\n    return helpers.getCodecsSupport(...args);\n  }\n\n  static setSDPCodecParams(...args) {\n    return helpers.setSDPCodecParams(...args);\n  }\n\n  static removeSDPFilteredCandidates(...args) {\n    return helpers.removeSDPFilteredCandidates(...args);\n  }\n\n  static setSDPCodec(...args) {\n    return helpers.setSDPCodec(...args);\n  }\n\n  static setSDPBitrate(...args) {\n    return helpers.setSDPBitrate(...args);\n  }\n\n  static removeSDPCodecs(...args) {\n    return helpers.removeSDPCodecs(...args);\n  }\n\n  static removeSDPREMBPackets(...args) {\n    return helpers.removeSDPREMBPackets(...args);\n  }\n\n  static handleSDPConnectionSettings(...args) {\n    return helpers.handleSDPConnectionSettings(...args);\n  }\n\n  static removeSDPUnknownAptRtx(...args) {\n    return helpers.removeSDPUnknownAptRtx(...args);\n  }\n\n  static getSDPCodecsSupport(...args) {\n    return helpers.getSDPCodecsSupport(...args);\n  }\n\n  static removeSDPFirefoxH264Pref(...args) {\n    return helpers.removeSDPFirefoxH264Pref(...args);\n  }\n\n  static renderSDPOutput(...args) {\n    return helpers.renderSDPOutput(...args);\n  }\n\n  static getSDPICECandidates(...args) {\n    return helpers.getSDPICECandidates(...args);\n  }\n\n  static getSDPSelectedCodec(...args) {\n    return helpers.getSDPSelectedCodec(...args);\n  }\n\n  static setOriginalDTLSRole(...args) {\n    return helpers.setOriginalDTLSRole(...args);\n  }\n\n  static modifyDTLSRole(...args) {\n    return helpers.modifyDTLSRole(...args);\n  }\n\n  static getTransceiverMid(...args) {\n    return helpers.getTransceiverMid(...args);\n  }\n}\n\nexport default SessionDescription;\n","/* eslint-disable prefer-destructuring */\nimport parsers from './index';\nimport { BROWSER_AGENT } from '../../../../constants';\n\nconst formatCanTypeFn = (type) => {\n  if (type === 'relay') {\n    return 'relayed';\n  } if (type === 'host' || type.indexOf('host') > -1) {\n    return 'local';\n  } if (type === 'srflx') {\n    return 'serverreflexive';\n  } if (type === 'prflx') {\n    return 'peerreflexive';\n  }\n  return type;\n};\n\n/**\n * Function that parses the raw stats from the RTCIceCandidatePairStats dictionary.\n * @param {SkylinkState} roomState - The room state.\n * @param {Object} output - Stats output object that stores the parsed stats values.\n * @param {RTCPeerConnection} peerConnection - The peer connection.\n * @param {String} peerId - The peer Id.\n * @param {boolean} isAutoBwStats - The flag if auto bandwidth adjustment is true.\n * @memberOf PeerConnectionStatisticsParsers\n */\nconst parseSelectedCandidatePair = (roomState, output, type, value, peerConnection, peerId, isAutoBwStats) => {\n  const { peerBandwidth, peerStats } = roomState;\n  const { raw, selectedCandidatePair } = output;\n  const { AdapterJS } = window;\n\n  const keys = Object.keys(output.raw);\n  let transportStats = null;\n  let selectedLocalCandidateId = null;\n  let selectedRemoteCandidateId = null;\n\n  if (AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.CHROME) {\n    // selectedCandidatePairId can only be obtained from RTCTransportStats and is needed to identify selected candidate pair\n    for (let i = 0; i < keys.length; i += 1) {\n      if (raw[keys[i]].type === 'transport') {\n        transportStats = raw[keys[i]];\n      }\n    }\n  } else if (AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.FIREFOX) {\n    // FF has not implemented RTCTransportStats report and uses .selected available in the  'candidate-pair' stats report\n    transportStats = {};\n  }\n\n  if (transportStats) {\n    for (let i = 0; i < keys.length; i += 1) {\n      const statsReport = raw[keys[i]];\n      if ((statsReport.type === 'candidate-pair' && statsReport.id === transportStats.selectedCandidatePairId) || (statsReport.type === 'candidate-pair' && statsReport.selected)) {\n        const candidatePairStats = statsReport;\n        selectedLocalCandidateId = candidatePairStats.localCandidateId;\n        selectedRemoteCandidateId = candidatePairStats.remoteCandidateId;\n\n        selectedCandidatePair.id = candidatePairStats.id;\n        selectedCandidatePair.writable = candidatePairStats.writable;\n        selectedCandidatePair.priority = candidatePairStats.priority;\n        selectedCandidatePair.nominated = candidatePairStats.nominated;\n\n        const prevStats = isAutoBwStats ? peerBandwidth[peerId][statsReport.id] : peerStats[peerId][statsReport.id];\n        // FF has not implemented the following stats\n        const totalRoundTripTime = parseInt(statsReport.totalRoundTripTime || '0', 10);\n        selectedCandidatePair.totalRoundTripTime = totalRoundTripTime;\n        selectedCandidatePair.roundTripTime = parsers.tabulateStats(prevStats, statsReport, 'totalRoundTripTime');\n\n        const consentRequestsSent = parseInt(statsReport.consentRequestsSent || '0', 10);\n        selectedCandidatePair.consentRequests.totalSent = consentRequestsSent;\n        selectedCandidatePair.consentRequests.sent = parsers.tabulateStats(prevStats, statsReport, 'consentRequestsSent');\n\n        const requestsReceived = parseInt(statsReport.requestsReceived || '0', 10);\n        selectedCandidatePair.requests.totalReceived = requestsReceived;\n        selectedCandidatePair.requests.received = parsers.tabulateStats(prevStats, statsReport, 'requestsReceived');\n\n        const requestsSent = parseInt(statsReport.requestsSent || '0', 10);\n        selectedCandidatePair.requests.totalSent = requestsSent;\n        selectedCandidatePair.requests.sent = parsers.tabulateStats(prevStats, statsReport, 'requestsSent');\n\n        const responsesSent = parseInt(statsReport.responsesSent || '0', 10);\n        selectedCandidatePair.responses.totalSent = responsesSent;\n        selectedCandidatePair.responses.sent = parsers.tabulateStats(prevStats, statsReport, 'responsesSent');\n\n        const responsesReceived = parseInt(statsReport.responsesReceived || '0', 10);\n        selectedCandidatePair.responses.totalReceived = responsesReceived;\n        selectedCandidatePair.responses.received = parsers.tabulateStats(prevStats, statsReport, 'responsesReceived');\n      }\n    }\n  }\n\n  if (selectedLocalCandidateId && selectedRemoteCandidateId) {\n    if (type === 'remote-candidate') {\n      const remoteCandidateStats = value;\n      if (remoteCandidateStats.id === selectedRemoteCandidateId) {\n        // FF uses address instead of ip\n        selectedCandidatePair.remote.ipAddress = remoteCandidateStats.ip ? remoteCandidateStats.ip : remoteCandidateStats.address;\n        selectedCandidatePair.remote.portNumber = remoteCandidateStats.port;\n        selectedCandidatePair.remote.transport = remoteCandidateStats.protocol;\n        selectedCandidatePair.remote.priority = remoteCandidateStats.priority;\n        selectedCandidatePair.remote.candidateType = formatCanTypeFn(remoteCandidateStats.candidateType);\n      }\n    }\n\n    if (type === 'local-candidate') {\n      const localCandidateStats = value;\n      if (localCandidateStats.id === selectedLocalCandidateId) {\n        selectedCandidatePair.local.ipAddress = localCandidateStats.ip ? localCandidateStats.ip : localCandidateStats.address;\n        selectedCandidatePair.local.portNumber = localCandidateStats.port;\n        selectedCandidatePair.local.transport = localCandidateStats.protocol;\n        selectedCandidatePair.local.priority = localCandidateStats.priority;\n        selectedCandidatePair.local.networkType = localCandidateStats.networkType;\n        selectedCandidatePair.local.candidateType = formatCanTypeFn(localCandidateStats.candidateType);\n      }\n    }\n  }\n};\n\nexport default parseSelectedCandidatePair;\n","import parseSelectedCandidatePair from './parseSelectedCandidatePair';\nimport parseCertificates from './parseCertificates';\nimport tabulateStats from './tabulateStats';\nimport parseAudio from './parseAudio';\nimport parseVideo from './parseVideo';\nimport parseMedia from './parseMedia';\n\n/**\n * @namespace PeerConnectionStatisticsParsers\n * @description Parser functions for PeerConnectionStatistics\n * @private\n * @type {{parseVideo: parseVideo, parseAudio: parseAudio, tabulateStats: tabulateStats, parseSelectedCandidatePair: parseSelectedCandidatePair, parseCertificates: parseCertificates, parseMedia: parseMedia}}\n */\nconst parsers = {\n  parseSelectedCandidatePair,\n  parseCertificates,\n  tabulateStats,\n  parseAudio,\n  parseVideo,\n  parseMedia,\n};\n\nexport default parsers;\n","/**\n * Function that parses the raw stats from the RTCCertificateStats dictionary.\n * @param {Object} output - Stats output object that stores the parsed stats values.\n * @param {Object} stats - Stats object.\n * @memberOf PeerConnectionStatisticsParsers\n */\nconst parseCertificates = (output, stats) => {\n  const { certificate, raw } = output;\n  const keys = Object.keys(output.raw);\n  let transportStats = null;\n\n  for (let i = 0; i < keys.length; i += 1) {\n    if (raw[keys[i]].type === 'transport') {\n      transportStats = raw[keys[i]];\n    }\n  }\n\n  if (transportStats) {\n    certificate.srtpCipher = transportStats.srtpCipher;\n    certificate.dtlsCipher = transportStats.dtlsCipher;\n    certificate.tlsVersion = transportStats.tlsVersion;\n\n    const { localCertificateId, remoteCertificateId } = transportStats;\n\n    if (stats.id === localCertificateId) {\n      certificate.local = {};\n      certificate.local.base64Certificate = stats.base64Certificate;\n      certificate.local.fingerprintAlgorithm = stats.fingerprintAlgorithm;\n    } else if (stats.id === remoteCertificateId) {\n      certificate.remote = {};\n      certificate.remote.base64Certificate = stats.base64Certificate;\n      certificate.remote.fingerprintAlgorithm = stats.fingerprintAlgorithm;\n    }\n  }\n};\n\nexport default parseCertificates;\n","/**\n * Function that derives that stats value using the formula Total Current Value - Total Prev Value\n * @param {Object} prevStats - The stats object from the previous retrieval.\n * @param {Object} stats - The stats object.\n * @param {String} prop - Stats dictionary identifier.\n * @return {number}\n * @memberOf PeerConnectionStatisticsParsers\n * was _parseConnectionStats in 0.6.x\n */\nconst tabulateStats = (prevStats = null, stats, prop) => {\n  const nTime = stats.timestamp;\n  const oTime = prevStats ? prevStats.timestamp || 0 : 0;\n  const nVal = parseFloat(stats[prop] || '0', 10);\n  const oVal = parseFloat(prevStats ? prevStats[prop] || '0' : '0', 10);\n\n  if ((new Date(nTime).getTime()) === (new Date(oTime).getTime())) {\n    return nVal;\n  }\n\n  return parseFloat(((nVal - oVal) / (nTime - oTime) * 1000).toFixed(3) || '0', 10);\n};\n\nexport default tabulateStats;\n","import parsers from './index';\nimport logger from '../../../../logger';\nimport { TAGS } from '../../../../constants';\nimport messages from '../../../../messages';\nimport { isANumber } from '../../../../utils/helpers';\n\n/**\n * @typedef {Object} audioStats - The Peer connection audio streaming statistics.\n * @property {JSON} audioStats.sending The Peer connection sending audio streaming statistics.\n * @property {number} audioStats.sending.bytes The Peer connection current sending audio streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {number} audioStats.sending.totalBytes The Peer connection total sending audio streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {number} audioStats.sending.packets The Peer connection current sending audio streaming packets.\n * @property {number} audioStats.sending.totalPackets The Peer connection total sending audio streaming packets.\n * @property {number} audioStats.sending.ssrc The Peer connection sending audio streaming RTP packets SSRC.\n * @property {number} audioStats.sending.roundTripTime The Peer connection sending audio streaming round-trip delay time.\n * @property {number} audioStats.sending.jitter The Peer connection sending audio streaming RTP packets jitter in seconds.\n * @property {number} audioStats.sending.retransmittedBytesSent The total number of bytes that were retransmitted for this SSRC, only including\n *   payload bytes. This is a subset of bytesSent.\n * @property {number} audioStats.sending.retransmittedPacketsSent The total number of packets that were retransmitted for this SSRC. This is a subset of packetsSent.\n * @property {JSON} [audioStats.sending.codec] - The Peer connection sending audio streaming selected codec information.\n *   Defined as <code>null</code> if local session description is not available before parsing.\n * @property {String} audioStats.sending.codec.name The Peer connection sending audio streaming selected codec name.\n * @property {number} audioStats.sending.codec.payloadType The Peer connection sending audio streaming selected codec payload type.\n * @property {String} [audioStats.sending.codec.implementation] - The Peer connection sending audio streaming selected codec implementation.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {number} [audioStats.sending.codec.channels] - The Peer connection sending audio streaming selected codec channels (2 for stereo).\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing,\n *   and this is usually present in <code>statistics.audio</code> property.\n * @property {number} [audioStats.sending.codec.clockRate] - The Peer connection sending audio streaming selected codec media sampling rate.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {String} [audioStats.sending.codec.params] - The Peer connection sending audio streaming selected codec parameters.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {number} [audioStats.sending.audioLevel] - The Peer connection audio level of the media source.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {number} [audioStats.sending.totalSamplesDuration] - The Peer connection sending audio total duration in seconds.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {number} [audioStats.sending.echoReturnLoss] - The Peer connection sending audio streaming echo return loss in db (decibels).\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {number} [audioStats.sending.echoReturnLossEnhancement] - The Peer connection sending audio streaming\n *   echo return loss enhancement db (decibels).\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {JSON} audioStats.receiving The Peer connection receiving audio streaming statistics.\n * @property {number} audioStats.receiving.bytes The Peer connection current sending audio streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {number} audioStats.receiving.totalBytes The Peer connection total sending audio streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {number} audioStats.receiving.packets The Peer connection current receiving audio streaming packets.\n * @property {number} audioStats.receiving.totalPackets The Peer connection total receiving audio streaming packets.\n * @property {number} audioStats.receiving.packetsLost The Peer connection current receiving audio streaming packets lost.\n * @property {number} audioStats.receiving.fractionLost The Peer connection current receiving audio streaming fraction packets lost.\n * @property {number} audioStats.receiving.totalPacketsLost The Peer connection total receiving audio streaming packets lost.\n * @property {number} audioStats.receiving.ssrc The Peer connection receiving audio streaming RTP packets SSRC.\n * @property {Number} audioStats.receiving.jitter The Peer connection receiving audio streaming RTP packets jitter in seconds.\n *   Defined as <code>0</code> if it's not present in original raw statistics before parsing.\n * @property {Number} audioStats.receiving.totalSamplesReceived The Peer connection total number of audio samples that\n * have been received.\n * @property {number} [audioStats.receiving.totalSamplesDuration] - The Peer connection receiving audio total duration in seconds.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {JSON} [audioStats.receiving.codec] - The Peer connection receiving audio streaming selected codec information.\n *   Defined as <code>null</code> if remote session description is not available before parsing.\n *   Note that if the value is polyfilled, the value may not be accurate since the remote Peer can override the selected codec.\n *   The value is derived from the remote session description.\n * @property {String} audioStats.receiving.codec.name The Peer connection receiving audio streaming selected codec name.\n * @property {Number} audioStats.receiving.codec.payloadType The Peer connection receiving audio streaming selected codec payload type.\n * @property {String} [audioStats.receiving.codec.implementation] - The Peer connection receiving audio streaming selected codec implementation.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {Number} [audioStats.receiving.codec.channels] - The Peer connection receiving audio streaming selected codec channels (2 for stereo).\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing,\n *   and this is usually present in <code>statistics.audio</code> property.\n * @property {Number} [audioStats.receiving.codec.clockRate] - The Peer connection receiving audio streaming selected codec media sampling rate.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {String} [audioStats.receiving.codec.params] - The Peer connection receiving audio streaming selected codec parameters.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n * @property {Number} [audioStats.receiving.audioLevel] - The Peer connection receiving audio streaming audio level.\n *   Defined as <code>null</code> if it's not available in original raw statistics.before parsing.\n */\n\nconst parseReceiving = (output, value, prevStats) => {\n  const parsedStats = output.audio.receiving;\n\n  const packetsReceived = parseInt(value.packetsReceived || '0', 10);\n  parsedStats.totalPackets = packetsReceived;\n  parsedStats.packets = parsers.tabulateStats(prevStats, value, 'packetsReceived');\n\n  const bytesReceived = parseInt(value.bytesReceived || '0', 10);\n  parsedStats.totalBytes = bytesReceived;\n  parsedStats.bytes = parsers.tabulateStats(prevStats, value, 'bytesReceived');\n\n  const packetsLost = parseInt(value.packetsLost || '0', 10);\n  parsedStats.totalPacketsLost = packetsLost;\n  parsedStats.packetsLost = parsers.tabulateStats(prevStats, value, 'packetsLost');\n\n  parsedStats.jitter = parseInt(value.jitter || '0', 10);\n  parsedStats.ssrc = value.ssrc;\n\n  const { trackId } = value;\n  const audioReceiver = output.raw[trackId];\n\n  if (audioReceiver) {\n    parsedStats.audioLevel = parseFloat(audioReceiver.audioLevel).toFixed(5);\n    parsedStats.totalSamplesReceived = parseInt(audioReceiver.totalSamplesReceived || '0', 10);\n    parsedStats.totalSamplesDuration = parseInt(audioReceiver.totalSamplesDuration || '0', 10);\n\n    // Available but unexposed stats\n    // parsedStats.totalAudioLevel = parseFloat(audioReceiver.totalAudioLevel || '0');\n    // parsedStats.jitterBufferDelay = parseInt(audioReceiver.jitterBufferDelay || '0', 10);\n    // parsedStats.jitterBufferEmittedCount = parseInt(audioReceiver.jitterBufferEmittedCount || '0', 10);\n    // parsedStats.concealedSamples = parseInt(audioReceiver.concealedSamples || '0', 10);\n    // parsedStats.silentConcealedSamples = parseInt(audioReceiver.silentConcealedSamples || '0', 10);\n    // parsedStats.concealmentEvents = parseInt(audioReceiver.concealmentEvents || '0', 10);\n    // parsedStats.insertedSamplesForDeceleration = parseInt(audioReceiver.insertedSamplesForDeceleration || '0', 10);\n    // parsedStats.removedSamplesForAcceleration = parseInt(audioReceiver.removedSamplesForAcceleration || '0', 10);\n  }\n};\n\nconst parseSending = (output, value, prevStats) => {\n  const parsedStats = output.audio.sending;\n\n  if (value.bytesSent) {\n    const bytesSent = parseInt(value.bytesSent || '0', 10);\n    parsedStats.totalBytes = bytesSent;\n    parsedStats.bytes = parsers.tabulateStats(prevStats, value, 'bytesSent');\n  }\n\n  if (value.packetsSent) {\n    const packetsSent = parseInt(value.packetsSent || '0', 10);\n    parsedStats.totalPackets = packetsSent;\n    parsedStats.packets = parsers.tabulateStats(prevStats, value, 'packetsSent');\n  }\n\n  if (value.retransmittedBytesSent || isANumber(value.retransmittedBytesSent)) {\n    const retransmittedBytesSent = parseInt(value.retransmittedBytesSent || '0', 10);\n    parsedStats.totalRetransmittedBytesSent = retransmittedBytesSent;\n    parsedStats.retransmittedBytesSent = parsers.tabulateStats(prevStats, value, 'retransmittedBytesSent');\n  }\n\n  if (value.retransmittedPacketsSent || isANumber(value.retransmittedPacketsSent)) {\n    const retransmittedPacketsSent = parseInt(value.retransmittedPacketsSent || '0', 10);\n    parsedStats.totalRetransmittedPacketsSent = retransmittedPacketsSent;\n    parsedStats.retransmittedPacketsSent = parsers.tabulateStats(prevStats, value, 'retransmittedPacketsSent');\n  }\n\n  parsedStats.ssrc = value.ssrc;\n\n  if (value.jitter) {\n    parsedStats.jitter = parseInt(value.jitter || '0', 10);\n  }\n\n  if (value.roundTripTime) {\n    parsedStats.roundTripTime = parseInt(value.roundTripTime || '0', 10);\n  }\n\n  const { trackId, mediaSourceId } = value;\n  const audioSender = output.raw[trackId];\n  if (audioSender) {\n    parsedStats.echoReturnLoss = parseInt(audioSender.echoReturnLoss || '0', 10);\n    parsedStats.echoReturnLossEnhancement = parseInt(audioSender.echoReturnLossEnhancement || '0', 10);\n  }\n\n  // Available but unexposed stats\n  // parsedStats.totalAudioLevel = parseFloat(audioSender.totalAudioLevel || '0');\n\n  const audioSource = output.raw[mediaSourceId];\n\n  if (audioSource) {\n    parsedStats.audioLevel = parseFloat(audioSource.audioLevel).toFixed(5);\n    parsedStats.totalSamplesDuration = parseInt(audioSource.totalSamplesDuration || '0', 10);\n  }\n};\n\n/**\n * Function that parses the raw stats from the RTCInboundRtpStreamStats and RTCOutboundRtpStreamStats dictionary.\n * @param {SkylinkState} state - The room state.\n * @param {Object} output - Stats output object that stores the parsed stats values.\n * @param {String} type - Stats dictionary identifier.\n * @param {RTCPeerConnection} value - Stats value.\n * @param {String} peerId - The peer Id.\n * @param {Boolean} isAutoBwStats - The flag if auto bandwidth adjustment is true.\n * @param {String} direction - The direction of the media flow, i.e. sending or receiving\n * @memberOf PeerConnectionStatisticsParsers\n */\nconst parseAudio = (state, output, type, value, peerId, isAutoBwStats, direction) => {\n  const { peerBandwidth, peerStats } = state;\n  const prevStats = isAutoBwStats ? peerBandwidth[peerId][value.id] : peerStats[peerId][value.id];\n  switch (direction) {\n    case 'receiving':\n      parseReceiving(output, value, prevStats);\n      break;\n    case 'sending':\n      parseSending(output, value, prevStats);\n      break;\n    default:\n      logger.log.DEBUG([peerId, TAGS.STATS_MODULE, null, messages.STATS_MODULE.ERRORS.PARSE_FAILED]);\n  }\n};\n\nexport default parseAudio;\n","import parsers from './index';\nimport logger from '../../../../logger';\nimport { TAGS } from '../../../../constants';\nimport messages from '../../../../messages';\n\n/**\n * @typedef videoStats - The Peer connection video streaming statistics.\n * @property {JSON} videoStats.sending The Peer connection sending video streaming statistics.\n * @property {Number} videoStats.sending.ssrc The Peer connection sending video streaming RTP packets SSRC.\n * @property {Number} videoStats.sending.bytes The Peer connection current sending video streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {Number} videoStats.sending.totalBytes The Peer connection total sending video streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {Number} videoStats.sending.packets The Peer connection current sending video streaming packets.\n * @property {Number} videoStats.sending.totalPackets The Peer connection total sending video streaming packets.\n * @property {Number} videoStats.sending.roundTripTime The Peer connection sending video streaming Round-trip delay time.\n *   Defined as <code>0</code> if it's not present in original raw statistics before parsing.\n * @property {Number} videoStats.sending.jitter <blockquote class=\"info\">\n *   This property has been deprecated and would be removed in future releases\n *   as it should not be in <code>sending</code> property.\n *   </blockquote> The Peer connection sending video streaming RTP packets jitter in seconds.\n *   Defined as <code>0</code> if it's not present in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.qpSum] - The Peer connection sending video streaming sum of the QP values of frames passed.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.frames] - The Peer connection sending video streaming frames.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.frameWidth] - The Peer connection sending video streaming frame width.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.frameHeight] - The Peer connection sending video streaming frame height.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.hugeFramesSent] - The Peer connection sending video streaming number\n * of huge frames sent by this RTP stream. Huge frames, by definition, are frames that have an encoded size at least 2.5 times the average size of the frames.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.framesPerSecond] - The Peer connection sending video streaming fps.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.framesEncoded] - The Peer connection sending video streaming frames encoded.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.nacks] - The Peer connection current sending video streaming nacks.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.totalNacks] - The Peer connection total sending video streaming nacks.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.plis] - The Peer connection current sending video streaming plis.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.totalPlis] - The Peer connection total sending video streaming plis.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.firs] - The Peer connection current sending video streaming firs.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.totalFirs] - The Peer connection total sending video streaming firs.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {JSON} [videoStats.sending.codec] - The Peer connection sending video streaming selected codec information.\n *   Defined as <code>null</code> if local session description is not available before parsing.\n * @property {String} videoStats.sending.codec.name The Peer connection sending video streaming selected codec name.\n * @property {Number} videoStats.sending.codec.payloadType The Peer connection sending video streaming selected codec payload type.\n * @property {String} [videoStats.sending.codec.implementation] - The Peer connection sending video streaming selected codec implementation.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.sending.codec.channels] - The Peer connection sending video streaming selected codec channels (2 for stereo).\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing,\n *   and this is usually present in <code>statistics.audio</code> property.\n * @property {Number} [videoStats.sending.codec.clockRate] - The Peer connection sending video streaming selected codec media sampling rate.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {String} [videoStats.sending.codec.params] - The Peer connection sending video streaming selected codec parameters.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {JSON} videoStats.receiving The Peer connection receiving video streaming statistics.\n * @property {Number} videoStats.receiving.ssrc The Peer connection receiving video streaming RTP packets SSRC.\n * @property {Number} videoStats.receiving.bytes The Peer connection current receiving video streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {Number} videoStats.receiving.totalBytes The Peer connection total receiving video streaming bytes.\n *   Note that value is in bytes so you have to convert that to bits for displaying for an example kbps.\n * @property {Number} videoStats.receiving.packets The Peer connection current receiving video streaming packets.\n * @property {Number} videoStats.receiving.totalPackets The Peer connection total receiving video streaming packets.\n * @property {Number} videoStats.receiving.packetsLost The Peer connection current receiving video streaming packets lost.\n * @property {Number} videoStats.receiving.totalPacketsLost The Peer connection total receiving video streaming packets lost.\n * @property {Number} [videoStats.receiving.frames] - The Peer connection receiving video streaming frames.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.frameWidth] - The Peer connection sending video streaming frame width.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.frameHeight] - The Peer connection sending video streaming frame height.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.framesDecoded] - The Peer connection receiving video streaming frames decoded.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.framesDroped] - The Peer connection receiving video streaming frames dropped.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.nacks] - The Peer connection current receiving video streaming nacks.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.totalNacks] - The Peer connection total receiving video streaming nacks.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.plis] - The Peer connection current receiving video streaming plis.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.totalPlis] - The Peer connection total receiving video streaming plis.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.firs] - The Peer connection current receiving video streaming firs.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.totalFirs] - The Peer connection total receiving video streaming firs.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {JSON} [videoStats.receiving.codec] - The Peer connection receiving video streaming selected codec information.\n *   Defined as <code>null</code> if remote session description is not available before parsing.\n *   Note that if the value is polyfilled, the value may not be accurate since the remote Peer can override the selected codec.\n *   The value is derived from the remote session description.\n * @property {String} videoStats.receiving.codec.name The Peer connection receiving video streaming selected codec name.\n * @property {Number} videoStats.receiving.codec.payloadType The Peer connection receiving video streaming selected codec payload type.\n * @property {String} [videoStats.receiving.codec.implementation] - The Peer connection receiving video streaming selected codec implementation.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {Number} [videoStats.receiving.codec.channels] - The Peer connection receiving video streaming selected codec channels (2 for stereo).\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing,\n *   and this is usually present in <code>statistics.audio</code> property.\n * @property {Number} [videoStats.receiving.codec.clockRate] - The Peer connection receiving video streaming selected codec media sampling rate.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n * @property {String} [videoStats.receiving.codec.params] - The Peer connection receiving video streaming selected codec parameters.\n *   Defined as <code>null</code> if it's not available in original raw statistics before parsing.\n */\n\nconst parseReceiving = (output, value, prevStats) => {\n  const parsedStats = output.video.receiving;\n\n  if (value.bytesReceived) {\n    const bytesReceived = parseInt(value.bytesReceived || '0', 10);\n    parsedStats.totalBytes = bytesReceived;\n    parsedStats.bytes = parsers.tabulateStats(prevStats, value, 'bytesReceived');\n  }\n\n  if (value.packetsReceived) {\n    const packetsReceived = parseInt(value.packetsReceived || '0', 10);\n    parsedStats.totalPackets = packetsReceived;\n    parsedStats.packets = parsers.tabulateStats(prevStats, value, 'packetsReceived');\n  }\n\n  if (Number.isInteger(value.packetsLost)) {\n    const packetsLost = parseInt(value.packetsLost || '0', 10);\n    parsedStats.totalPacketsLost = packetsLost;\n    parsedStats.packetsLost = parsers.tabulateStats(prevStats, value, 'packetsLost');\n  }\n\n  if (Number.isInteger(value.firCount)) {\n    const firsSent = parseInt(value.firCount || '0', 10);\n    parsedStats.totalFirs = firsSent;\n    parsedStats.firs = parsers.tabulateStats(prevStats, value, 'firCount');\n  }\n\n  if (Number.isInteger(value.nackCount)) {\n    const nacksSent = parseInt(value.nackCount || '0', 10);\n    parsedStats.totalNacks = nacksSent;\n    parsedStats.nacks = parsers.tabulateStats(prevStats, value, 'nackCount');\n  }\n\n  if (value.pliCount || Number.isInteger(value.pliCount)) {\n    const plisSent = parseInt(value.pliCount || '0', 10);\n    parsedStats.totalPlis = plisSent;\n    parsedStats.plis = parsers.tabulateStats(prevStats, value, 'pliCount');\n  }\n\n  parsedStats.ssrc = value.ssrc;\n  parsedStats.qpSum = parseInt(value.qpSum || '0', 10);\n  parsedStats.decoderImplementation = value.decoderImplementation;\n\n  const { trackId } = value;\n  const videoReceiver = output.raw[trackId];\n\n  if (videoReceiver) {\n    parsedStats.framesDropped = parseFloat(videoReceiver.framesDropped || '0');\n    parsedStats.frames = parseInt(videoReceiver.framesReceived || '0', 10);\n    parsedStats.framesDecoded = parseInt(videoReceiver.framesDecoded || '0', 10);\n    parsedStats.frameWidth = parseInt(videoReceiver.frameWidth || '0', 10);\n    parsedStats.frameHeight = parseInt(videoReceiver.frameHeight || '0', 10);\n  }\n};\n\nconst parseSending = (output, value, prevStats) => {\n  const parsedStats = output.video.sending;\n\n  if (value.bytesSent) {\n    const bytesSent = parseInt(value.bytesSent || '0', 10);\n    parsedStats.totalBytes = bytesSent;\n    parsedStats.bytes = parsers.tabulateStats(prevStats, value, 'bytesSent');\n  }\n\n  if (value.packetsSent) {\n    const packetsSent = parseInt(value.packetsSent || '0', 10);\n    parsedStats.totalPackets = packetsSent;\n    parsedStats.packets = parsers.tabulateStats(prevStats, value, 'packetsSent');\n  }\n\n  if (Number.isInteger(value.firCount)) {\n    const firsReceived = parseInt(value.firCount || '0', 10);\n    parsedStats.totalFirs = firsReceived;\n    parsedStats.firs = parsers.tabulateStats(prevStats, value, 'firCount');\n  }\n\n  if (Number.isInteger(value.nackCount)) {\n    const nacksReceived = parseInt(value.nackCount || '0', 10);\n    parsedStats.totalNacks = nacksReceived;\n    parsedStats.nacks = parsers.tabulateStats(prevStats, value, 'nackCount');\n  }\n\n  if (Number.isInteger(value.pliCount)) {\n    const plisReceived = parseInt(value.pliCount || '0', 10);\n    parsedStats.totalPlis = plisReceived;\n    parsedStats.plis = parsers.tabulateStats(prevStats, value, 'pliCount');\n  }\n\n  if (value.jitter) {\n    parsedStats.jitter = parseInt(value.jitter || '0', 10);\n  }\n\n  if (value.roundTripTime) {\n    parsedStats.roundTripTime = parseInt(value.roundTripTime || '0', 10);\n  }\n\n  if (Number.isInteger(value.framesEncoded)) {\n    parsedStats.framesEncoded = parseInt(value.framesEncoded || '0', 10);\n  }\n\n  parsedStats.ssrc = value.ssrc;\n  parsedStats.qpSum = parseInt(value.qpSum || '0', 10);\n\n  const { trackId, mediaSourceId } = value;\n  const videoSender = output.raw[trackId];\n\n  if (videoSender) {\n    parsedStats.frameWidth = parseInt(videoSender.frameWidth || '0', 10);\n    parsedStats.frameHeight = parseInt(videoSender.frameHeight || '0', 10);\n    parsedStats.frames = parseInt(videoSender.framesSent || '0', 10);\n    parsedStats.hugeFramesSent = parseInt(videoSender.hugeFramesSent || '0', 10);\n  }\n\n  const videoSource = output.raw[mediaSourceId];\n\n  if (videoSource) {\n    parsedStats.framesPerSecond = parseInt(videoSource.framesPerSecond || '0', 10);\n  }\n};\n\n/**\n * Function that parses the raw stats from the RTCInboundRtpStreamStats and RTCOutboundRtpStreamStats dictionary.\n * @param {SkylinkState} state - The room state.\n * @param {Object} output - Stats output object that stores the parsed stats values.\n * @param {String} type - Stats dictionary identifier.\n * @param {RTCPeerConnection} value - Stats value.\n * @param {String} peerId - The peer Id.\n * @param {Boolean} isAutoBwStats - The flag if auto bandwidth adjustment is true.\n * @param {String} direction - The direction of the media flow, i.e. sending or receiving\n * @memberOf PeerConnectionStatisticsParsers\n */\nconst parseVideo = (state, output, type, value, peerId, isAutoBwStats, direction) => {\n  const { peerBandwidth, peerStats } = state;\n  const prevStats = isAutoBwStats ? peerBandwidth[peerId][value.id] : peerStats[peerId][value.id];\n  switch (direction) {\n    case 'receiving':\n      parseReceiving(output, value, prevStats);\n      break;\n    case 'sending':\n      parseSending(output, value, prevStats);\n      break;\n    default:\n      logger.log.DEBUG([peerId, TAGS.STATS_MODULE, null, messages.STATS_MODULE.ERRORS.PARSE_FAILED]);\n  }\n};\n\nexport default parseVideo;\n","import parsers from './index';\nimport { TAGS, TRACK_KIND } from '../../../../constants';\nimport logger from '../../../../logger';\nimport messages from '../../../../messages';\n\nconst parseMedia = (state, output, type, value, peerConnection, peerId, isAutoBwStats, direction) => {\n  const trackKind = value.kind || value.mediaType; // Safari uses mediaType key\n\n  if (trackKind === TRACK_KIND.AUDIO) {\n    parsers.parseAudio(state, output, type, value, peerId, isAutoBwStats, direction);\n  } else if (trackKind === TRACK_KIND.VIDEO) {\n    parsers.parseVideo(state, output, type, value, peerId, isAutoBwStats, direction);\n  } else {\n    logger.log.DEBUG([this.peerId, TAGS.STATS_MODULE, null, messages.STATS_MODULE.INVALID_TRACK_KIND], value);\n  }\n};\n\nexport default parseMedia;\n","import Skylink from '../../../index';\nimport SessionDescription from '../../../session-description';\nimport logger from '../../../logger';\nimport messages from '../../../messages';\nimport {\n  GET_CONNECTION_STATUS_STATE, DATA_CHANNEL_TYPE, TAGS, BROWSER_AGENT,\n} from '../../../constants';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { getConnectionStatusStateChange } from '../../../skylink-events/peer-events';\nimport parsers from './parsers/index';\nimport { isEmptyObj } from '../../../utils/helpers';\n\n/**\n * @classdesc This class is used to fetch the statistics for a RTCPeerConnection\n * @class\n * @private\n */\nclass PeerConnectionStatistics {\n  constructor(roomKey, peerId) {\n    /**\n     * The current skylink state of the room\n     * @type {SkylinkState}\n     */\n    this.roomState = Skylink.getSkylinkState(roomKey);\n    /**\n     * Current RTCPeerConnection based on the peerId\n     * @type {RTCPeerConnection}\n     */\n    this.peerConnection = this.roomState.peerConnections[peerId] || null;\n    this.peerConnStatus = this.roomState.peerConnStatus[peerId] || null;\n    this.dataChannel = this.roomState.dataChannels[peerId] || null;\n    this.peerId = peerId;\n    this.roomKey = roomKey;\n    this.output = {\n      peerId,\n      raw: {},\n      connection: {},\n      audio: {\n        sending: {},\n        receiving: {},\n      },\n      video: {\n        sending: {},\n        receiving: {},\n      },\n      selectedCandidatePair: {\n        id: null,\n        local: {},\n        remote: {},\n        consentRequests: {},\n        responses: {},\n        requests: {},\n      },\n      certificate: {},\n    };\n    this.beSilentOnLogs = Skylink.getInitOptions().beSilentOnStatsLogs;\n    this.beSilentOnParseLogs = Skylink.getInitOptions().beSilentOnParseLogs;\n    this.isAutoBwStats = false;\n    this.bandwidth = null;\n  }\n\n  /**\n   * Helper function for getting RTC Connection Statistics\n   * @returns {Promise<statistics>}\n   */\n  getConnectionStatus() {\n    return this.getStatistics(false, false);\n  }\n\n  getStatsSuccess(promiseResolve, promiseReject, stats) {\n    const { AdapterJS } = window;\n    if (!stats && AdapterJS.webrtcDetectedBrowser === BROWSER_AGENT.REACT_NATIVE) {\n      // get stats in react native will resolve with 'null'\n      promiseResolve(this.output);\n      return;\n    }\n    const { peerBandwidth, peerStats, room } = this.roomState;\n    // TODO: Need to do full implementation of success function\n    if (typeof stats.forEach === 'function') {\n      stats.forEach((item, prop) => {\n        this.output.raw[prop] = item;\n      });\n    } else {\n      this.output.raw = stats;\n    }\n\n    try {\n      if (isEmptyObj(peerStats)) {\n        logger.log.DEBUG([this.peerId, TAGS.STATS_MODULE, null, messages.STATS_MODULE.STATS_DISCARDED]);\n        return;\n      }\n\n      const rawEntries = Object.entries(this.output.raw);\n      rawEntries.forEach((entry) => {\n        const key = entry[0];\n        const value = entry[1];\n        const { type } = value;\n        switch (type) {\n          case 'remote-inbound-rtp': // sender stats\n          case 'outbound-rtp':\n          case 'inbound-rtp':\n            if (type === 'inbound-rtp') {\n              parsers.parseMedia(this.roomState, this.output, type, value, this.peerConnection, this.peerId, this.isAutoBwStats, 'receiving');\n            } else {\n              parsers.parseMedia(this.roomState, this.output, type, value, this.peerConnection, this.peerId, this.isAutoBwStats, 'sending');\n            }\n            break;\n          case 'certificate':\n            parsers.parseCertificates(this.output, value);\n            break;\n          case 'local-candidate':\n          case 'remote-candidate':\n            parsers.parseSelectedCandidatePair(this.roomState, this.output, type, value, this.peerConnection, this.peerId, this.isAutoBwStats);\n            break;\n          case 'media-source':\n            parsers.parseSelectedCandidatePair(this.roomState, this.output, type, value, this.peerConnection, this.peerId, this.isAutoBwStats);\n            break;\n          default:\n            // do nothing\n        }\n\n        if (this.isAutoBwStats && !peerBandwidth[this.peerId][key]) {\n          peerBandwidth[this.peerId][key] = this.output.raw[key];\n        } else if (!this.isAutoBwStats && !peerStats[this.peerId][key]) {\n          peerStats[this.peerId][key] = this.output.raw[key];\n        }\n\n        Skylink.setSkylinkState(this.roomState, room.id);\n      });\n    } catch (err) {\n      this.getStatsFailure(promiseReject, messages.STATS_MODULE.ERRORS.PARSE_FAILED, err);\n    }\n\n    dispatchEvent(getConnectionStatusStateChange({\n      state: GET_CONNECTION_STATUS_STATE.RETRIEVE_SUCCESS,\n      peerId: this.peerId,\n      stats: this.output,\n    }));\n\n    promiseResolve(this.output);\n  }\n\n  getStatsFailure(promiseReject, errorMsg, error) {\n    const errMsg = errorMsg || messages.STATS_MODULE.RETRIEVE_STATS_FAILED;\n\n    if (!this.beSilentOnLogs) {\n      logger.log.ERROR([this.peerId, TAGS.STATS_MODULE, null, errMsg], error);\n      dispatchEvent(getConnectionStatusStateChange({\n        state: GET_CONNECTION_STATUS_STATE.RETRIEVE_ERROR,\n        peerId: this.peerId,\n        error,\n      }));\n    }\n    promiseReject(error);\n  }\n\n  /**\n   * Fetch webRTC stats of a RTCPeerConnection\n   * @param beSilentOnLogs\n   * @param isAutoBwStats\n   * @return {Promise<statistics>}\n   * @fires getConnectionStatusStateChange\n   */\n  // eslint-disable-next-line consistent-return\n  getStatistics(beSilentOnLogs = false, isAutoBwStats = false) {\n    const { STATS_MODULE } = messages;\n    return new Promise((resolve, reject) => {\n      if (!this.roomState.peerStats[this.peerId] && !isAutoBwStats) {\n        logger.log.WARN(STATS_MODULE.NOT_INITIATED);\n        resolve(null);\n      } else {\n        this.beSilentOnLogs = beSilentOnLogs;\n        this.isAutoBwStats = isAutoBwStats;\n\n        try {\n          // obtain stats from SDP that are not available in stats report or not complete\n          this.gatherRTCPeerConnectionDetails();\n          this.gatherSDPIceCandidates();\n          this.gatherSDPCodecs();\n          this.gatherRTCDataChannelDetails();\n        } catch (err) {\n          logger.log.WARN([this.peerId, TAGS.STATS_MODULE, null, messages.STATS_MODULE.ERRORS.PARSE_FAILED], err);\n        }\n\n        if (typeof this.peerConnection.getStats !== 'function') {\n          this.getStatsFailure(reject, messages.PEER_CONNECTION.getstats_api_not_available);\n        }\n\n        dispatchEvent(getConnectionStatusStateChange({\n          state: GET_CONNECTION_STATUS_STATE.RETRIEVING,\n          peerId: this.peerId,\n        }));\n\n        this.peerConnection.getStats()\n          .then((stats) => { this.getStatsSuccess(resolve, reject, stats); })\n          .catch((error) => {\n            if (error.message === messages.STATS_MODULE.ERRORS.STATS_IS_NULL) {\n              logger.log.WARN([this.peerId, TAGS.STATS_MODULE, null, messages.STATS_MODULE.ERRORS.RETRIEVE_STATS_FAILED], error.message);\n              return;\n            }\n            this.getStatsFailure(reject, null, error);\n          });\n      }\n    });\n  }\n\n  /**\n   * Formats output object with RTCPeerConnection details\n   * @private\n   */\n  gatherRTCPeerConnectionDetails() {\n    const { peerConnection } = this;\n    this.output.connection.iceConnectionState = peerConnection.iceConnectionState;\n    this.output.connection.iceGatheringState = peerConnection.iceGatheringState;\n    this.output.connection.signalingState = peerConnection.signalingState;\n\n    this.output.connection.remoteDescription = {\n      type: (peerConnection.remoteDescription && peerConnection.remoteDescription.type) || '',\n      sdp: (peerConnection.remoteDescription && peerConnection.remoteDescription.sdp) || '',\n    };\n\n    this.output.connection.localDescription = {\n      type: (peerConnection.localDescription && peerConnection.localDescription.type) || '',\n      sdp: (peerConnection.localDescription && peerConnection.localDescription.sdp) || '',\n    };\n\n    this.output.connection.constraints = this.peerConnStatus ? this.peerConnStatus.constraints : null;\n    this.output.connection.optional = this.peerConnStatus ? this.peerConnStatus.optional : null;\n    this.output.connection.sdpConstraints = this.peerConnStatus ? this.peerConnStatus.sdpConstraints : null;\n  }\n\n  /**\n   * Formats output object with Ice Candidate details\n   * @private\n   */\n  gatherSDPIceCandidates() {\n    const { peerConnection, beSilentOnParseLogs } = this;\n    this.output.connection.candidates = {\n      sending: SessionDescription.getSDPICECandidates(this.peerId, peerConnection.localDescription, beSilentOnParseLogs),\n      receiving: SessionDescription.getSDPICECandidates(this.peerId, peerConnection.remoteDescription, beSilentOnParseLogs),\n    };\n  }\n\n  /**\n   * Formats output object with SDP codecs\n   * @private\n   */\n  gatherSDPCodecs() {\n    const { peerConnection, beSilentOnParseLogs } = this;\n    this.output.audio.sending.codec = SessionDescription.getSDPSelectedCodec(this.peerId, peerConnection.remoteDescription, 'audio', beSilentOnParseLogs);\n    this.output.video.sending.codec = SessionDescription.getSDPSelectedCodec(this.peerId, peerConnection.remoteDescription, 'video', beSilentOnParseLogs);\n    this.output.audio.receiving.codec = SessionDescription.getSDPSelectedCodec(this.peerId, peerConnection.localDescription, 'audio', beSilentOnParseLogs);\n    this.output.video.receiving.codec = SessionDescription.getSDPSelectedCodec(this.peerId, peerConnection.localDescription, 'video', beSilentOnParseLogs);\n  }\n\n  /**\n   * Formats output object with RTCDataChannel details\n   * @private\n   */\n  gatherRTCDataChannelDetails() {\n    const { dataChannel } = this;\n    if (dataChannel) {\n      const dcKeys = Object.keys(dataChannel);\n\n      this.output.connection.dataChannels = {};\n\n      dcKeys.forEach((prop) => {\n        const channel = dataChannel[prop];\n        this.output.connection.dataChannels[channel.channel.label] = {\n          label: channel.channel.label,\n          readyState: channel.channel.readyState,\n          channelType: DATA_CHANNEL_TYPE[prop === 'main' ? 'MESSAGING' : 'DATA'],\n          currentTransferId: channel.transferId || null,\n          currentStreamId: channel.streamId || null,\n        };\n      });\n    }\n  }\n}\n\nexport default PeerConnectionStatistics;\n","import handleScreenStreamStates from './updateScreenStreamState';\nimport { MEDIA_TYPE, TAGS } from '../../../constants';\nimport { isEmptyObj } from '../../../utils/helpers';\nimport stopStreamHelpers from '../../../media-stream/helpers/stopStream';\nimport logger from '../../../logger';\nimport MESSAGES from '../../../messages';\n\nconst retrievePeersScreenStreamId = (state) => {\n  const { peerMedias, user } = state;\n  const peersScreenStreamId = {};\n\n  const peerIds = Object.keys(peerMedias).filter(peerId => peerId !== user.sid);\n  for (let i = 0; i < peerIds.length; i += 1) {\n    const peerId = peerIds[i];\n    Object.values(peerMedias[peerId]).forEach((mInfo) => {\n      if (mInfo.mediaType === MEDIA_TYPE.VIDEO_SCREEN) {\n        peersScreenStreamId[peerId] = mInfo.streamId;\n      }\n    });\n  }\n\n  return peersScreenStreamId;\n};\n\nconst retrievePeerScreenStream = (state) => {\n  const { remoteStreams } = state;\n  const peersScreenStreamId = retrievePeersScreenStreamId(state);\n\n  if (isEmptyObj(peersScreenStreamId)) {\n    return null;\n  }\n\n  const peersScreenStream = {};\n\n  Object.keys(peersScreenStreamId).forEach((peerId) => {\n    const peerRemoteStreams = Object.values(remoteStreams[peerId]);\n    // eslint-disable-next-line prefer-destructuring\n    peersScreenStream[peerId] = peerRemoteStreams.filter(stream => stream.id === peersScreenStreamId[peerId].id);\n  });\n\n  return peersScreenStream;\n};\n\nconst stopScreenStream = (room, screenStream, peerId, fromLeaveRoom = false) => {\n  const isScreensharing = true;\n  stopStreamHelpers.prepStopStreams(room.id, screenStream.id, fromLeaveRoom, isScreensharing)\n    .then(() => logger.log.DEBUG([peerId, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.STOP_SCREEN_SUCCESS}`]))\n    .catch(error => logger.log.DEBUG([peerId, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.ERRORS.STOP_SCREEN}`], error));\n};\n\nconst addScreenStreamCallbacks = (state, stream) => {\n  const tracks = stream.getTracks();\n  tracks.forEach((track) => {\n    // eslint-disable-next-line no-param-reassign\n    track.onended = () => stopScreenStream(state.room, stream, state.user.sid);\n  });\n};\n\nconst helpers = {\n  handleScreenStreamStates,\n  addScreenStreamCallbacks,\n  retrievePeersScreenStreamId,\n  retrievePeerScreenStream,\n  stopScreenStream,\n};\n\nexport default helpers;\n","import helpers from '../../../media-stream/helpers';\nimport Skylink from '../../../index';\nimport { dispatchEvent } from '../../../utils/skylinkEventManager';\nimport { onIncomingScreenStream } from '../../../skylink-events';\nimport PeerData from '../../../peer-data';\nimport { TRACK_KIND } from '../../../constants';\nimport PeerMedia from '../../../peer-media';\n\nconst addScreenStreamToState = (state, stream) => {\n  const { room, user } = state;\n  const settings = helpers.parseStreamSettings({ video: true });\n  const isScreensharing = true;\n  const isAudioFallback = false;\n  helpers.processStreamInState(stream, settings, room.id, isScreensharing, isAudioFallback);\n\n  dispatchEvent(onIncomingScreenStream({\n    stream,\n    peerId: user.sid,\n    room,\n    isSelf: true,\n    peerInfo: PeerData.getCurrentSessionInfo(room),\n    streamId: stream.id,\n    isVideo: stream.getVideoTracks().length > 0,\n    isAudio: stream.getAudioTracks().length > 0,\n  }));\n};\n\nconst removeScreenStreamFromState = (state) => {\n  const { room, streams } = state;\n  streams.screenshare = null;\n  Skylink.setSkylinkState(state, room.id);\n};\n\nconst setScreenStateToUnavailable = (state, stream) => {\n  const { user, room } = state;\n  const mediaId = PeerMedia.retrieveMediaId(TRACK_KIND.VIDEO, stream.id);\n  PeerMedia.setMediaStateToUnavailable(room, user.sid, mediaId);\n};\n\nexport default {\n  addScreenStreamToState,\n  removeScreenStreamFromState,\n  setScreenStateToUnavailable,\n};\n","import PeerConnectionStatistics from './helpers/statistics';\nimport helpers from './helpers/index';\nimport screenshareHelpers from '../features/screen-sharing/helpers/index';\n\n/**\n * @classdesc Class that represents a PeerConnection\n * @class\n * @private\n */\nclass PeerConnection {\n  /**\n   * @static\n   * @param {object} params - options required to create a PeerConnection\n   * @param {SkylinkRoom} params.currentRoom - The currrent state\n   * @param {String} params.targetMid - Peer's id\n   * @param {Object} params.peerBrowser - Peer's user agent object\n   * @param {RTCCertificate} params.cert - Represents a certificate that an RTCPeerConnection uses to authenticate.\n   * @param {boolean} receiveOnly\n   * @param {boolean} hasScreenshare - Is screenshare enabled\n   */\n  static addPeer(params) {\n    helpers.addPeer(params);\n  }\n\n  /**\n   * @static\n   * @param args\n   */\n  static createOffer(...args) {\n    return helpers.createOffer(...args);\n  }\n\n  /**\n   * @static\n   * @param args\n   */\n  static createAnswer(...args) {\n    return helpers.createAnswer(...args);\n  }\n\n  /**\n   * @static\n   * @param args\n   */\n  static createDataChannel(...args) {\n    return helpers.createDataChannel(...args);\n  }\n\n  /**\n   * @static\n   * @param args\n   */\n  static sendP2PMessage(...args) {\n    return helpers.sendP2PMessage(...args);\n  }\n\n  /**\n   * @static\n   * @param args\n   */\n  static getPeersInRoom(...args) {\n    return helpers.getPeersInRoom(...args);\n  }\n\n  /**\n   * Get webRTC statistics via the getStats() method of RTCPeerConnection inside a Room\n   * @param {SkylinkRoom.id} roomKey\n   * @param {String} peerId\n   * @param {boolean} beSilentOnLogs\n   * @param {boolean} isAutoBwStats - The flag if retrieveStatistics is called from BandwidthAdjuster\n   * @static\n   * @return {Promise}\n   */\n  static retrieveStatistics(roomKey, peerId, beSilentOnLogs, isAutoBwStats) {\n    const peerConnectionStatistics = new PeerConnectionStatistics(roomKey, peerId);\n    return peerConnectionStatistics.getStatistics(beSilentOnLogs, isAutoBwStats);\n  }\n\n  /**\n   * @static\n   * @param args\n   */\n  static signalingEndOfCandidates(...args) {\n    return helpers.signalingEndOfCandidates(...args);\n  }\n\n  /**\n   * Get RTCPeerConnection status\n   * @param {SkylinkState} roomState\n   * @param {String|Array} peerId\n   * @static\n   * @return {Promise<statistics>}\n   */\n  static getConnectionStatus(roomState, peerId) {\n    return helpers.getConnectionStatus(roomState, peerId);\n  }\n\n  /**\n   * Get RTCDataChannel buffer thresholds\n   * @param {RTCDataChannel.channel} channel\n   * @static\n   * @return {{bufferedAmountLow: number, bufferedAmountLowThreshold: number}}\n   */\n  static getDataChannelBuffer(channel) {\n    return helpers.getDataChannelBuffer(channel);\n  }\n\n  static refreshDataChannel(roomState, peerId) {\n    return helpers.refreshDataChannel(roomState, peerId);\n  }\n\n  static closeDataChannel(roomState, peerId) {\n    return helpers.closeDataChannel(roomState, peerId);\n  }\n\n  static refreshConnection(roomState, targetPeerId, iceRestart, options, callback) {\n    return helpers.refreshConnection(roomState, targetPeerId, iceRestart, options, callback);\n  }\n\n  static refreshPeerConnection(listOfPeers, roomState, doIceRestart, bwOptions) {\n    return helpers.refreshPeerConnection(listOfPeers, roomState, doIceRestart, bwOptions);\n  }\n\n  static getPeerScreenshare(roomState) {\n    return screenshareHelpers.retrievePeerScreenStream(roomState);\n  }\n\n  static buildPeerInformations(...args) {\n    return helpers.buildPeerInformations(...args);\n  }\n\n  static closePeerConnection(roomState, peerId) {\n    return helpers.closePeerConnection(roomState, peerId);\n  }\n\n  static updatePeerInformationsMediaStatus(roomState, peerId, transceiverMid, stream) {\n    return helpers.updatePeerInformationsMediaStatus(roomState, peerId, transceiverMid, stream);\n  }\n}\n\nexport default PeerConnection;\n","import PeerConnection from '../../peer-connection';\nimport SkylinkSignalingServer from '../../server-communication/signaling-server';\nimport mediaStreamHelpers from '../../media-stream/helpers/index';\nimport logger from '../../logger';\nimport MESSAGES from '../../messages';\nimport { isEmptyObj, isAString, updateReplacedStreamInState } from '../../utils/helpers';\nimport screenshareHelpers from './helpers/index';\nimport { TAGS } from '../../constants';\n\nconst screensharingInstance = {};\n\n/**\n * @classdesc Class used for handling Screensharing.\n * @class\n * @private\n */\nclass ScreenSharing {\n  constructor(roomState) {\n    const { room } = roomState;\n\n    if (screensharingInstance[room.id]) {\n      return screensharingInstance[room.id];\n    }\n\n    this.roomState = roomState;\n    this.stream = null;\n    this.signaling = new SkylinkSignalingServer();\n    this.isReplace = null;\n    this.streamId = null;\n\n    screensharingInstance[room.id] = this;\n  }\n\n  streamExists() {\n    const streamList = mediaStreamHelpers.getStreams(this.roomState, this.roomState.room.name);\n    const streamIds = Object.keys(streamList.userMedia);\n\n    for (let i = 0; i < streamIds.length; i += 1) {\n      if (streamIds[i] === this.streamId) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  hasMoreThanOneVideoStream() {\n    return mediaStreamHelpers.retrieveVideoStreams(this.roomState.room).length > 1;\n  }\n\n  hasUserMediaStream() {\n    const { streams } = this.roomState;\n\n    return streams.userMedia;\n  }\n\n  // TODO: Implement replace logic\n  /**\n   * Function that starts the screenshare.\n   * @param {boolean} isReplace\n   * @param {String} streamId\n   * @return {MediaStream}\n   */\n  async start(isReplace, streamId = null) {\n    this.isReplace = false;\n    this.streamId = streamId;\n\n    try {\n      this.checkForExistingScreenStreams();\n      this.checksForReplaceScreen();\n\n      this.stream = await this.startScreenCapture();\n      if (!this.stream) {\n        this.deleteScreensharingInstance(this.roomState.room);\n        return null;\n      }\n\n      screenshareHelpers.handleScreenStreamStates.addScreenStreamToState(this.roomState, this.stream, this.isReplace);\n      screenshareHelpers.addScreenStreamCallbacks(this.roomState, this.stream);\n\n      if (this.isReplace) {\n        this.replaceUserMediaStream();\n      } else {\n        this.addScreenshareStream();\n      }\n    } catch (error) {\n      logger.log.ERROR([this.roomState.user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.REPLACE_SCREEN], error);\n    }\n\n    return this.stream;\n  }\n\n  /**\n   * Function that stops the screenshare.\n   * @param {Boolean} fromLeaveRoom\n   * @return {MediaStream}\n   */\n  stop(fromLeaveRoom = false) {\n    if (!this.stream) {\n      logger.log.DEBUG([this.roomState.user.sid, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.ERRORS.STOP_SCREEN} - ${MESSAGES.MEDIA_STREAM.ERRORS.NO_STREAM}`]);\n      return null;\n    }\n\n    try {\n      screenshareHelpers.stopScreenStream(this.roomState.room, this.stream, this.roomState.user.sid, fromLeaveRoom);\n\n      this.isReplace = null;\n      this.streamId = null;\n      this.stream = null;\n    } catch (error) {\n      logger.log.ERROR([this.roomState.user.sid, TAGS.MEDIA_STREAM, null, `${MESSAGES.MEDIA_STREAM.ERRORS.STOP_SCREEN}`], error);\n    }\n    return null;\n  }\n\n  // eslint-disable-next-line\n  startScreenCapture() {\n    const { navigator } = window;\n    if (navigator.mediaDevices.getDisplayMedia) {\n      return navigator.mediaDevices.getDisplayMedia({ video: true })\n        .then(stream => stream)\n        .catch((error) => {\n          if (error.name === 'NotAllowedError') {\n            logger.log.WARN(error);\n          } else {\n            logger.log.ERROR(error);\n          }\n          return null;\n        });\n    }\n    return navigator.mediaDevices.getUserMedia({ video: { mediaSource: 'screen' } })\n      .then(stream => stream)\n      .catch((error) => {\n        logger.log.ERROR(error);\n        return null;\n      });\n  }\n\n  checksForReplaceScreen() {\n    if (!this.isReplace) return;\n\n    if (!this.hasUserMediaStream()) {\n      throw new Error(MESSAGES.MEDIA_STREAM.ERRORS.NO_USER_MEDIA_STREAMS);\n    }\n\n    if (this.hasMoreThanOneVideoStream() && !this.streamId) {\n      throw new Error(MESSAGES.MEDIA_STREAM.ERRORS.NO_STREAM_ID);\n    }\n\n    if (this.streamId && !isAString(this.streamId)) {\n      throw new Error(MESSAGES.MEDIA_STREAM.ERRORS.INVALID_STREAM_ID_TYPE);\n    }\n\n    if (this.streamId && !this.streamExists()) {\n      throw new Error(`${MESSAGES.MEDIA_STREAM.ERRORS.INVALID_STREAM_ID} - ${this.streamId}`);\n    }\n  }\n\n  checkForExistingScreenStreams() {\n    const peersScreenStream = screenshareHelpers.retrievePeersScreenStreamId(this.roomState);\n\n    if (!isEmptyObj(peersScreenStream)) {\n      logger.log.WARN([this.roomState.user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.PEER_SCREEN_ACTIVE]);\n    }\n  }\n\n  replaceUserMediaStream() {\n    const { peerConnections, streams } = this.roomState;\n    const peerIds = Object.keys(peerConnections);\n    const oldStream = this.streamId ? streams.userMedia[this.streamId].stream : mediaStreamHelpers.retrieveVideoStreams(this.roomState.room)[0];\n    const newStream = this.stream;\n\n    this.streamId = oldStream.id;\n    updateReplacedStreamInState(oldStream, newStream, this.roomState, true);\n\n    peerIds.forEach((peerId) => {\n      mediaStreamHelpers.replaceTrack(oldStream, newStream, peerId, this.roomState);\n    });\n  }\n\n  addScreenshareStream() {\n    const { peerConnections } = this.roomState;\n\n    if (!isEmptyObj(peerConnections)) {\n      PeerConnection.refreshConnection(this.roomState)\n        .catch(error => logger.log.ERROR([this.roomState.user.sid, TAGS.MEDIA_STREAM, null, MESSAGES.MEDIA_STREAM.ERRORS.START_SCREEN], error));\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  deleteScreensharingInstance(room) {\n    delete screensharingInstance[room.id];\n  }\n\n  isReplaceScreenStream() {\n    return this.isReplace;\n  }\n}\n\nexport default ScreenSharing;\n","import ScreenSharing from './features/screen-sharing';\nimport AsyncMessaging from './features/messaging/async-messaging';\nimport EncryptedMessaging from './features/messaging/encrypted-messaging';\n\nlet instance = null;\n\n/**\n * @class SkylinkStates\n * @hideconstructor\n * @classdesc Singleton Class that provides methods to access and update Skylink State\n * @private\n */\nclass SkylinkStates {\n  constructor() {\n    if (!instance) {\n      instance = this;\n    }\n\n    this.states = {};\n\n    return instance;\n  }\n\n  /**\n   * @param {SkylinkState} skylinkState\n   */\n  setState(skylinkState) {\n    this.states[skylinkState.room.id] = skylinkState;\n  }\n\n  /**\n   *\n   * @return {Object}\n   */\n  getAllStates() {\n    return this.states;\n  }\n\n  /**\n   *\n   * @param {String} roomId\n   * @return {SkylinkState}\n   */\n  getState(roomId) {\n    return this.states[roomId];\n  }\n\n  /**\n   *\n   * @param {String} roomId\n   * @return boolean\n   */\n  removeStateByRoomId(roomId) {\n    return delete this.states[roomId];\n  }\n\n  /**\n   *\n   * @param {String} roomKey\n   */\n  clearRoomStateFromSingletons(roomKey) {\n    const roomState = this.getState(roomKey);\n    new ScreenSharing(roomState).deleteScreensharingInstance(roomState.room);\n    AsyncMessaging.deleteAsyncInstance(roomState.room);\n    EncryptedMessaging.deleteEncryptedInstance(roomState.room);\n  }\n}\n\nexport default SkylinkStates;\n","import Skylink, { SkylinkConstants } from '../index';\nimport logger from '../logger';\nimport messages from '../messages';\nimport { GET_PEERS_STATE } from '../constants';\nimport SkylinkSignalingServer from '../server-communication/signaling-server';\nimport { dispatchEvent, removeEventListener, addEventListener } from '../utils/skylinkEventManager';\nimport { getPeersStateChange } from '../skylink-events';\n\n/**\n * @classdesc Class that represents a Privilege Peer methods\n * @class\n * @private\n */\nclass PeerPrivileged {\n  static shouldProceed(state, appKey, reject) {\n    let errMsg = null;\n\n    if (!state.isPrivileged) {\n      errMsg = messages.PEER_PRIVILEGED.not_privileged;\n    }\n\n    if (!appKey) {\n      errMsg = messages.PEER_PRIVILEGED.no_appkey;\n    }\n\n    if (errMsg) {\n      logger.log.DEBUG(errMsg);\n      reject(new Error(errMsg));\n    }\n\n    return !errMsg;\n  }\n\n  /**\n   * Function that retrieves the list of Peer IDs from Rooms within the same App space.\n   * @param {SkylinkRoom} room\n   * @param {boolean} showAll\n   * @return {Promise<object>}\n   * @fires getPeersStateChange\n   */\n  static getPeerList(room, showAll) {\n    return new Promise((resolve, reject) => {\n      try {\n        const state = Skylink.getSkylinkState(room.id);\n        const initOptions = Skylink.getInitOptions();\n        const pShowAll = showAll || false;\n\n        const executeCallbackAndRemoveEvtListener = (evt) => {\n          const result = evt.detail;\n\n          if (result.state === GET_PEERS_STATE.DISPATCHED) {\n            removeEventListener(SkylinkConstants.EVENTS.GET_PEERS_STATE_CHANGE, executeCallbackAndRemoveEvtListener);\n\n            dispatchEvent(getPeersStateChange({\n              state: GET_PEERS_STATE.RECEIVED,\n              privilegePeerId: state.user.sid,\n              peerList: result.peerList,\n            }));\n\n            resolve(result.peerList);\n          }\n        };\n\n        if (this.shouldProceed(state, initOptions.appKey, reject)) {\n          new SkylinkSignalingServer().getPeerList(pShowAll);\n\n          dispatchEvent(getPeersStateChange({\n            state: GET_PEERS_STATE.ENQUIRED,\n            privilegePeerId: state.user.sid,\n            peerList: null,\n          }));\n\n          logger.log.INFO(messages.PEER_PRIVILEGED.getPeerListFromServer);\n\n          addEventListener(SkylinkConstants.EVENTS.GET_PEERS_STATE_CHANGE, executeCallbackAndRemoveEvtListener);\n        }\n      } catch (error) {\n        logger.log.ERROR(error);\n        reject(error);\n      }\n    });\n  }\n}\n\nexport default PeerPrivileged;\n","import {\n  TURN_TRANSPORT,\n  AUDIO_CODEC,\n  VIDEO_CODEC,\n} from '../../constants';\n\n/**\n * @namespace initOptions\n * @private\n * @module skylink/defaultOptions\n */\nconst defaultOptions = {\n  /*\n   * @param {String} options.appKey The App Key.\n   * <small>By default, <code>init()</code> uses [HTTP CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing)\n   * authentication. For credentials based authentication, see the <code>options.credentials</code> configuration\n   * below. You can know more about the <a href=\"http://support.temasys.io/support/solutions/articles/\n   * 12000002712-authenticating-your-application-key-to-start-a-connection\">in the authentication methods article here</a>\n   * for more details on the various authentication methods.</small>\n   * <small>If you are using the Persistent Room feature for scheduled meetings, you will require to\n   * use the credential based authentication. See the <a href=\"http://support.temasys.io/support\n   * /solutions/articles/12000002811-using-the-persistent-room-feature-to-configure-meetings\">Persistent Room article here\n   * </a> for more information.</small>\n   */\n  defaultRoom: new Date().valueOf(),\n  appKey: null,\n  roomServer: '//api.temasys.io',\n  enableDataChannel: true,\n  enableSTUNServer: true,\n  enableTURNServer: true,\n  socketServerPath: null,\n  enableStatsGathering: true,\n  audioFallback: true,\n  socketTimeout: 7000,\n  apiTimeout: 4000,\n  forceTURNSSL: false,\n  forceTURN: false,\n  forceSSL: true,\n  usePublicSTUN: false,\n  disableVideoFecCodecs: false,\n  disableComfortNoiseCodec: false,\n  disableREMB: false,\n  throttleShouldThrowError: false,\n  mcuUseRenegoRestart: true,\n  useEdgeWebRTC: false,\n  enableSimultaneousTransfers: true,\n  TURNServerTransport: TURN_TRANSPORT.ANY,\n  credentials: null,\n  filterCandidatesType: {\n    host: false,\n    srflx: false,\n    relay: false,\n  },\n  throttleIntervals: {\n    shareScreen: 10000,\n    refreshConnection: 5000,\n    getUserMedia: 0,\n  },\n  iceServer: null,\n  socketServer: null,\n  audioCodec: AUDIO_CODEC.AUTO,\n  videoCodec: VIDEO_CODEC.AUTO,\n  codecParams: {\n    audio: {\n      opus: {\n        stereo: null,\n        'sprop-stereo': null,\n        usedtx: null,\n        useinbandfec: null,\n        maxplaybackrate: null,\n        minptime: null,\n      },\n    },\n    video: {\n      h264: {\n        profileLevelId: null,\n        levelAsymmetryAllowed: null,\n        packetizationMode: null,\n      },\n      vp8: {\n        maxFs: null,\n        maxFr: null,\n      },\n      vp9: {\n        maxFs: null,\n        maxFr: null,\n      },\n    },\n  },\n  beSilentOnStatsLogs: false,\n  beSilentOnParseLogs: false,\n};\n\n/**\n * Default values for options available to initialise SkylinkJS.\n */\nexport default defaultOptions;\n","/**\n * @classdesc Class representing a Skylink Room.\n * @class SkylinkRoom\n * @private\n */\nclass SkylinkRoom {\n  /**\n   * @param {RawApiResponse} rawApiResponse - API response received from the API Server\n   * @private\n   */\n  constructor(rawApiResponse) {\n    /**\n     * The room's id\n     * @type {String}\n     */\n    this.id = rawApiResponse.room_key;\n    /**\n     * The room's credentials\n     * @type {String}\n     */\n    this.token = rawApiResponse.roomCred;\n    /**\n     * The room start time\n     * @type {Date}\n     */\n    this.startDateTime = rawApiResponse.start;\n    /**\n     * The maximum allowed room duration\n     * @type {number}\n     */\n    this.duration = rawApiResponse.len;\n    /**\n     * The room name\n     * @type {String}\n     */\n    this.roomName = rawApiResponse.roomName;\n    /**\n     * The peer connection configuration\n     * @type {{mediaConstraints: any, peerConstraints: any, offerConstraints: any, peerConfig: {iceServers: Array}, sdpConstraints: {mandatory: {OfferToReceiveAudio: boolean, OfferToReceiveVideo: boolean}}}}\n     */\n    this.connection = {\n      peerConstraints: JSON.parse(rawApiResponse.pc_constraints),\n      offerConstraints: JSON.parse(rawApiResponse.offer_constraints),\n      sdpConstraints: {\n        mandatory: {\n          OfferToReceiveAudio: true,\n          OfferToReceiveVideo: true,\n        },\n      },\n      peerConfig: {\n        iceServers: [],\n      },\n      mediaConstraints: JSON.parse(rawApiResponse.media_constraints),\n    };\n  }\n\n  /**\n   * Get the ID/KEY of this room\n   * @return {String} id - The generated ID of the room\n   * @private\n   */\n  getRoomKey() {\n    return this.id;\n  }\n\n  /**\n   * Get the name of this room\n   * @return {String} roomName - The name of this room\n   * @private\n   */\n  getRoomName() {\n    return this.roomName;\n  }\n}\n\nexport default SkylinkRoom;\n","/**\n * @classdesc Class representing a Skylink User.\n * @class\n * @private\n */\nclass SkylinkUser {\n  /**\n   * @param {RawApiResponse} rawApiResponse - API response received from the API Server\n   */\n  constructor(rawApiResponse) {\n    /**\n     * The user id of the user\n     * @type {String}\n     */\n    this.uid = rawApiResponse.username;\n    /**\n     * The user credentials or token of the user\n     * @type {String}\n     */\n    this.token = rawApiResponse.userCred;\n    /**\n     * TimeStamp returned by API\n     * @type {Date}\n     */\n    this.timeStamp = rawApiResponse.timeStamp;\n    /**\n     * Information about this user\n     * @type {JSON}\n     */\n    this.info = {};\n    /**\n     * The socket ID of the user\n     * @type {JSON}\n     */\n    this.sid = null;\n    /**\n     * The status of whether messages via signaling server should be buffered. Messages will be buffered if it is not a handshake message and\n     * enter message has not been sent by the user.\n     * @type {Null|Boolean} Null when uninitialized i.e. no messages have been added to buffer, true when initialized i.e. messages have been\n     * added to buffer and false when enter message has been sent\n     */\n    this.bufferMessage = null;\n  }\n}\n\nexport default SkylinkUser;\n","/* eslint-disable camelcase */\nimport logger from '../logger/index';\nimport SkylinkRoom from './skylink-room';\nimport SkylinkUser from './skylink-user';\n/**\n * @classdesc Class representing a Skylink API response.\n * @class SkylinkApiResponse\n * @private\n * @param {RawApiResponse} rawApiResponse - API response received from the API Server\n */\nclass SkylinkApiResponse {\n  constructor(rawApiResponse) {\n    const {\n      offer_constraints,\n      pc_constraints,\n      cid,\n      apiOwner,\n      ipSigserver,\n      isPrivileged,\n      autoIntroduce,\n      httpPortList,\n      httpsPortList,\n      hasMCU,\n      ipSigserverPath,\n      hasPersistentMessage,\n    } = rawApiResponse;\n\n    if (!offer_constraints && !pc_constraints) {\n      logger.log.ERROR(['API', null, 'init', 'pc_constraints or offer_constraints are null']);\n    }\n    logger.log.DEBUG(['API', null, 'init', 'Parsed Peer Connection constraints:'], JSON.parse(pc_constraints));\n    logger.log.DEBUG(['API', null, 'init', 'Parsed Offer constraints'], JSON.parse(offer_constraints));\n\n    /**\n     * This is the cid received from API\n     * @type {String}\n     */\n    this.key = cid;\n    /**\n     * The owner of the App Key\n     * @type {String}\n     */\n    this.appKeyOwner = apiOwner;\n    /**\n     * If the App Key has privileged option enabled\n     * @type {boolean}\n     */\n    this.isPrivileged = isPrivileged;\n    /**\n     * If the App Key has autoIntroduce option enabled\n     * @type {boolean}\n     */\n    this.autoIntroduce = autoIntroduce;\n    /**\n     * The instance of SkylinkRoom\n     * @type {SkylinkRoom}\n     */\n    this.room = new SkylinkRoom(rawApiResponse);\n    /**\n     * The instance of SkylinkUser\n     * @type {SkylinkUser}\n     */\n    this.user = new SkylinkUser(rawApiResponse);\n    /**\n     * If the key has MCU enabled\n     * @type Boolean\n     */\n    this.hasMCU = hasMCU;\n    /**\n     * The endpoint of the signaling server\n     * @type {String}\n     */\n    this.socketServer = ipSigserver;\n    /**\n     * The socket server version path of the signaling server\n     * @type {String}\n     */\n    this.socketServerPath = ipSigserverPath;\n    /**\n     * The socket server ports\n     * @type {String}\n     */\n    this.socketPorts = {\n      'http:': Array.isArray(httpPortList) && httpPortList.length > 0 ? httpPortList : [80, 3000],\n      'https:': Array.isArray(httpsPortList) && httpsPortList.length > 0 ? httpsPortList : [443, 3443],\n    };\n\n    this.hasPersistentMessage = hasPersistentMessage;\n  }\n}\n\nexport default SkylinkApiResponse;\n","import MESSAGES from '../../messages';\nimport logger from '../../logger/index';\nimport SessionDescription from '../../session-description';\nimport ApiResponse from '../../models/api-response';\nimport { readyStateChange } from '../../skylink-events';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport {\n  API_VERSION,\n  READY_STATE_CHANGE,\n  READY_STATE_CHANGE_ERROR,\n  SDK_NAME,\n  SDK_VERSION,\n  SIGNALING_VERSION,\n} from '../../constants';\nimport Skylink from '../../index';\n\nconst getEndPoint = (options) => {\n  const {\n    roomServer,\n    appKey,\n    defaultRoom,\n    credentials,\n    forceSSL,\n  } = options;\n  let path = `${roomServer}/api/${appKey}/${defaultRoom}`;\n  let urlChar = '?';\n  path = forceSSL ? `https:${path}` : `${window.location.protocol}${path}`;\n\n  if (credentials) {\n    const { startDateTime, duration } = credentials;\n    path += `/${startDateTime}/${duration}?cred=${credentials.credentials}`;\n    urlChar = '&';\n  }\n\n  path += `${urlChar}rand=${Date.now()}`;\n  return path;\n};\n\nconst logAPIResponse = (response) => {\n  const { status, ok } = response;\n  const loggerMethod = ok ? 'INFO' : 'ERROR';\n  let message = MESSAGES.INIT.INFO.API_SUCCESS;\n  if (!ok) {\n    message = MESSAGES.INIT.ERRORS.AUTH_GENERAL;\n    if (status === 403) {\n      message = MESSAGES.INIT.ERRORS.AUTH_CORS;\n    }\n  }\n  logger.log[loggerMethod](['API', null, 'auth', message], response);\n};\n\nexport const validateOptions = (options) => {\n  const { appKey } = options;\n  const toReturn = {\n    isValid: true,\n    message: '',\n  };\n  logger.log.INFO(['API', null, 'init', 'API initialised with options:'], options);\n  if (!appKey) {\n    toReturn.isValid = false;\n    toReturn.message = MESSAGES.INIT.ERRORS.NO_APP_KEY;\n    dispatchEvent(readyStateChange({\n      readyState: READY_STATE_CHANGE.ERROR,\n      error: {\n        status: -2,\n        content: new Error(MESSAGES.INIT.ERRORS.NO_APP_KEY),\n        errorCode: READY_STATE_CHANGE_ERROR.NO_PATH,\n      },\n      room: null,\n    }));\n  }\n  if (!toReturn.isValid) {\n    logger.log.ERROR(['API', null, 'init', toReturn.message]);\n  }\n  return toReturn;\n};\n\nexport const validateAPIResponse = (response) => {\n  const { ok } = response;\n  logAPIResponse(response);\n  return ok;\n};\n\nexport const parseAndMutateOptions = (options) => {\n  const updatedOptions = options;\n  // Force TURN connections should enforce settings.\n  if (updatedOptions.forceTURN === true) {\n    updatedOptions.enableTURNServer = true;\n    updatedOptions.enableSTUNServer = false;\n    updatedOptions.filterCandidatesType.host = true;\n    updatedOptions.filterCandidatesType.srflx = true;\n    updatedOptions.filterCandidatesType.relay = false;\n  }\n\n  return updatedOptions;\n};\n\nexport const enforceUserInitOptions = (apiResponse) => {\n  const userInitOptions = Skylink.getUserInitOptions();\n  const initOptions = Skylink.getInitOptions();\n  let updatedInitOptions = Object.assign(initOptions, apiResponse, userInitOptions);\n  const optionsValidity = validateOptions(updatedInitOptions);\n\n  if (!optionsValidity.isValid) {\n    throw new Error(optionsValidity.message);\n  }\n\n  updatedInitOptions = parseAndMutateOptions(updatedInitOptions);\n  Skylink.setInitOptions(updatedInitOptions);\n\n  return updatedInitOptions;\n};\n\nexport const authenticateApp = async (options) => {\n  const { fetch } = window;\n  const endpoint = getEndPoint(options);\n  const apiResponse = await fetch(endpoint, {\n    headers: {\n      Skylink_SDK_type: SDK_NAME.WEB,\n      Skylink_SDK_version: SDK_VERSION,\n      Skylink_API_version: API_VERSION,\n      'X-Server-Select': SIGNALING_VERSION,\n    },\n  });\n\n  return {\n    endpoint,\n    response: apiResponse,\n  };\n};\n\nexport const parseAPIResponseBody = (responseBody) => {\n  const apiResponse = new ApiResponse(responseBody);\n  return apiResponse;\n};\n\nconst testRTCPeerConnection = () => {\n  try {\n    const p = new window.RTCPeerConnection(null);\n    // IE returns as typeof object\n    return ['object', 'function'].indexOf(typeof p.createOffer) > -1 && p.createOffer !== null;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const webRTCReadyOperations = () => {\n  const { AdapterJS } = window;\n  const returnObject = {\n    ready: true,\n    message: '',\n  };\n  if (!testRTCPeerConnection()) {\n    if (window.RTCPeerConnection && AdapterJS.webrtcDetectedType === 'plugin') {\n      returnObject.message = 'Plugin is not available. Please check plugin status.';\n    } else {\n      returnObject.message = 'WebRTC not supported. Please upgrade your browser';\n    }\n    returnObject.ready = false;\n    dispatchEvent(readyStateChange({\n      readyState: READY_STATE_CHANGE.ERROR,\n      error: {\n        status: -2,\n        content: new Error(AdapterJS.webrtcDetectedType === 'plugin' && window.RTCPeerConnection ? 'Plugin is not available' : 'WebRTC not available'),\n        errorCode: READY_STATE_CHANGE_ERROR.NO_WEBRTC_SUPPORT,\n      },\n      room: null,\n    }));\n  }\n  return returnObject;\n};\n\nexport const codecSupport = roomKey => new Promise((resolve, reject) => {\n  SessionDescription.getCodecsSupport(roomKey)\n    .then((currentCodecSupport) => {\n      const state = Skylink.getSkylinkState(roomKey);\n      const { room } = state;\n\n      if (Object.keys(currentCodecSupport.audio).length === 0 && Object.keys(currentCodecSupport.video).length === 0) {\n        logger.log.ERROR(MESSAGES.JOIN_ROOM.ERRORS.CODEC_SUPPORT);\n        dispatchEvent(readyStateChange({\n          readyState: READY_STATE_CHANGE.ERROR,\n          error: {\n            status: -2,\n            content: new Error(MESSAGES.JOIN_ROOM.ERRORS.CODEC_SUPPORT),\n            errorCode: READY_STATE_CHANGE_ERROR.PARSE_CODECS,\n          },\n          room: room.roomName,\n        }));\n        reject(new Error(MESSAGES.JOIN_ROOM.ERRORS.CODEC_SUPPORT));\n      } else {\n        resolve(true);\n      }\n\n      state.currentCodecSupport = currentCodecSupport;\n      Skylink.setSkylinkState(state);\n    })\n    .catch((error) => {\n      const state = Skylink.getSkylinkState(roomKey);\n      const { room } = state;\n\n      logger.log.ERROR(error);\n      dispatchEvent(readyStateChange({\n        readyState: READY_STATE_CHANGE.ERROR,\n        error: {\n          status: -2,\n          content: new Error(error.message || error.toString()),\n          errorCode: READY_STATE_CHANGE_ERROR.PARSE_CODECS,\n        },\n        room: room.roomName,\n      }));\n      reject(new Error(error.message || error.toString()));\n    });\n});\n","/* eslint-disable class-methods-use-this */\nimport defaultOptions from './defaultOptions';\nimport { validateDepencies } from '../../compatibility/index';\nimport {\n  authenticateApp,\n  parseAndMutateOptions,\n  validateOptions,\n  parseAPIResponseBody,\n  validateAPIResponse,\n  webRTCReadyOperations,\n  codecSupport,\n  enforceUserInitOptions,\n} from './api-helpers';\nimport Skylink from '../../index';\nimport { getStateByKey } from '../../utils/helpers';\nimport { dispatchEvent } from '../../utils/skylinkEventManager';\nimport { READY_STATE_CHANGE, READY_STATE_CHANGE_ERROR } from '../../constants';\nimport { readyStateChange } from '../../skylink-events';\n\nlet instance = null;\n\n/**\n * @class\n * @classdesc Singleton class that represents a API server.\n * @private\n */\nclass SkylinkAPIServer {\n  constructor() {\n    if (!instance) {\n      instance = this;\n    }\n\n    this.options = {};\n\n    return instance;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  init(options = defaultOptions) {\n    if (options) {\n      if (options.socketServer) { // set socketServerPath to override socketServerPath value returned from api that only works with default sig\n        // server url\n        // eslint-disable-next-line no-param-reassign\n        options.socketServerPath = '';\n      }\n      Skylink.setUserInitOptions(options);\n    }\n    dispatchEvent(readyStateChange({\n      readyState: READY_STATE_CHANGE.INIT,\n      error: null,\n      room: null,\n    }));\n    const dependencies = validateDepencies();\n    const { AdapterJS } = window;\n    if (!dependencies.fulfilled) {\n      dispatchEvent(readyStateChange({\n        readyState: READY_STATE_CHANGE.ERROR,\n        error: {\n          status: -2,\n          content: new Error(dependencies.message),\n          errorCode: dependencies.readyStateChangeErrorCode,\n        },\n        room: null,\n      }));\n      throw new Error(dependencies.message);\n    }\n\n    let initOptions = Object.assign({}, defaultOptions, options);\n    const optionsValidity = validateOptions(initOptions);\n    if (!optionsValidity.isValid) {\n      throw new Error(optionsValidity.message);\n    }\n    AdapterJS.webRTCReady(() => {\n      const webrtcReady = webRTCReadyOperations();\n      if (!webrtcReady.ready) {\n        throw new Error(webrtcReady.message);\n      }\n    });\n    initOptions = parseAndMutateOptions(initOptions);\n    return initOptions;\n  }\n\n  createRoom(room) {\n    return new Promise((resolve, reject) => {\n      const initOptions = Skylink.getInitOptions();\n      initOptions.defaultRoom = room;\n      authenticateApp(initOptions).then((result) => {\n        const { endpoint, response } = result;\n        const isResponseValid = validateAPIResponse(response);\n        if (isResponseValid) {\n          dispatchEvent(readyStateChange({\n            readyState: READY_STATE_CHANGE.COMPLETED,\n            error: null,\n            room,\n          }));\n          response.json().then((apiResponse) => {\n            resolve({\n              endpoint,\n              response: apiResponse,\n            });\n          });\n        } else {\n          dispatchEvent(readyStateChange({\n            readyState: READY_STATE_CHANGE.ERROR,\n            error: {\n              status: response.status,\n              content: new Error(response.info || `XMLHttpRequest status not OK\\nStatus was: ${response.status}`),\n              errorCode: response.error || response.status,\n            },\n            room,\n          }));\n          reject(response.json());\n        }\n      }).catch((error) => {\n        dispatchEvent(readyStateChange({\n          readyState: READY_STATE_CHANGE.ERROR,\n          error: {\n            status: error.status || -1,\n            content: new Error(error.message || 'Network error occurred'),\n            errorCode: READY_STATE_CHANGE_ERROR.XML_HTTP_REQUEST_ERROR,\n          },\n          room,\n        }));\n      });\n    });\n  }\n\n  checkCodecSupport(roomKey) {\n    return codecSupport(roomKey);\n  }\n\n  static parseAPIResponseBody(response) {\n    return parseAPIResponseBody(response);\n  }\n\n  enforceUserInitOptions(response) {\n    return enforceUserInitOptions(response);\n  }\n\n  static getRoomNameFromParams(params) {\n    const initOptions = Skylink.getInitOptions();\n    const { roomName } = params;\n    const { defaultRoom } = initOptions;\n    let room = null;\n    if (typeof roomName !== 'undefined' && roomName !== '' && defaultRoom !== roomName) {\n      room = roomName;\n    } else {\n      room = defaultRoom;\n    }\n    return room;\n  }\n\n  static getStateByKey(roomKey) {\n    return getStateByKey(roomKey);\n  }\n}\n\nexport default SkylinkAPIServer;\n","import Skylink, { SkylinkConstants } from '../index';\nimport {\n  SERVER_PEER_TYPE, PEER_CONNECTION_STATE, DATA_CHANNEL_STATE, PEER_TYPE,\n} from '../constants';\nimport PeerData from '../peer-data';\nimport { SkylinkSignalingServer } from '../server-communication/index';\nimport { peerLeft, serverPeerLeft } from '../skylink-events';\nimport { dispatchEvent, addEventListener, removeEventListener } from '../utils/skylinkEventManager';\nimport logger from '../logger/index';\nimport PeerConnection from '../peer-connection/index';\nimport stopStreamHelpers from '../media-stream/helpers/stopStream/index';\nimport ScreenSharing from '../features/screen-sharing';\nimport MESSAGES from '../messages';\nimport { isEmptyArray } from '../utils/helpers';\n\n/**\n * Emits the peerLeft event when current peer left the room.\n * @param {SkylinkState} state\n * @param {String} peerId\n * @private\n */\nconst executePeerLeftProcess = (state, peerId) => new Promise((resolve) => {\n  const { room, peerConnections } = state;\n  const { ROOM: { LEAVE_ROOM } } = MESSAGES;\n  const { enableDataChannel } = Skylink.getInitOptions();\n\n  logger.log.INFO([peerId, room.roomName, null, LEAVE_ROOM.PEER_LEFT.START]);\n\n  if (peerId === PEER_TYPE.MCU) {\n    dispatchEvent(serverPeerLeft({\n      peerId,\n      serverPeerType: SERVER_PEER_TYPE.MCU,\n      room,\n    }));\n  } else {\n    dispatchEvent(peerLeft({\n      peerId,\n      peerInfo: PeerData.getCurrentSessionInfo(room),\n      isSelf: false,\n      room,\n    }));\n  }\n\n  if (peerConnections[peerId] && peerConnections[peerId].signalingState !== PEER_CONNECTION_STATE.CLOSED) {\n    PeerConnection.closePeerConnection(state, peerId);\n  }\n\n  if (enableDataChannel) {\n    addEventListener(SkylinkConstants.EVENTS.DATA_CHANNEL_STATE, (evt) => {\n      const { detail } = evt;\n      if (detail.state === DATA_CHANNEL_STATE.CLOSED || detail.state === DATA_CHANNEL_STATE.CLOSING) {\n        logger.log.INFO([detail.peerId, room.roomName, null, LEAVE_ROOM.PEER_LEFT.SUCCESS]);\n        resolve(detail.peerId);\n      }\n    });\n\n    PeerConnection.closeDataChannel(state, peerId);\n  } else {\n    resolve(peerId);\n  }\n});\n\n/**\n * Method that sends a bye message to the all the peers in order remove the peer information or disconnects the socket connection.\n * @param state\n * @returns {Promise<SkylinkState>}\n * @private\n */\nconst sendByeOrDisconnectSocket = state => new Promise((resolve) => {\n  const updatedState = Skylink.getSkylinkState(state.room.id);\n  const { room, peerConnections } = updatedState;\n  const { ROOM: { LEAVE_ROOM } } = MESSAGES;\n  const skylinkSignalingServer = new SkylinkSignalingServer();\n  const isInMoreThanOneRoom = Object.keys(Skylink.getSkylinkState()).length > 1;\n\n  updatedState.inRoom = false;\n  Skylink.setSkylinkState(updatedState, room.id);\n\n  if (isInMoreThanOneRoom) {\n    // broadcast bye to all peers in the room if there is more than one room\n    logger.log.INFO([room.roomName, null, null, LEAVE_ROOM.SENDING_BYE]);\n    Object.keys(peerConnections).forEach((peerId) => {\n      skylinkSignalingServer.bye(updatedState, peerId);\n    });\n    resolve(updatedState);\n  } else {\n    // disconnect socket if it is the last room\n    skylinkSignalingServer.config = skylinkSignalingServer.resetSocketConfig(window.location.protocol);\n\n    const handleChannelClose = () => {\n      logger.log.INFO([room.roomName, null, null, LEAVE_ROOM.DISCONNECT_SOCKET.SUCCESS]);\n      removeEventListener(SkylinkConstants.EVENTS.CHANNEL_CLOSE, handleChannelClose);\n      resolve(updatedState);\n    };\n\n    addEventListener(SkylinkConstants.EVENTS.CHANNEL_CLOSE, handleChannelClose);\n\n    if (skylinkSignalingServer.socket.connected) {\n      skylinkSignalingServer.socket.disconnect();\n    } else {\n      resolve(updatedState);\n    }\n  }\n});\n\n/**\n * Stops streams within a Skylink state.\n * @private\n * @param {SkylinkState} state\n */\nconst stopStreams = (state) => {\n  const { room, streams } = state;\n\n  if (streams.userMedia) {\n    stopStreamHelpers.prepStopStreams(room.id, null, true);\n  }\n\n  if (streams.screenshare) {\n    new ScreenSharing(state).stop(true);\n  }\n};\n\nconst clearRoomState = (roomKey) => {\n  Skylink.clearRoomStateFromSingletons(roomKey);\n  Skylink.removeSkylinkState(roomKey);\n};\n\n/**\n * Method that starts the peer left process.\n * @param {SkylinkState} roomState\n * @private\n */\nexport const leaveRoom = roomState => new Promise((resolve, reject) => {\n  const {\n    peerConnections, peerInformations, room, hasMCU, user,\n  } = roomState;\n  const { ROOM: { LEAVE_ROOM } } = MESSAGES;\n\n  try {\n    const peerIds = hasMCU ? [PEER_TYPE.MCU] : Array.from(new Set([...Object.keys(peerConnections), ...Object.keys(peerInformations)]));\n\n    if (isEmptyArray(peerIds)) {\n      logger.log.DEBUG([room.roomName, null, null, LEAVE_ROOM.NO_PEERS]);\n      stopStreams(roomState);\n      sendByeOrDisconnectSocket(roomState)\n        .then((removedState) => {\n          logger.log.INFO([room.roomName, null, null, LEAVE_ROOM.REMOVE_STATE.SUCCESS]);\n          dispatchEvent(peerLeft({\n            peerId: user.sid,\n            peerInfo: PeerData.getCurrentSessionInfo(room),\n            isSelf: true,\n            room,\n          }));\n          clearRoomState(removedState.room.id);\n          resolve(removedState.room.roomName);\n        });\n    } else {\n      const peerLeftPromises = [];\n\n      peerIds.forEach((peerId) => {\n        peerLeftPromises.push(executePeerLeftProcess(roomState, peerId));\n      });\n\n      Promise.all(peerLeftPromises)\n        .then(() => {\n          stopStreams(roomState);\n          return sendByeOrDisconnectSocket(roomState);\n        })\n        .then((removedState) => {\n          logger.log.INFO([room.roomName, null, null, LEAVE_ROOM.REMOVE_STATE.SUCCESS]);\n          dispatchEvent(peerLeft({\n            peerId: user.sid,\n            peerInfo: PeerData.getCurrentSessionInfo(room),\n            isSelf: true,\n            room,\n          }));\n          clearRoomState(removedState.room.id);\n          resolve(removedState.room.roomName);\n        });\n    }\n  } catch (error) {\n    logger.log.ERROR([room.roomName, null, null, LEAVE_ROOM.ERROR], error);\n    reject(error);\n  }\n});\n\n/**\n * Method that triggers self to leave all rooms.\n * @param {Array} closedRooms - Array of rooms that have been left\n * @param {Array} resolves - Array of resolves for each room that have been left\n * @private\n */\nexport const leaveAllRooms = (closedRooms = [], resolves = []) => new Promise((resolve, reject) => {\n  const { ROOM: { LEAVE_ROOM } } = MESSAGES;\n\n  try {\n    const states = Skylink.getSkylinkState();\n    const roomStates = Object.values(states);\n\n    if (roomStates[0]) { // Checks for existing roomStates and picks the first in the array\n      leaveRoom(roomStates[0])\n        .then((roomName) => {\n          closedRooms.push(roomName);\n          resolves.push(resolve);\n          leaveAllRooms(closedRooms, resolves);\n        });\n    } else {\n      logger.log.INFO([closedRooms, 'Room', null, LEAVE_ROOM.LEAVE_ALL_ROOMS.SUCCESS]);\n      resolves.forEach(res => res(closedRooms)); // resolves all promises\n    }\n  } catch (err) {\n    logger.log.ERROR([null, 'Room', null, LEAVE_ROOM.LEAVE_ALL_ROOMS.ERROR], err);\n    reject(err);\n  }\n});\n","import SkylinkStats from './index';\nimport Skylink from '../index';\nimport { SDK_NAME } from '../constants';\n\nclass HandleClientStats extends SkylinkStats {\n  constructor() {\n    super();\n    const { AdapterJS, navigator } = window;\n    this.model = {\n      client_id: null,\n      appKey: null,\n      timestamp: null,\n      username: null,\n      sdk_name: SDK_NAME.WEB,\n      sdk_version: null,\n      agent_name: AdapterJS.webrtcDetectedBrowser,\n      agent_version: AdapterJS.webrtcDetectedVersion,\n      agent_platform: navigator.platform,\n      agent_plugin_version: (AdapterJS.WebRTCPlugin.plugin && AdapterJS.WebRTCPlugin.plugin.VERSION) || null,\n      device_version: null,\n      enumerated_devices: null,\n      device_muted: null,\n      network_type: navigator.connection ? navigator.connection.type : '-',\n      language: navigator.language,\n    };\n  }\n\n  send(roomKey) {\n    const roomState = Skylink.getSkylinkState(roomKey);\n\n    this.model.username = (roomState.user && roomState.user.uid) || null;\n    this.model.sdk_version = roomState.VERSION;\n    this.model.client_id = roomState.clientId;\n    this.model.appKey = Skylink.getInitOptions().appKey;\n    this.model.timestamp = (new Date()).toISOString();\n\n    this.postStats(this.endpoints.client, this.model);\n  }\n}\n\nexport default HandleClientStats;\n","import { DATA_TRANSFER_DATA_TYPE, SM_PROTOCOL_VERSION, DT_PROTOCOL_VERSION } from '../constants';\nimport { generateUUID } from '../utils/helpers';\n\n/**\n * @class\n * @classdesc Class representing a Skylink State.\\\n * @private\n */\nclass SkylinkState {\n  /**\n   * @property {SkylinkApiResponse} skylinkApiResponse\n   */\n  constructor(initOptions) {\n    /**\n     * Stores the list of Peer DataChannel connections.\n     * @name dataChannels\n     * @type {Object}\n     * @property {String} peerId - The list of DataChannels associated with Peer ID.\n     * @property {RTCDataChannel} channeLabel - The DataChannel connection.\n     * The property name <code>\"main\"</code> is reserved for messaging Datachannel type.\n     * @since 0.2.0\n     * @private\n     */\n    this.dataChannels = {};\n    /**\n     * Stores the list of data transfers from / to Peers.\n     * @name dataTransfers\n     * @property {JSON} #transferId The data transfer session.\n     * @type JSON\n     * @since 0.6.16\n     * @private\n     */\n    this.dataTransfers = {};\n    /**\n     * Stores the list of sending data streaming sessions to Peers.\n     * @name dataStreams\n     * @property {JSON} #streamId The data stream session.\n     * @type JSON\n     * @since 0.6.18\n     * @private\n     */\n    this.dataStreams = {};\n    /**\n     * Stores the list of buffered ICE candidates that is received before\n     *   remote session description is received and set.\n     * @name peerCandidatesQueue\n     * @property {Array} <#peerId> The list of the Peer connection buffered ICE candidates received.\n     * @property {RTCIceCandidate} <#peerId>.<#index> The Peer connection buffered ICE candidate received.\n     * @type JSON\n     * @since 0.5.1\n     * @private\n     */\n    this.peerCandidatesQueue = {};\n    /**\n     * Stores the list of ICE candidates received before signaling end.\n     * @name peerEndOfCandidatesCounter\n     * @type JSON\n     * @since 0.6.16\n     * @private\n     */\n    this.peerEndOfCandidatesCounter = {};\n    /**\n     * Stores the list of Peer connection ICE candidates.\n     * @name gatheredCandidates\n     * @property {JSON} <#peerId> The list of the Peer connection ICE candidates.\n     * @property {JSON} <#peerId>.sending The list of the Peer connection ICE candidates sent.\n     * @property {JSON} <#peerId>.receiving The list of the Peer connection ICE candidates received.\n     * @type JSON\n     * @since 0.6.14\n     * @private\n     */\n    this.gatheredCandidates = {};\n    /**\n     * Stores the window number of Peer connection retries that would increase the wait-for-response timeout\n     *   for the Peer connection health timer.\n     * @name retryCounters\n     * @type JSON\n     * @since 0.5.10\n     * @private\n     */\n    this.retryCounters = {};\n    /**\n     * Stores the list of the Peer connections.\n     * @name peerConnections\n     * @property {RTCPeerConnection} <#peerId> The Peer connection.\n     * @type JSON\n     * @since 0.1.0\n     * @private\n     */\n    this.peerConnections = {};\n    /**\n     * Stores the list of the Peer connections stats.\n     * @name peerStats\n     * @property {JSON} <#peerId> The Peer connection stats.\n     * @type JSON\n     * @since 0.6.16\n     * @private\n     */\n    this.peerStats = {};\n    /**\n     * Stores the list of the Peer connections stats.\n     * @name peerBandwidth\n     * @property {JSON} <#peerId> The Peer connection stats.\n     * @type JSON\n     * @since 0.6.16\n     * @private\n     */\n    this.peerBandwidth = {};\n    /**\n     * Stores the list of the Peer custom configs.\n     * @name peerCustomConfigs\n     * @type JSON\n     * @since 0.6.18\n     * @private\n     */\n    this.peerCustomConfigs = {};\n    /**\n     * Stores the list of Peers session information.\n     * @name peerInformations\n     * @property {JSON} <#peerId> The Peer session information.\n     * @property {JSON|string} <#peerId>.userData The Peer custom data.\n     * @property {JSON} <#peerId>.settings The Peer streaming information.\n     * @property {JSON} <#peerId>.mediaStatus The Peer streaming media status.\n     * @property {JSON} <#peerId>.agent The Peer agent information.\n     * @type JSON\n     * @since 0.3.0\n     * @private\n     */\n    this.peerInformations = {};\n    /**\n     * Stores the Signaling user credentials from the API response required for connecting to the Signaling server.\n     * @name user\n     * @property {String} uid The API result \"username\".\n     * @property {String} token The API result \"userCred\".\n     * @property {String} timeStamp The API result \"timeStamp\".\n     * @property {String} sid The Signaling server receive user Peer ID.\n     * @type SkylinkUser\n     * @since 0.5.6\n     * @private\n     */\n    this.user = initOptions.user;\n    /**\n     * Stores the User custom data.\n     * By default, if no custom user data is set, it is an empty string <code>\"\"</code>.\n     * @name userData\n     * @type JSON|string\n     * @default \"\"\n     * @since 0.5.6\n     * @private\n     */\n    this.userData = '';\n    /**\n     * Stores the User connection priority weight.\n     * If Peer has a higher connection weight, it will do the offer from its Peer connection first.\n     * @name peerPriorityWeight\n     * @type number\n     * @since 0.5.0\n     * @private\n     */\n    this.peerPriorityWeight = 0;\n    /**\n     * Stores the flag that indicates if \"autoIntroduce\" is enabled.\n     * If enabled, the Peers connecting the same Room will receive each others \"enter\" message ping.\n     * @name autoIntroduce\n     * @type boolean\n     * @default true\n     * @since 0.6.1\n     * @private\n     */\n    this.autoIntroduce = initOptions.autoIntroduce;\n    /**\n     * Stores the flag that indicates if \"isPrivileged\" is enabled.\n     * If enabled, the User has Privileged features which has the ability to retrieve the list of\n     *   Peers in the same App space with <code>getPeers()</code> method\n     *   and introduce Peers to each other with <code>introducePeer</code> method.\n     * @name isPrivileged\n     * @type boolean\n     * @default false\n     * @since 0.6.1\n     * @private\n     */\n    this.isPrivileged = initOptions.isPrivileged;\n    /**\n     * Stores the current Room name that User is connected to.\n     * @name selectedRoom\n     * @type string\n     * @since 0.3.0\n     * @private\n     */\n    this.selectedRoom = null;\n    /**\n     * Stores the flag that indicates if Room is locked.\n     * @name roomLocked\n     * @type boolean\n     * @since 0.5.2\n     * @private\n     */\n    this.roomLocked = false;\n    /**\n     * Stores the flag that indicates if User is connected to the Room.\n     * @name inRoom\n     * @type boolean\n     * @since 0.4.0\n     * @private\n     */\n    this.inRoom = false;\n    /**\n    /**\n     * Stores the timestamps data used for throttling.\n     * @name timestamp\n     * @type JSON\n     * @since 0.5.8\n     * @private\n     */\n    this.timestamp = {\n      socketMessage: null,\n      shareScreen: null,\n      refreshConnection: null,\n      getUserMedia: null,\n      lastRestart: null,\n    };\n    /**\n     * Stores the current socket connection information.\n     * @name socketSession\n     * @type {socketSession}\n     * @since 0.6.13\n     * @private\n     */\n    this.socketSession = {};\n    /**\n     * Stores the queued socket messages.\n     * This is to prevent too many sent over less than a second interval that might cause DROPPED messages\n     *   or jams to the Signaling connection.\n     * @name socketMessageQueue\n     * @type Array\n     * @since 0.5.8\n     * @private\n     */\n    this.socketMessageQueue = [];\n    /**\n     * Stores the <code>setTimeout</code> to sent queued socket messages.\n     * @name socketMessageTimeout\n     * @type Object\n     * @since 0.5.8\n     * @private\n     */\n    this.socketMessageTimeout = null;\n    /**\n     * Stores the list of socket ports to use to connect to the Signaling.\n     * These ports are defined by default which is commonly used currently by the Signaling.\n     * Should re-evaluate this sometime.\n     * @name socketPorts\n     * @property {Array} http: The list of HTTP socket ports.\n     * @property {Array} https: The list of HTTPS socket ports.\n     * @type JSON\n     * @since 0.5.8\n     * @private\n     */\n    this.socketPorts = initOptions.socketPorts;\n    /**\n     * Stores the flag that indicates if socket connection to the Signaling has opened.\n     * @name channelOpen\n     * @type boolean\n     * @since 0.5.2\n     * @private\n     */\n    this.channelOpen = false;\n    /**\n     * Stores the Signaling server url.\n     * @name signalingServer\n     * @type string\n     * @since 0.5.2\n     * @private\n     */\n    this.socketServer = initOptions.socketServer;\n    /**\n     * Stores the Signaling server protocol.\n     * @name signalingServerProtocol\n     * @type string\n     * @since 0.5.4\n     * @private\n     */\n    this.signalingServerProtocol = initOptions.forceSSL ? 'https:' : window.location.protocol;\n    /**\n     * Stores the Signaling server port.\n     * @name signalingServerPort\n     * @type number\n     * @since 0.5.4\n     * @private\n     */\n    this.signalingServerPort = null;\n    /**\n     * Stores the Signaling socket connection object.\n     * @name socket\n     * @type io\n     * @since 0.1.0\n     * @private\n     */\n    this.socket = null;\n    /**\n     * Stores the flag that indicates if XDomainRequest is used for IE 8/9.\n     * @name socketUseXDR\n     * @type boolean\n     * @since 0.5.4\n     * @private\n     */\n    this.socketUseXDR = false;\n    /**\n     * Stores the value if ICE restart is supported.\n     * @name enableIceRestart\n     * @type string\n     * @since 0.6.16\n     * @private\n     */\n    this.enableIceRestart = false;\n    /**\n     * Stores the flag if MCU environment is enabled.\n     * @name hasMCU\n     * @type boolean\n     * @since 0.5.4\n     * @private\n     */\n    this.hasMCU = initOptions.hasMCU;\n    /**\n     * Stores the construct API REST path to obtain Room credentials.\n     * @name path\n     * @type string\n     * @since 0.1.0\n     * @private\n     */\n    this.path = null;\n    /**\n     * Stores the current <code>init()</code> readyState.\n     * @name readyState\n     * @type number\n     * @since 0.1.0\n     * @private\n     */\n    /**\n     * Stores the \"cid\" used for <code>joinRoom()</code>.\n     * @name key\n     * @type string\n     * @since 0.1.0\n     * @private\n     */\n    this.key = initOptions.key;\n    /**\n     * Stores the \"apiOwner\" used for <code>joinRoom()</code>.\n     * @name appKeyOwner\n     * @type string\n     * @since 0.5.2\n     * @private\n     */\n    this.appKeyOwner = initOptions.appKeyOwner;\n    /**\n     * Stores the Room credentials information for <code>joinRoom()</code>.\n     * @name room\n     * @property {String} id The \"rid\" for <code>joinRoom()</code>.\n     * @property {String} token The \"roomCred\" for <code>joinRoom()</code>.\n     * @property {String} startDateTime The \"start\" for <code>joinRoom()</code>.\n     * @property {String} duration The \"len\" for <code>joinRoom()</code>.\n     * @property {String} connection The RTCPeerConnection constraints and configuration. This is not used in the SDK\n     *   except for the \"mediaConstraints\" property that sets the default <code>getUserMedia()</code> settings.\n     * @type SkylinkRoom\n     * @since 0.5.2\n     * @private\n     */\n    this.room = initOptions.room;\n    /**\n     * Stores the list of Peer messages timestamp.\n     * @name peerMessagesStamps\n     * @type JSON\n     * @since 0.6.15\n     * @private\n     */\n    this.peerMessagesStamps = {};\n    /**\n     * Stores the Streams.\n     * @name streams\n     * @type JSON\n     * @since 0.6.15\n     * @private\n     */\n    this.streams = {\n      userMedia: null,\n      screenshare: null,\n    };\n    /**\n     * Stores the default camera Stream settings.\n     * @name streamsDefaultSettings\n     * @type JSON\n     * @since 0.6.15\n     * @private\n     */\n    this.streamsDefaultSettings = {\n      userMedia: {\n        audio: {\n          stereo: false,\n        },\n        video: {\n          resolution: {\n            width: 640,\n            height: 480,\n          },\n          frameRate: 50,\n        },\n      },\n      screenshare: {\n        video: true,\n      },\n    };\n    /**\n     * Stores all the Stream required muted settings.\n     * @name streamsMutedSettings\n     * @type JSON\n     * @since 0.6.15\n     * @private\n     */\n    this.streamsMutedSettings = {};\n    /**\n     * Stores all the Stream sending maximum bandwidth settings.\n     * @name streamsBandwidthSettings\n     * @type JSON\n     * @since 0.6.15\n     * @private\n     */\n    this.streamsBandwidthSettings = {\n      googleX: {},\n      bAS: {},\n    };\n    /**\n     * Stores all the Stream stopped callbacks.\n     * @name streamsStoppedCbs\n     * @type JSON\n     * @since 0.6.15\n     * @private\n     */\n    /**\n     * Stores the session description settings.\n     * @name sdpSettings\n     * @type JSON\n     * @since 0.6.16\n     * @private\n     */\n    this.sdpSettings = {\n      connection: {\n        audio: true,\n        video: true,\n        data: true,\n      },\n      direction: {\n        audio: { send: true, receive: true },\n        video: { send: true, receive: true },\n      },\n    };\n    /**\n     * Stores the publish only settings.\n     * @name publishOnly\n     * @type boolean\n     * @since 0.6.16\n     * @private\n     */\n    this.publishOnly = false;\n    /**\n     * Stores the list of recordings.\n     * @name recordings\n     * @type JSON\n     * @since 0.6.16\n     * @private\n     */\n    this.recordings = {};\n    /**\n     * Stores the current active recording session ID.\n     * There can only be 1 recording session at a time in a Room\n     * @name currentRecordingId\n     * @type JSON\n     * @since 0.6.16\n     * @private\n     */\n    this.currentRecordingId = false;\n    /**\n     * Stores the recording session timeout to ensure 4 seconds has been recorded.\n     * @name recordingStartInterval\n     * @type number\n     * @since 0.6.16\n     * @private\n     */\n    this.recordingStartInterval = null;\n    /**\n     * Stores the currently supported codecs.\n     * @name currentCodecSupport\n     * @type JSON\n     * @since 0.6.18\n     * @private\n     */\n    this.currentCodecSupport = null;\n    /**\n     * Stores the session description orders and info.\n     * @name sdpSessions\n     * @type JSON\n     * @since 0.6.18\n     * @private\n     */\n    this.sdpSessions = {};\n    /**\n     * Stores the flag if voice activity detection should be enabled.\n     * @name voiceActivityDetection\n     * @type boolean\n     * @default true\n     * @since 0.6.18\n     * @private\n     */\n    this.voiceActivityDetection = true;\n    /**\n     * Stores the datachannel binary data chunk type.\n     * @name binaryChunkType\n     * @type JSON\n     * @since 0.6.18\n     * @private\n     */\n    this.binaryChunkType = DATA_TRANSFER_DATA_TYPE.ARRAY_BUFFER;\n    /**\n     * Stores the RTCPeerConnection configuration.\n     * @name peerConnectionConfig\n     * @type JSON\n     * @since 0.6.18\n     * @private\n     */\n    this.peerConnectionConfig = {};\n    /**\n     * Stores the auto bandwidth settings.\n     * @name bandwidthAdjuster\n     * @type JSON\n     * @since 0.6.18\n     * @private\n     */\n    this.bandwidthAdjuster = null;\n    /**\n     * Stores the Peer connection status.\n     * @name peerConnStatus\n     * @type JSON\n     * @since 0.6.19\n     * @private\n     */\n    this.peerConnStatus = {};\n    /**\n     * Stores the flag to temporarily halt joinRoom() from processing.\n     * @name joinRoomManager\n     * @type boolean\n     * @since 0.6.19\n     * @private\n     */\n    this.joinRoomManager = {\n      timestamp: 0,\n      socketsFn: [],\n    };\n    /**\n     * Stores the unique random number used for generating the \"client_id\".\n     * @name statIdRandom\n     * @type number\n     * @since 0.6.31\n     * @private\n     */\n    this.statIdRandom = Date.now() + Math.floor(Math.random() * 100000000);\n    /**\n     * Stores the list of RTMP Sessions.\n     * @name rtmpSessions\n     * @type JSON\n     * @since 0.6.36\n     * @private\n     */\n    this.rtmpSessions = {};\n    /**\n     * Stores the SM Protocol Version\n     * @type {String}\n     */\n    this.SMProtocolVersion = SM_PROTOCOL_VERSION;\n    /**\n     * Stores the DT Protocol Version\n     * @type {String}\n     */\n    this.DTProtocolVersion = DT_PROTOCOL_VERSION;\n    /**\n     * Originally negotiated DTLS role of this peer.\n     * @name originalDTLSRole\n     * @type string\n     * @since 1.0.0\n     * @private\n     */\n    this.originalDTLSRole = null;\n    /**\n     * Offer buffered in order to apply when received answer\n     * @name bufferedLocalOffer\n     * @type Object\n     * @private\n     * @since 1.0.0\n     */\n    this.bufferedLocalOffer = {};\n    /**\n     * Offers buffered in order to apply when answerAck has been received\n     * @name bufferedRemoteOffers\n     * @type Object\n     * @private\n     * @since 2.0.0\n     */\n    this.bufferedRemoteOffers = {};\n    /**\n     * Map of RTCRTPSenders that are added via addTrack\n     * @name currentRTCRTPSenders\n     * @type Object\n     * @private\n     * @since 1.0.0\n     */\n    this.currentRTCRTPSenders = {};\n    /**\n     * Stores the unique random number used for generating the \"client_id\".\n     * @name clientId\n     * @type string\n     * @private\n     * @since 0.6.31\n     */\n    this.clientId = generateUUID();\n    /**\n     * Stores all the Stream media status.\n     * @name streamsMediaStatus\n     * @type Object\n     * @private\n     * @since 1.0.0\n     */\n    this.streamsMediaStatus = {};\n    /**\n     * Stores the media info of all peers.\n     * @name peerMedias\n     * @type Object\n     * @private\n     * @since 2.0.0\n     */\n    this.peerMedias = {};\n    /**\n     * Stores the remote streams of all peers.\n     * @name remoteStreams\n     * @type Object\n     * @private\n     * @since 2.0.0\n     */\n    this.remoteStreams = {};\n    /**\n     * Stores the flag if messages should be persisted. Value determined by the hasPersistentMessage value returned from the API.\n     * This feature is enabled in the Temasys Developer Console by toggling the Persistent Message feature at the key level.\n     * @name hasPersistentMessage\n     * @type Object\n     * @private\n     * @since 2.0.0\n     */\n    this.hasPersistentMessage = initOptions.hasPersistentMessage;\n  }\n}\nexport default SkylinkState;\n","import Skylink from '../index';\nimport { SkylinkAPIServer, SkylinkSignalingServer } from '../server-communication/index';\nimport HandleClientStats from '../skylink-stats/handleClientStats';\nimport { dispatchEvent } from '../utils/skylinkEventManager';\nimport { readyStateChange } from '../skylink-events';\nimport * as constants from '../constants';\nimport SkylinkApiResponse from '../models/api-response';\nimport SkylinkState from '../models/skylink-state';\nimport MediaStream from '../media-stream/index';\n\n/**\n * @description Method that starts the Room Session.\n * @param {joinRoomOptions} [options] The options available to join the room and configure the session.\n * @param {MediaStream} [prefetchedStream] The prefetched media stream object obtained when the user calls getUserMedia before joinRoom.\n * @return {Promise} Promise object with MediaStream.\n * @memberOf Room\n * @alias Room.joinRoom\n * @private\n */\nconst joinRoom = (options = {}, prefetchedStream) => new Promise((resolve, reject) => {\n  const { navigator, AdapterJS } = window;\n  const apiServer = new SkylinkAPIServer();\n  const signalingServer = new SkylinkSignalingServer();\n  let initOptions = Skylink.getInitOptions();\n  const handleClientStats = new HandleClientStats();\n  const roomName = SkylinkAPIServer.getRoomNameFromParams(options) ? SkylinkAPIServer.getRoomNameFromParams(options) : initOptions.defaultRoom;\n\n  dispatchEvent(readyStateChange({\n    readyState: constants.READY_STATE_CHANGE.LOADING,\n    error: null,\n    room: roomName,\n  }));\n\n  apiServer.createRoom(roomName).then((result) => {\n    const { endpoint, response } = result;\n    response.roomName = roomName;\n    const skylinkApiResponse = new SkylinkApiResponse(response);\n    initOptions = apiServer.enforceUserInitOptions(skylinkApiResponse);\n    const skylinkState = new SkylinkState(initOptions);\n\n    skylinkState.userData = options.userData || '';\n    skylinkState.path = endpoint;\n    Skylink.setSkylinkState(skylinkState, roomName);\n\n    apiServer.checkCodecSupport(skylinkState.room.id).then(() => {\n      handleClientStats.send(skylinkState.room.id);\n      return signalingServer.createSocket(response.room_key).then(() => {\n        const room = SkylinkAPIServer.getStateByKey(response.room_key);\n        const userMediaParams = Object.assign({}, options);\n\n        userMediaParams.room = room;\n        if (prefetchedStream || (options.id && options.active)) { // check for prefetched stream as the only arg\n          MediaStream.usePrefetchedStream(response.room_key, prefetchedStream, options).then(() => {\n            signalingServer.joinRoom(room);\n            resolve(null);\n          }).catch((error) => {\n            reject(error);\n          });\n        } else if (options.audio || options.video) {\n          MediaStream.getUserMedia(skylinkState, userMediaParams).then((stream) => {\n            signalingServer.joinRoom(room);\n            resolve(stream);\n          }).catch((streamException) => {\n            reject(streamException);\n          });\n        } else {\n          // If no audio is requested for Safari, audio will not be heard on the Safari peer even if the remote peer has audio. Workaround to\n          // request media access but not add the track to the peer connection. Does not seem to apply to video.\n          if (AdapterJS.webrtcDetectedBrowser === constants.BROWSER_AGENT.SAFARI) {\n            navigator.mediaDevices.getUserMedia({ audio: true })\n              .then(() => signalingServer.joinRoom(room));\n          } else {\n            signalingServer.joinRoom(room);\n          }\n          resolve(null);\n        }\n      });\n    }).catch((codecError) => {\n      reject(codecError);\n    });\n  }).catch((socketException) => {\n    reject(socketException);\n  });\n});\n\nexport default joinRoom;\n","import Skylink from '../index';\nimport { SkylinkSignalingServer } from '../server-communication/index';\nimport { dispatchEvent } from '../utils/skylinkEventManager';\nimport { roomLock } from '../skylink-events';\nimport PeerData from '../peer-data';\n\n/**\n * @description Method that locks or unlocks a room.\n * @param {SkylinkState} roomState - The room state.\n * @param {boolean} lockRoom - The flag if the room should be locked or unlocked.\n * @private\n */\nexport const lockOrUnlockRoom = (roomState, lockRoom = true) => {\n  const updatedState = roomState;\n  const { room, user } = updatedState;\n  const signalingServer = new SkylinkSignalingServer();\n\n  updatedState.roomLocked = lockRoom;\n  Skylink.setSkylinkState(updatedState, room.id);\n\n  signalingServer.roomLock(updatedState);\n\n  dispatchEvent(roomLock({\n    isLocked: updatedState.roomLocked,\n    peerInfo: PeerData.getCurrentSessionInfo(room),\n    peerId: user.sid,\n    isSelf: true,\n  }));\n};\n\n/**\n * @description Method that locks a room.\n * @param {SkylinkState} roomState - The room state.\n * @private\n */\nexport const lockRoom = roomState => lockOrUnlockRoom(roomState, true);\n\n/**\n * @description Method that unlocls a room.\n * @param {SkylinkState} roomState - The room state.\n * @private\n */\nexport const unlockRoom = roomState => lockOrUnlockRoom(roomState, false);\n","import { leaveRoom, leaveAllRooms } from './leaveRoom';\nimport joinRoom from './joinRoom';\nimport { lockRoom, unlockRoom } from './lockRoom';\n\n/**\n * @classdesc Class that contains the methods for Room.\n * @private\n */\nclass Room {\n  /** @lends Room */\n  static leaveRoom(args) {\n    return leaveRoom(args);\n  }\n\n  static leaveAllRooms() {\n    return leaveAllRooms();\n  }\n\n  static lockRoom(roomState) {\n    return lockRoom(roomState);\n  }\n\n  static unlockRoom(roomState) {\n    return unlockRoom(roomState);\n  }\n\n  static joinRoom(args) {\n    return joinRoom(args);\n  }\n}\n\nexport default Room;\n","import logger from '../../logger';\nimport MESSAGES from '../../messages';\nimport HandleRecordingStats from '../../skylink-stats/handleRecordingStats';\nimport { SkylinkConstants } from '../../index';\nimport { addEventListener, removeEventListener } from '../../utils/skylinkEventManager';\nimport SkylinkSignalingServer from '../../server-communication/signaling-server';\n\nconst sendRecordingMessageViaSig = (roomState, isStartRecording, currentRecordingId = null) => {\n  const signaling = new SkylinkSignalingServer();\n  const handleRecordingStats = new HandleRecordingStats();\n\n  signaling.recording(roomState.room.id, isStartRecording ? SkylinkConstants.SIG_MESSAGE_TYPE.START_RECORDING : SkylinkConstants.SIG_MESSAGE_TYPE.STOP_RECORDING);\n  handleRecordingStats.send(roomState.room.id, isStartRecording ? MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.REQUEST_START : MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.REQUEST_STOP, currentRecordingId, null, null);\n};\n\nconst manageRecordingEventListeners = (resolve, isStartRecording) => {\n  const executeCallbackAndRemoveEvtListener = (evt) => {\n    const result = evt.detail;\n    const stateToCompare = isStartRecording ? SkylinkConstants.RECORDING_STATE.START : SkylinkConstants.RECORDING_STATE.STOP;\n\n    if (result.state === stateToCompare) {\n      removeEventListener(SkylinkConstants.EVENTS.RECORDING_STATE, executeCallbackAndRemoveEvtListener);\n      resolve(result.recordingId);\n    }\n  };\n\n  addEventListener(SkylinkConstants.EVENTS.RECORDING_STATE, executeCallbackAndRemoveEvtListener);\n};\n\nconst manageErrorStatsAndCallback = (roomState, errorMessage, statsKey, currentRecordingId = null, recordings = null) => {\n  const handleRecordingStats = new HandleRecordingStats();\n  logger.log.ERROR(errorMessage);\n  handleRecordingStats.send(roomState.room.id, statsKey, currentRecordingId, recordings, errorMessage);\n  return new Error(errorMessage);\n};\n\n/**\n * @param {SkylinkState} roomState\n * @param {boolean} isStartRecording\n * @private\n */\nconst commonRecordingOperations = (roomState, isStartRecording) => new Promise((resolve, reject) => {\n  const { hasMCU, currentRecordingId, recordingStartInterval } = roomState;\n  let errorMessage = isStartRecording ? MESSAGES.RECORDING.START_FAILED : MESSAGES.RECORDING.STOP_FAILED;\n\n  if (!hasMCU) {\n    errorMessage = `${errorMessage} - ${MESSAGES.RECORDING.ERRORS.MCU_NOT_CONNECTED}`;\n    const statsStateKey = isStartRecording ? MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.ERROR_NO_MCU_START : MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.ERROR_NO_MCU_STOP;\n    const error = manageErrorStatsAndCallback(roomState, errorMessage, statsStateKey, null, null);\n    reject(error);\n  }\n\n  if (isStartRecording && currentRecordingId) {\n    const error = manageErrorStatsAndCallback(roomState, `${errorMessage} - ${MESSAGES.RECORDING.ERRORS.EXISTING_RECORDING_IN_PROGRESS}`, MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.ERROR_START_ACTIVE, currentRecordingId, null);\n    reject(error);\n  }\n\n  if (!isStartRecording && !currentRecordingId) {\n    const error = manageErrorStatsAndCallback(roomState, `${errorMessage} - ${MESSAGES.RECORDING.ERRORS.NO_RECORDING_IN_PROGRESS}`, MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.ERROR_STOP_ACTIVE, currentRecordingId, null);\n    reject(error);\n  }\n\n  if (!isStartRecording && recordingStartInterval) {\n    const error = manageErrorStatsAndCallback(roomState, `${errorMessage} - ${MESSAGES.RECORDING.ERRORS.MIN_RECORDING_TIME}`, MESSAGES.STATS_MODULE.HANDLE_RECORDING_STATS.ERROR_MIN_STOP, currentRecordingId, null);\n    reject(error);\n  }\n\n  manageRecordingEventListeners(resolve, isStartRecording);\n  sendRecordingMessageViaSig(roomState, isStartRecording, currentRecordingId);\n});\n\n/**\n * The current room's Skylink state\n * @param {SkylinkState} roomState\n * @private\n */\nexport const startRecording = roomState => commonRecordingOperations(roomState, true);\n\n/**\n * The current room's Skylink state\n * @param {SkylinkState} roomState\n * @private\n */\nexport const stopRecording = roomState => commonRecordingOperations(roomState, false);\n","import { startRecording, stopRecording } from './recording';\n\nclass Recording {\n  static start(...args) {\n    return startRecording(...args);\n  }\n\n  static stop(...args) {\n    return stopRecording(...args);\n  }\n\n  static getRecordings(roomState) {\n    const { recordings } = roomState;\n    return Object.assign({}, recordings);\n  }\n}\n\nexport default Recording;\n","import checkRTMPDependencies from './checkRTMPDependencies';\nimport registerRTMPEventListenersAndResolve from './registerRTMPEventListenersAndResolve';\nimport sendRTMPMessageViaSig from './sendRTMPMessageViaSig';\n\nexport default {\n  checkRTMPDependencies,\n  registerRTMPEventListenersAndResolve,\n  sendRTMPMessageViaSig,\n};\n","import messages from '../../../messages';\n\n/**\n * Checks dependencies to start or stop an RTMP session\n * @param {boolean} isStartSession\n * @param {SkylinkState} roomState\n * @param {String|null} streamId\n * @param {String|null} endpoint\n * @private\n * @return {{shouldProceed: boolean, errorMessage: string}}\n */\nconst checkRTMPDependencies = (isStartSession, roomState, streamId = null, endpoint = null) => {\n  const toReturn = { shouldProceed: true, errorMessage: '' };\n  const { hasMCU } = roomState;\n\n  if (!hasMCU) {\n    toReturn.errorMessage = isStartSession ? messages.RTMP.start_no_mcu : messages.RTMP.stop_no_mcu;\n    toReturn.shouldProceed = false;\n    return toReturn;\n  }\n\n  if (isStartSession && !streamId) {\n    toReturn.errorMessage = messages.RTMP.start_no_stream_id;\n    toReturn.shouldProceed = false;\n    return toReturn;\n  }\n\n  if (isStartSession && !endpoint) {\n    toReturn.errorMessage = messages.RTMP.start_no_endpoint;\n    toReturn.shouldProceed = false;\n    return toReturn;\n  }\n\n  return toReturn;\n};\n\nexport default checkRTMPDependencies;\n","import { SkylinkConstants } from '../../../index';\nimport { addEventListener, removeEventListener } from '../../../utils/skylinkEventManager';\n\nconst registerRTMPEventListenersAndResolve = (isStartRTMPSession, resolve) => {\n  const executeCallbackAndRemoveEvtListener = (evt) => {\n    const result = evt.detail;\n    const stateToCompare = isStartRTMPSession ? SkylinkConstants.RTMP_STATE.START : SkylinkConstants.RTMP_STATE.STOP;\n\n    if (result.state === stateToCompare) {\n      removeEventListener(SkylinkConstants.EVENTS.RTMP_STATE, executeCallbackAndRemoveEvtListener);\n      resolve(result.rtmpId);\n    }\n  };\n\n  addEventListener(SkylinkConstants.EVENTS.RTMP_STATE, executeCallbackAndRemoveEvtListener);\n};\n\nexport default registerRTMPEventListenersAndResolve;\n","import SkylinkSignalingServer from '../../../server-communication/signaling-server';\nimport { SIG_MESSAGE_TYPE } from '../../../constants';\n/**\n * Method sends START_RTMP or STOP_RTMP message to Signaling Server\n * @param {SkylinkState} roomState\n * @param {boolean} isStartRTMPSession\n * @param {String} rtmpId\n * @param {String} streamId\n * @param {String} endpoint\n * @private\n */\nconst sendRTMPMessageViaSig = (roomState, isStartRTMPSession, rtmpId, streamId = null, endpoint = null) => {\n  const { room, user } = roomState;\n  const signaling = new SkylinkSignalingServer();\n  const messageType = isStartRTMPSession ? SIG_MESSAGE_TYPE.START_RTMP : SIG_MESSAGE_TYPE.STOP_RTMP;\n\n  signaling.rtmp(messageType, room.id, user.sid, rtmpId, streamId, endpoint);\n};\n\nexport default sendRTMPMessageViaSig;\n","import helpers from './helpers';\nimport { generateUUID } from '../../utils/helpers';\nimport logger from '../../logger';\nimport messages from '../../messages';\nimport { PEER_TYPE } from '../../constants';\n\nclass RTMP {\n  /**\n   * Start an RTMP session\n   * @param {SkylinkState} roomState\n   * @param {String} streamId\n   * @param {String} endpoint\n   */\n  static startSession(roomState, streamId, endpoint) {\n    return this.commonRTMPOperations(roomState, streamId, null, endpoint, true, messages.RTMP.starting_rtmp);\n  }\n\n  /**\n   * Stop a RTMP Session\n   * @param {SkylinkState} roomState\n   * @param {String} rtmpId\n   */\n  static stopSession(roomState, rtmpId) {\n    return this.commonRTMPOperations(roomState, null, rtmpId, null, false, messages.RTMP.stopping_rtmp);\n  }\n\n  static logErrorAndReject(error, reject) {\n    logger.log.ERROR(error);\n    reject(error);\n  }\n\n  static commonRTMPOperations(roomState, streamId, rtmpId, endpoint, isStartRTMPSession, msg) {\n    return new Promise((resolve, reject) => {\n      try {\n        const result = helpers.checkRTMPDependencies(isStartRTMPSession, roomState, streamId, endpoint);\n        const gRtmpId = rtmpId || generateUUID();\n\n        if (result.shouldProceed) {\n          helpers.registerRTMPEventListenersAndResolve(isStartRTMPSession, resolve);\n          helpers.sendRTMPMessageViaSig(roomState, isStartRTMPSession, gRtmpId, streamId, endpoint);\n          logger.log.INFO([PEER_TYPE.MCU, 'RTMP', msg]);\n        } else {\n          this.logErrorAndReject(new Error(result.errorMessage), reject);\n        }\n      } catch (error) {\n        this.logErrorAndReject(error, reject);\n      }\n    });\n  }\n}\n\nexport default RTMP;\n","/* eslint-disable class-methods-use-this */\nimport {\n  getParamValidity, getRoomStateByName, isAString, statelessGetUserMedia, isAObj, generateUUID,\n} from '../utils/helpers';\nimport { dispatchEvent } from '../utils/skylinkEventManager';\nimport { streamEnded } from '../skylink-events';\nimport PeerConnection from '../peer-connection/index';\nimport PeerData from '../peer-data/index';\nimport PeerPrivileged from '../peer-privileged/index';\nimport ScreenSharing from '../features/screen-sharing/index';\nimport MediaStream from '../media-stream/index';\nimport Room from '../room/index';\nimport Recording from '../features/recording/index';\nimport RTMP from '../features/rtmp/index';\nimport AsyncMessaging from '../features/messaging/async-messaging';\nimport EncryptedMessaging from '../features/messaging/encrypted-messaging';\nimport Messaging from '../features/messaging';\n\n/**\n * @classdesc This class lists all the public methods of Skylink.\n * @interface\n * @private\n */\nclass SkylinkPublicInterface {\n  /**\n   * @description Method that starts a room session.\n   * <p>Resolves with an array of <code>MediaStreams</code> or null if pre-fetched\n   * stream was passed into <code>joinRoom</code> method. First item in array is <code>MediaStream</code> of kind audio and second item is\n   * <code>MediaStream</code> of kind video.</p>\n   * @param {joinRoomOptions} [options] - The options available to join the room and configure the session.\n   * @param {MediaStream} [prefetchedStream] - The pre-fetched media stream object obtained when the user calls {@link Skylink#getUserMedia|getUserMedia} method before {@link Skylink#joinRoom|joinRoom} method.\n   * @return {Promise.<MediaStreams>}\n   * @example\n   * Example 1: Calling joinRoom with options\n   *\n   * const joinRoomOptions = {\n   *    audio: true,\n   *    video: true,\n   *    roomName: \"Room_1\",\n   *    userData: {\n   *        username: \"GuestUser_1\"\n   *    },\n   * };\n   *\n   * skylink.joinRoom(joinRoomOptions)\n   *    .then((streams) => {\n   *        if (streams[0]) {\n   *          window.attachMediaStream(audioEl, streams[0]); // first item in array is an audio stream\n   *        }\n   *        if (streams[1]) {\n   *          window.attachMediaStream(videoEl, streams[1]); // second item in array is a video stream\n   *        }\n   *    })\n   *    .catch((error) => {\n   *        // handle error\n   *    });\n   * @example\n   * Example 2: Retrieving a pre-fetched stream before calling joinRoom\n   *\n   * // REF: {@link Skylink#getUserMedia|getUserMedia}\n   * const prefetchedStream = skylink.getUserMedia();\n   *\n   * skylink.joinRoom(prefetchedStream)\n   *    .catch((error) => {\n   *    // handle error\n   *    });\n   * @alias Skylink#joinRoom\n   */\n  async joinRoom(options = {}, prefetchedStream) {\n    return Room.joinRoom(options, prefetchedStream);\n  }\n\n  /**\n   * @description Method that sends a message to peers via the data channel connection.\n   * Consider using {@link Skylink#sendURLData|sendURLData} if you are sending large strings to peers.\n   * @param {String} [roomName] - The name of the room the message is intended for.\n   * When not provided, the message will be broadcast to all rooms where targetPeerId(s) are found (if provided).\n   * Note when roomName is provided, targetPeerId should be provided as null.\n   * @param {String|JSON} message - The message.\n   * @param {String|Array} [targetPeerId] - The target peer id to send message to.\n   * When provided as an Array, it will send the message to only peers which ids are in the list.\n   * When not provided, it will broadcast the message to all connected peers with data channel connection in a room.\n   * @example\n   * Example 1: Broadcasting to all peers in all rooms\n   *\n   * const message = \"Hello everyone!\";\n   *\n   * skylink.sendP2PMessage(message);\n   * @example\n   * Example 2: Broadcasting to all peers in a room\n   *\n   * const message = \"Hello everyone!\";\n   * const roomName = \"Room_1\";\n   *\n   * skylink.sendP2PMessage(message, null, roomName);\n   * @example\n   * Example 3: Sending message to a peer in all rooms\n   *\n   * const message = \"Hello!\";\n   * const targetPeerId = \"peerId\";\n   *\n   * skylink.sendP2PMessage(message, targetPeerId);\n   * @example\n   * Example 4: Sending message to a peer in a room\n   *\n   * const message = \"Hello!\";\n   * const targetPeerId = \"peerId\";\n   * const roomName = \"Room_1\";\n   *\n   * skylink.sendP2PMessage(message, targetPeerId, roomName);\n   * @example\n   * Example 5: Sending message to selected Peers in a room\n   *\n   * const message = \"Hello!\";\n   * const selectedPeers = [\"peerId_1\", \"peerId_2\"];\n   * const roomName = \"Room_1\";\n   *\n   * skylink.sendP2PMessage(message, selectedPeers, roomName);\n   * @example\n   * // Listen for onIncomingMessage event\n   * skylink.addEventListener(SkylinkEvents.ON_INCOMING_MESSAGE, (evt) => {\n   *   const detail = evt.detail;\n   *   if (detail.isSelf) {\n   *     // handle message from self\n   *   } else {\n   *     // handle message from remote peer\n   *   }\n   * }\n   * @fires {@link SkylinkEvents.event:onIncomingMessage|onIncomingMessage}\n   * @alias Skylink#sendP2PMessage\n   */\n  sendP2PMessage(roomName = '', message = '', targetPeerId = '') {\n    PeerConnection.sendP2PMessage(roomName, message, targetPeerId);\n  }\n\n  /**\n   * @description Function that sends a message to peers via the Signaling socket connection.\n   * @param {String} roomName - room name to send the message.\n   * @param {String|JSON} message - The message.\n   * @param {String|Array} [targetPeerId] - The target peer id to send message to.\n   * - When provided as an Array, it will send the message to only peers which ids are in the list.\n   * - When not provided, it will broadcast the message to all connected peers in the room.\n   * @example\n   * Example 1: Broadcasting to all peers\n   *\n   * let sendMessage = (roomName) => {\n   *    const message = \"Hi!\";\n   *    const selectedPeers = this.state[location]['selectedPeers'];\n   *    this.skylink.sendMessage(roomName, message, selectedPeers);\n   * }\n   * @example\n   * Example 2: Broadcasting to selected peers\n   *\n   * let sendMessage = (roomName) => {\n   *    const message = \"Hi all!\";\n   *    const selectedPeers = [\"PeerID_1\", \"PeerID_2\"];\n   *    this.skylink.sendMessage(roomName, message, selectedPeers);\n   * }\n   * @fires {@link SkylinkEvents.event:onIncomingMessage|onIncomingMessage}\n   * @alias Skylink#sendMessage\n   * @since 0.4.0\n   */\n  sendMessage(roomName = '', message = '', targetPeerId = '') {\n    Messaging.sendMessage(roomName, message, targetPeerId);\n  }\n\n  /**\n   * @description Method that retrieves the message history from server if Persistent Message feature is enabled for the key.\n   * @param {String} roomName - The name of the room.\n   * @example\n   * Example 1: Retrieving stored messages\n   *\n   * // add event listener to catch storedMessages event\n   * SkylinkEventManager.addEventListener(SkylinkConstants.EVENTS.STORED_MESSAGES, (evt) => {\n   *    const { storedMessages } = evt.detail;\n   *    storedMessages.content.forEach((message) => {\n   *      // do something\n   *    })\n   * });\n   *\n   * let getStoredMessages = (roomName) => {\n   *    this.skylink.getStoredMessages(roomName);\n   * }\n   * @fires {@link SkylinkEvents.event:storedMessages|storedMessages}\n   * @alias Skylink#getStoredMessages\n   * @since 2.1\n   */\n  getStoredMessages(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      new AsyncMessaging(roomState).getStoredMessages();\n    }\n  }\n\n  /**\n   * @description Method that gets the list of connected peers in the room.\n   * @param {String} roomName - The name of the room.\n   * @return {JSON.<String, peerInfo>|null} <code>peerInfo</code> keyed by peer id. Additional <code>isSelf</code> flag to determine if peer is user or not. Null is returned if room has not been created.\n   * @example\n   * Example 1: Get the list of currently connected peers in the same room\n   *\n   * const peers = skylink.getPeersInRoom();\n   * @alias Skylink#getPeersInRoom\n   */\n  getPeersInRoom(roomName) {\n    if (getParamValidity(roomName, 'roomName', 'getPeersInRoom')) {\n      return PeerConnection.getPeersInRoom(roomName);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that returns the user / peer current session information.\n   * @param {String} roomName - The name of the room.\n   * @param {String|null} [peerId] The peer id to return the current session information from.\n   * - When not provided or that the peer id is does not exists, it will return\n   *   the user current session information.\n   * @return {peerInfo|null} The user / peer current session information.\n   * @example\n   * Example 1: Get peer current session information\n   *\n   * const peerPeerInfo = skylink.getPeerInfo(peerId);\n   * @example\n   * Example 2: Get user current session information\n   *\n   * const userPeerInfo = skylink.getPeerInfo();\n   * @alias Skylink#getPeerInfo\n   */\n  getPeerInfo(roomName, peerId = null) {\n    const roomState = getRoomStateByName(roomName);\n    if (peerId && roomState) {\n      return PeerData.getPeerInfo(peerId, roomState.room);\n    }\n\n    if (!peerId && roomState) {\n      return PeerData.getCurrentSessionInfo(roomState.room);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that returns the user / peer current custom data.\n   * @param {String} roomName - The room name.\n   * @param {String} [peerId] - The peer id to return the current custom data from.\n   * - When not provided or that the peer id is does not exists, it will return\n   *   the user current custom data.\n   * @return {Object|null} The user / peer current custom data.\n   * @example\n   * Example 1: Get peer current custom data\n   *\n   * const peerUserData = skylink.getUserData(peerId);\n   * @example\n   * Example 2: Get user current custom data\n   *\n   * const userUserData = skylink.getUserData();\n   * @alias Skylink#getUserData\n   */\n  getUserData(roomName, peerId) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState && roomState.room) {\n      return PeerData.getUserData(roomState, peerId);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that overwrites the user current custom data.\n   * @param {String} roomName - The room name.\n   * @param {JSON|String} userData - The updated custom data.\n   * @fires {@link SkylinkEvents.event:peerUpdated|peerUpdatedEvent} event if peer is in room with <code>isSelf=true</code>.\n   * @example\n   * Example 1: Update user custom data after joinRoom()\n   *\n   * // add event listener to catch setUserData changes\n   * SkylinkEventManager.addEventListener(SkylinkConstants.peerUpdated, (evt) => {\n   *    const { detail } = evt;\n   *   // do something\n   * });\n   *\n   * const userData = \"afterjoin\";\n   * skylink.setUserData(userData);\n   * @alias Skylink#setUserData\n   */\n  setUserData(roomName, userData) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState && roomState.room) {\n      return PeerData.setUserData(roomState.room, userData);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that retrieves peer connection bandwidth and ICE connection stats.\n   * <blockquote class=\"info\">\n   * Note that this is not well supported in the Edge browser.\n   * </blockquote>\n   * @description Method that retrieves peer connection bandwidth and ICE connection stats.\n   * @param {String} roomName - The room name.\n   * @param {String|Array} [peerId] The target peer id to retrieve connection stats from.\n   * - When provided as an Array, it will retrieve all connection stats from all the peer ids provided.\n   * - When not provided, it will retrieve all connection stats from the currently connected peers in the room.\n   * @return {Promise<Array.<object.<String|statistics>>>}\n   * @example\n   * Example 1: Retrieving connection statistics from all peers in a room\n   *\n   * skylink.getConnectionStatus(\"Room_1\")\n   *  .then((statistics) => {\n   *    // handle statistics\n   *  }\n   *  .catch((error) => {\n   *    // handle error\n   *  }\n   * @example\n   * Example 2: Retrieving connection statistics from selected peers\n   *\n   * const selectedPeers = [\"peerId_1\", \"peerId_2\"];\n   * skylink.getConnectionStatus(\"Room_1\", selectedPeers)\n   *  .then((statistics) => {\n   *    // handle statistics\n   *  }\n   *  .catch((error) => {\n   *    // handle error\n   *  }\n   * @alias Skylink#getConnectionStats\n   */\n  getConnectionStatus(roomName, peerId) {\n    const roomState = getRoomStateByName(roomName);\n\n    return PeerConnection.getConnectionStatus(roomState, peerId);\n  }\n\n  /**\n   * @description Method that retrieves the list of peer ids from rooms within the same App space.\n   * <blockquote class=\"info\">\n   *   Note that this feature requires <code>\"isPrivileged\"</code> flag to be enabled for the App Key\n   *   provided in the {@link initOptions}, as only Users connecting using\n   *   the App Key with this flag enabled (which we call privileged Users / peers) can retrieve the list of\n   *   peer ids from rooms within the same App space.\n   *   {@link http://support.temasys.io/support/solutions/articles/12000012342-what-is-a-privileged-key-|What is a privileged key?}\n   * </blockquote>\n   * @param {String} roomName - The room name\n   * @param {Boolean} [showAll=false] - The flag if Signaling server should also return the list of privileged peer ids.\n   * By default, the Signaling server does not include the list of privileged peer ids in the return result.\n   * @return {Promise.<Object.<String, Array<String>>>} peerList - Array of peer ids, keyed by room name.\n   * @fires {@link SkylinkEvents.event:getPeersStateChange|getPeersStateChangeEvent} with parameter payload <code>state=ENQUIRED</code> upon calling <code>getPeers</code> method.\n   * @fires {@link SkylinkEvents.event:getPeersStateChange|getPeersStateChangeEvent} with parameter payload <code>state=RECEIVED</code> when peer list is received from Signaling server.\n   * @example\n   * Example 1: Retrieve un-privileged peers\n   *\n   * skylink.getPeers(location)\n   *  .then((result) => {\n   *      // do something\n   *  })\n   *  .catch((error) => {\n   *      // handle error\n   *  })\n   *\n   * Example 2: Retrieve all (privileged and un-privileged) peers\n   *\n   * skylink.getPeers(location, true)\n   *  .then((result) => {\n   *      // do something\n   *  })\n   *  .catch((error) => {\n   *      // handle error\n   *  })\n   * @alias Skylink#getPeers\n   * @since 0.6.1\n   */\n  getPeers(roomName, showAll = false) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return PeerPrivileged.getPeerList(roomState.room, showAll);\n    }\n\n    return null;\n  }\n\n  /**\n   * @typedef {Object.<String, Object>} peersStreamsInfo\n   * @property {Object.<String, Object>} #peerId - Peer streams info keyed by peer id.\n   * @property {Boolean} #peerId.isSelf - The flag if the peer is local or remote.\n   * @property {MediaStream} #peerId.#streamId - streams keyed by stream id.\n  /**\n   * @description Method that returns the list of connected peers streams in the room both user media streams and screen share streams.\n   * @param {String} roomName - The room name.\n   * @param {Boolean} [includeSelf=true] - The flag if self streams are included.\n   * @return {JSON.<String, peersStreamsInfo>} - The list of peer stream objects keyed by peer id.\n   * @example\n   * Example 1: Get the list of current peers streams in the same room\n   *\n   * const streams = skylink.getPeersStreams(\"Room_1\");\n   * @alias Skylink#getPeersStreams\n   * @since 0.6.16\n   */\n  getPeersStreams(roomName, includeSelf = true) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return PeerData.getPeersStreams(roomState, includeSelf);\n    }\n    return null;\n  }\n\n  /**\n   * @typedef {Object} dataChannelInfo\n   * @property {String} channelName - The data channel id.\n   * @property {String} channelProp - The data channel property.\n   * @property {String} channelType - The data channel type.\n   * @property {String} currentTransferId - The data channel connection\n   *   current progressing transfer session. Defined as <code>null</code> when there is\n   *   currently no transfer session progressing on the data channel connection\n   * @property {String} currentStreamId - The data channel connection\n   *   current data streaming session id. Defined as <code>null</code> when there is currently\n   *   no data streaming session on the data channel connection.\n   * @property {String} readyState - The data channel connection readyState.\n   * @property {String} bufferedAmountLow - The data channel buffered amount.\n   * @property {String} bufferedAmountLowThreshold - The data channel\n   *   buffered amount threshold.\n   */\n  /**\n   * @description Method that gets the current list of connected peers data channel connections in the room.\n   * @param {String} roomName - The room name.\n   * @return {Object.<string, Object.<String, dataChannelInfo>>} - The list of peer data channels keyed by peer id, keyed by data channel id.\n   * @example\n   * Example 1: Get the list of current peers data channels in the same room\n   *\n   * const channels = skylink.getPeersDataChannels(\"Room_1\");\n   * @alias Skylink#getPeersDataChannels\n   * @since 0.6.18\n   */\n  getPeersDataChannels(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return PeerData.getPeersDataChannels(roomState);\n    }\n    return null;\n  }\n\n  /**\n   * @typedef {Object} customSettings\n   * @property {Object} settings - The peer stream and data settings.\n   * @property {Boolean|JSON} settings.data - The flag if peer has any data channel connections enabled.\n   *   If <code>isSelf</code> value is <code>true</code>, this determines if user allows\n   *   data channel connections, else if value is <code>false</code>, this determines if peer has any active\n   *   data channel connections (where {@link SkylinkEvents.event:onDataChannelStateChanged|onDataChannelStateChangedEvent}\n   *   triggers <code>state</code> as <code>OPEN</code> and <code>channelType</code> as\n   *   <code>MESSAGING</code> for peer) with peer.\n   * @property {Boolean|JSON} settings.audio - The peer stream audio settings.\n   *   When defined as <code>false</code>, it means there is no audio being sent from peer.\n   *   When defined as <code>true</code>, the <code>settings.audio.stereo</code> value is\n   *   considered as <code>false</code> and the <code>settings.audio.exactConstraints</code>\n   *   value is considered as <code>false</code>.\n   * @property {Boolean} settings.audio.stereo - The flag if stereo band is configured\n   *   when encoding audio codec is <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for receiving audio data.\n   * @property {Boolean} [settings.audio.usedtx]\n   *   Note that this feature might not work depending on the browser support and implementation.\n   *   The flag if DTX (Discontinuous Transmission) is configured when encoding audio codec\n   *   is <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for sending audio data.\n   *   This might help to reduce bandwidth it reduces the bitrate during silence or background noise.\n   *   When not defined, the default browser configuration is used.\n   * @property {Boolean} [settings.audio.useinbandfec]\n   *   Note that this feature might not work depending on the browser support and implementation.\n   *   The flag if capability to take advantage of in-band FEC (Forward Error Correction) is\n   *   configured when encoding audio codec is <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for sending audio data.\n   *   This might help to reduce the harm of packet loss by encoding information about the previous packet.\n   *   When not defined, the default browser configuration is used.\n   * @property {Number} [settings.audio.maxplaybackrate]\n   *   Note that this feature might not work depending on the browser support and implementation.\n   *   The maximum output sampling rate rendered in Hertz (Hz) when encoding audio codec is\n   *   <a href=\"#attr_AUDIO_CODEC\"><code>OPUS</code></a> for sending audio data.\n   *   This value must be between <code>8000</code> to <code>48000</code>.\n   *   When not defined, the default browser configuration is used.\n   * @property {Boolean} settings.audio.echoCancellation - The flag if echo cancellation is enabled for audio tracks.\n   * @property {Array} [settings.audio.optional] The peer stream <code>navigator.getUserMedia()</code> API\n   *   <code>audio: { optional [..] }</code> property.\n   * @property {String} [settings.audio.deviceId] - The peer stream audio track source id of the device used.\n   * @property {Boolean} settings.audio.exactConstraints - The flag if peer stream audio track is sending exact\n   *   requested values of <code>settings.audio.deviceId</code> when provided.\n   * @property {Boolean|JSON} settings.video - The peer stream video settings.\n   *   When defined as <code>false</code>, it means there is no video being sent from peer.\n   *   When defined as <code>true</code>, the <code>settings.video.screenshare</code> value is\n   *   considered as <code>false</code>  and the <code>settings.video.exactConstraints</code>\n   *   value is considered as <code>false</code>.\n   * @property {JSON} [settings.video.resolution] - The peer stream video resolution.\n   *   [Rel: {@link SkylinkConstants.VIDEO_RESOLUTION|VIDEO_RESOLUTION}]\n   * @property {Number|JSON} settings.video.resolution.width - The peer stream video resolution width or\n   *   video resolution width settings.\n   *   When defined as a JSON Object, it is the user set resolution width settings with (<code>\"min\"</code> or\n   *   <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).\n   * @property {Number|JSON} settings.video.resolution.height - The peer stream video resolution height or\n   *   video resolution height settings.\n   *   When defined as a JSON Object, it is the user set resolution height settings with (<code>\"min\"</code> or\n   *   <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).\n   * @property {Number|JSON} [settings.video.frameRate] - The peer stream video\n   *   <a href=\"https://en.wikipedia.org/wiki/Frame_rate\">frameRate</a> per second (fps) or video frameRate settings.\n   *   When defined as a JSON Object, it is the user set frameRate settings with (<code>\"min\"</code> or\n   *   <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).\n   * @property {Boolean} settings.video.screenshare - The flag if peer stream is a screensharing stream.\n   * @property {Array} [settings.video.optional] - The peer stream <code>navigator.getUserMedia()</code> API\n   *   <code>video: { optional [..] }</code> property.\n   * @property {String} [settings.video.deviceId] - The peer stream video track source id of the device used.\n   * @property {Boolean} settings.video.exactConstraints The flag if peer stream video track is sending exact\n   *   requested values of <code>settings.video.resolution</code>,\n   *   <code>settings.video.frameRate</code> and <code>settings.video.deviceId</code>\n   *   when provided.\n   * @property {String|JSON} [settings.video.facingMode] - The peer stream video camera facing mode.\n   *   When defined as a JSON Object, it is the user set facingMode settings with (<code>\"min\"</code> or\n   *   <code>\"max\"</code> or <code>\"ideal\"</code> or <code>\"exact\"</code> etc configurations).\n   * @property {Object} settings.bandwidth The maximum streaming bandwidth sent from peer.\n   * @property {Number} [settings.bandwidth.audio] - The maximum audio streaming bandwidth sent from peer.\n   * @property {Number} [settings.bandwidth.video] - The maximum video streaming bandwidth sent from peer.\n   * @property {Number} [settings.bandwidth.data] - The maximum data streaming bandwidth sent from peer.\n   * @property {Object} settings.googleXBandwidth\n   *   Note that this feature might not work depending on the browser support and implementation,\n   *   and its properties and values are only defined for user's end and cannot be viewed\n   *   from peer's end (when <code>isSelf</code> value is <code>false</code>).\n   *   The experimental google video streaming bandwidth sent to peers.\n   * @property {Number} [settings.googleXBandwidth.min] - The minimum experimental google video streaming bandwidth sent to peers.\n   * @property {Number} [settings.googleXBandwidth.max] - The maximum experimental google video streaming bandwidth sent to peers.\n   * @property {Object} mediaStatus The peer streaming media status.\n   * @property {Boolean} mediaStatus.audioMuted -  The value of the audio status.\n   *   <small>If peer <code>mediaStatus</code> is <code>-1</code>, audio is not present in the stream. If peer <code>mediaStatus</code> is <code>1</code>, audio is present\n   *   in the stream and active (not muted). If peer <code>mediaStatus</code> is <code>0</code>, audio is present in the stream and muted.\n   *   </small>\n   * @property {Boolean} mediaStatus.videoMuted - The value of the video status.\n   *   <small>If peer <code>mediaStatus</code> is <code>-1</code>, video is not present in the stream. If peer <code>mediaStatus</code> is <code>1</code>, video is present\n   *   in the stream and active (not muted). If peer <code>mediaStatus</code> is <code>0</code>, video is present in the stream and muted.\n   *   </small>\n   */\n  /**\n   * @description Method that gets the list of current custom peer settings sent and set.\n   * @param {String} roomName - The room name.\n   * @return {Object.<String, customSettings>|null} - The peer custom settings keyed by peer id.\n   * @example\n   * Example 1: Get the list of current peer custom settings from peers in a room.\n   *\n   * const currentPeerSettings = skylink.getPeersCustomSettings(\"Room_1\");\n   * @alias Skylink#getPeersCustomSettings\n   * @since 0.6.18\n   */\n  getPeersCustomSettings(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return PeerData.getPeersCustomSettings(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that refreshes the main messaging data channel.\n   * @param {String} roomName - The room name.\n   * @param {String} peerId - The target peer id of the peer data channel to refresh.\n   * @return {null}\n   * @example\n   * Example 1: Initiate refresh data channel\n   *\n   * skylink.refreshDatachannel(\"Room_1\", \"peerID_1\");\n   *\n   * @alias Skylink#refreshDatachannel\n   * @since 0.6.30\n   */\n  refreshDatachannel(roomName, peerId) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return PeerConnection.refreshDataChannel(roomState, peerId);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that refreshes peer connections to update with the current streaming.\n   * <blockquote class=\"info\">\n   *   Note that Edge browser does not support renegotiation.\n   *   For MCU enabled peer connections with <code>options.mcuUseRenegoRestart</code> set to <code>false</code>\n   *   in the {@link initOptions}, the restart method may differ, you\n   *   may learn more about how to workaround it in this article\n   *   {@link http://support.temasys.io/support/discussions/topics/12000002853|here}.\n   *   For restarts with peers connecting from Android, iOS or C++ SDKs, restarts might not work as written in this article\n   *   {@link http://support.temasys.io/support/discussions/topics/12000005188|here}.\n   *   Note that this functionality should be used when peer connection stream freezes during a connection.\n   *   For a better user experience for only MCU enabled peer connections, the method is throttled when invoked many\n   *   times in less than the milliseconds interval configured in {@link initOptions}.\n   * </blockquote>\n   * @param {String} roomName - The name of the room.\n   * @param {String|Array} [targetPeerId] <blockquote class=\"info\">\n   *   Note that this is ignored if MCU is enabled for the App Key provided in\n   *   {@link initOptions}. <code>refreshConnection()</code> will \"refresh\"\n   *   all peer connections. </blockquote>\n   *   - The target peer id to refresh connection with.\n   * - When provided as an Array, it will refresh all connections with all the peer ids provided.\n   * - When not provided, it will refresh all the currently connected peers in the room.\n   * @param {Boolean} [iceRestart=false] <blockquote class=\"info\">\n   *   Note that this flag will not be honoured for MCU enabled peer connections where\n   *   <code>options.mcuUseRenegoRestart</code> flag is set to <code>false</code> as it is not necessary since for MCU\n   *   \"restart\" case is to invoke {@link Skylink#joinRoom}again, or that it is\n   *   not supported by the MCU.</blockquote>\n   *   The flag if ICE connections should restart when refreshing peer connections.\n   *   This is used when ICE connection state is <code>FAILED</code> or <code>DISCONNECTED</code>, which state\n   *   can be retrieved with the {@link SkylinkEvents.event:iceConnectionState|iceConnectionStateEvent}\n   * @param {JSON} [options] <blockquote class=\"info\">\n   *   Note that for MCU connections, the <code>bandwidth</code> or <code>googleXBandwidth</code>\n   *   settings will override for all peers or the current room connection session settings.</blockquote>\n   *   The custom peer configuration settings.\n   * @param {JSON} [options.bandwidth] The configuration to set the maximum streaming bandwidth to send to peers.\n   *   Object signature follows {@link Skylink#joinRoom}\n   *   <code>options.bandwidth</code> settings.\n   * @param {JSON} [options.googleXBandwidth] The configuration to set the experimental google\n   *   video streaming bandwidth sent to peers.\n   *   Object signature follows {@link Skylink#joinRoom}\n   *   <code>options.googleXBandwidth</code> settings.\n   * @return {Promise.<refreshConnectionResolve>} - The Promise will always resolve.\n   * @example\n   * Example 1: Refreshing a peer connection\n   *\n   * skylink.refreshConnection(roomName, peerId)\n   * .then((result) => {\n   *   const failedRefreshIds = Object.keys(result.refreshErrors);\n   *   failedRefreshIds.forEach((peerId) => {\n   *     // handle error\n   *   });\n   * });\n   *\n   * @example\n   * Example 2: Refreshing a list of peer connections\n   * let selectedPeers = [\"peerID_1\", \"peerID_2\"];\n   *\n   * skylink.refreshConnection(roomName, selectedPeers)\n   * .then((result) => {\n   *   const failedRefreshIds = Object.keys(result.refreshErrors);\n   *   failedRefreshIds.forEach((peerId) => {\n   *     // handle error\n   *   });\n   * });\n   * @example\n   * Example 3: Refreshing all peer connections\n   *\n   * skylink.refreshConnection(roomName)\n   * .then((result) => {\n   *   const failedRefreshIds = Object.keys(result.refreshErrors);\n   *   failedRefreshIds.forEach((peerId) => {\n   *    // handle error\n   *   });\n   * });\n   * @alias Skylink#refreshConnection\n   * @since 0.5.5\n   */\n  refreshConnection(roomName, targetPeerId, iceRestart, options) {\n    const roomState = getRoomStateByName(roomName);\n\n    return PeerConnection.refreshConnection(roomState, targetPeerId, iceRestart, options);\n  }\n\n  /**\n   * @description Method that returns starts screenshare and returns the stream.\n   * @param {String} roomName - The room name.\n   * @param {Boolean} replaceUserMediaStream - The flag if screenshare replaces the <code>userMedia</code> stream.\n   * @param {String} [streamId] - The stream id of the <code>userMedia</code> stream to replace. streamId must be provided if there is more than\n   * one <code>userMedia</code> stream on the peer connection and replaceUserMediaStream is true.\n   * @return {MediaStream|null} - The screen share stream.\n   * @example\n   * Example 1: Replace selected stream with screen share stream\n   *\n   * let shareScreenReplace = () => {\n   *    // Retrieve all userMedia streams\n   *    const streamList = skylink.getStreams(roomName);\n   *    skylink.shareScreen(roomName, true, Object.keys(streamList.userMedia)[0]).then((screenStream) => {\n   *      window.attachMediaStream(localVideoElement, screenStream);\n   *    });\n   * }\n   * @alias Skylink#shareScreen\n   * @since 2.0.0\n   */\n  shareScreen(roomName, streamId) {\n    const replaceUserMediaStream = false;\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      const screenSharing = new ScreenSharing(roomState);\n      return screenSharing.start(replaceUserMediaStream, streamId);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that returns the screenshare stream id of peers.\n   * @param {String} roomName - The room name.\n   * @return {Object.<String, MediaStream>|null} screenshareStream - The peer screen share stream keyed by peer id if there is one.\n   * @alias Skylink#getPeersScreenshare\n   * @since 2.0.0\n   */\n  getPeersScreenshare(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return PeerConnection.getPeerScreenshare(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * <blockquote class=\"info\">\n   *   For a better user experience, the functionality is throttled when invoked many times in less\n   *   than the milliseconds interval configured in the {@link initOptions}.\n   * </blockquote>\n   * @description Method that retrieves camera stream.\n   * <p>Resolves with an array of <code>MediaStreams</code>. First item in array is <code>MediaStream</code> of kind audio and second item is\n   * <code>MediaStream</code> of kind video.</p>\n   * @param {String|null} roomName - The room name.\n   * - If no roomName is passed or <code>getUserMedia()</code> is called before {@link Skylink#joinRoom|joinRoom}, the returned stream will not be associated with a room. The stream must be maintained independently.\n   * To stop the stream, call {@link Skylink#stopPrefetchedStream|stopPrefetchedStream} method.\n   * @param {JSON} [options] - The camera stream configuration options.\n   * - When not provided, the value is set to <code>{ audio: true, video: true }</code>.\n   *   To fallback to retrieve audio track only when retrieving of audio and video tracks failed,\n   *   enable the <code>audioFallback</code> flag in the {@link initOptions}.\n   * @param {Boolean} [options.useExactConstraints=false] <blockquote class=\"info\">\n   *   Note that by enabling this flag, exact values will be requested when retrieving camera stream,\n   *   but it does not prevent constraints related errors. By default when not enabled,\n   *   expected mandatory maximum values (or optional values for source id) will requested to prevent constraints related\n   *   errors, with an exception for <code>options.video.frameRate</code> option in Safari and IE (any plugin-enabled) browsers,\n   *   where the expected maximum value will not be requested due to the lack of support.</blockquote>\n   *   The flag if <code>getUserMedia()</code> should request for camera stream to match exact requested values of\n   *   <code>options.audio.deviceId</code> and <code>options.video.deviceId</code>, <code>options.video.resolution</code>\n   *   and <code>options.video.frameRate</code> when provided.\n   * @param {Boolean|JSON} [options.audio=false] <blockquote class=\"info\">\n   *    Note that the current Edge browser implementation does not support the <code>options.audio.optional</code>,\n   *    <code>options.audio.deviceId</code>, <code>options.audio.echoCancellation</code>.</blockquote>\n   *    The audio configuration options.\n   * @param {Boolean} [options.audio.stereo=false] <blockquote class=\"info\"><b>Deprecation Warning!</b>\n   *   This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.stereo</code> and\n   *   the <code>options.codecParams.audio.opus[\"sprop-stereo\"]</code>\n   *   parameter in the {@link initOptions} instead. If the\n   *   <code>options.codecParams.audio.opus.stereo</code> or <code>options.codecParams.audio.opus[\"sprop-stereo\"]</code>\n   *   is configured, this overrides the <code>options.audio.stereo</code> setting.</blockquote>\n   *   The flag if OPUS audio codec stereo band should be configured for sending encoded audio data.\n   *   When not provided, the default browser configuration is used.\n   * @param {Boolean} [options.audio.usedtx] <blockquote class=\"info\"><b>Deprecation Warning!</b>\n   *   This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.stereo</code>\n   *   parameter in the {@link initOptions} instead. If the\n   *   <code>options.codecParams.audio.opus.stereo</code> is configured, this overrides the\n   *   <code>options.audio.stereo</code> setting.  Note that this feature might\n   *   not work depending on the browser support and implementation.</blockquote>\n   *   The flag if OPUS audio codec should enable DTX (Discontinuous Transmission) for sending encoded audio data.\n   *   This might help to reduce bandwidth as it reduces the bitrate during silence or background noise, and\n   *   goes hand-in-hand with the <code>options.voiceActivityDetection</code> flag in <a href=\"#method_joinRoom\">\n   *   <code>joinRoom()</code> method</a>.\n   *   When not provided, the default browser configuration is used.\n   * @param {Boolean} [options.audio.useinbandfec] <blockquote class=\"info\"><b>Deprecation Warning!</b>\n   *   This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.useinbandfec</code>\n   *   parameter in the {@link initOptions} instead. If the\n   *   <code>options.codecParams.audio.opus.useinbandfec</code> is configured, this overrides the\n   *   <code>options.audio.useinbandfec</code> setting. Note that this parameter should only be used\n   *   for debugging purposes only.</blockquote>\n   *   The flag if OPUS audio codec has the capability to take advantage of the in-band FEC\n   *   (Forward Error Correction) when sending encoded audio data.\n   *   This helps to reduce the harm of packet loss by encoding information about the previous packet loss.\n   *   When not provided, the default browser configuration is used.\n   * @param {Number} [options.audio.maxplaybackrate] <blockquote class=\"info\"><b>Deprecation Warning!</b>\n   *   This property has been deprecated. Configure this with the <code>options.codecParams.audio.opus.maxplaybackrate</code>\n   *   parameter in the {@link initOptions} instead. If the\n   *   <code>options.codecParams.audio.opus.maxplaybackrate</code> is configured, this overrides the\n   *   <code>options.audio.maxplaybackrate</code> setting.  Note that this feature might\n   *   not work depending on the browser support and implementation.\n   *   Note that this parameter should only be used for debugging purposes only.</blockquote>\n   *   The OPUS audio codec maximum output sampling rate in Hz (hertz) that is is capable of receiving\n   *   decoded audio data, to adjust to the hardware limitations and ensure that any sending audio data\n   *   would not encode at a higher sampling rate specified by this.\n   *   This value must be between <code>8000</code> to <code>48000</code>.\n   *   When not provided, the default browser configuration is used.\n   * @param {Boolean} [options.audio.mute=false] The flag if audio tracks should be muted upon receiving them.\n   *   Providing the value as <code>false</code> sets <code>peerInfo.mediaStatus.audioMuted</code> to <code>1</code>,\n   *   but when provided as <code>true</code>, this sets the <code>peerInfo.mediaStatus.audioMuted</code> value to\n   *   <code>0</code> and mutes any existing <a href=\"#method_shareScreen\">\n   *   <code>shareScreen()</code> stream</a> audio tracks as well.\n   * @param {Array} [options.audio.optional] <blockquote class=\"info\">\n   *   This property has been deprecated. \"optional\" constraints has been moved from specs.<br>\n   *   Note that this may result in constraints related error when <code>options.useExactConstraints</code> value is\n   *   <code>true</code>. If you are looking to set the requested source id of the audio track,\n   *   use <code>options.audio.deviceId</code> instead.</blockquote>\n   *   The <code>navigator.getUserMedia()</code> API <code>audio: { optional [..] }</code> property.\n   * @param {String} [options.audio.deviceId] <blockquote class=\"info\">\n   *   Note this is currently not supported in Firefox browsers.\n   *   </blockquote> The audio track source id of the device to use.\n   *   The list of available audio source id can be retrieved by the {@link https://developer.\n   * mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices}.\n   * @param {Boolean} [options.audio.echoCancellation=true] <blockquote class=\"info\">\n   *   For Chrome/Opera/IE/Safari/Bowser, the echo cancellation @description Methodality may not work and may produce a terrible\n   *   feedback. It is recommended to use headphones or other microphone devices rather than the device\n   *   in-built microphones.</blockquote> The flag to enable echo cancellation for audio track.\n   * @param {Boolean|JSON} [options.video=false] <blockquote class=\"info\">\n   *    Note that the current Edge browser implementation does not support the <code>options.video.optional</code>,\n   *    <code>options.video.deviceId</code>, <code>options.video.resolution</code> and\n   *    <code>options.video.frameRate</code>, <code>options.video.facingMode</code>.</blockquote>\n   *   The video configuration options.\n   * @param {Boolean} [options.video.mute=false] The flag if video tracks should be muted upon receiving them.\n   *   Providing the value as <code>false</code> sets the <code>peerInfo.mediaStatus.videoMuted</code> value to\n   *   <code>1</code>, but when provided as <code>true</code>, this sets the <code>peerInfo.mediaStatus.videoMuted</code> value to\n   *   <code>0</code> and mutes any existing <a href=\"#method_shareScreen\">\n   *   <code>shareScreen()</code> stream</a> video tracks as well.\n   * @param {JSON} [options.video.resolution] The video resolution.\n   *   By default, <a href=\"#attr_VIDEO_RESOLUTION\"><code>VGA</code></a> resolution option\n   *   is selected when not provided.\n   *   [Rel: {@link SkylinkConstants.VIDEO_RESOLUTION|VIDEO_RESOLUTION}]\n   * @param {Number|JSON} [options.video.resolution.width] The video resolution width.\n   * - When provided as a number, it is the video resolution width.\n   * - When provided as a JSON, it is the <code>navigator.mediaDevices.getUserMedia()</code> <code>.width</code> settings.\n   *   Parameters are <code>\"ideal\"</code> for ideal resolution width, <code>\"exact\"</code> for exact video resolution width,\n   *   <code>\"min\"</code> for min video resolution width and <code>\"max\"</code> for max video resolution width.\n   *   Note that this may result in constraints related errors depending on the browser/hardware supports.\n   * @param {Number|JSON} [options.video.resolution.height] The video resolution height.\n   * - When provided as a number, it is the video resolution height.\n   * - When provided as a JSON, it is the <code>navigator.mediaDevices.getUserMedia()</code> <code>.height</code> settings.\n   *   Parameters are <code>\"ideal\"</code> for ideal video resolution height, <code>\"exact\"</code> for exact video resolution height,\n   *   <code>\"min\"</code> for min video resolution height and <code>\"max\"</code> for max video resolution height.\n   *   Note that this may result in constraints related errors depending on the browser/hardware supports.\n   * @param {Number|JSON} [options.video.frameRate] The video {@link https://en.wikipedia.org/wiki/Frame_rate} per second (fps).\n   * - When provided as a number, it is the video framerate.\n   * - When provided as a JSON, it is the <code>navigator.mediaDevices.getUserMedia()</code> <code>.frameRate</code> settings.\n   *   Parameters are <code>\"ideal\"</code> for ideal video framerate, <code>\"exact\"</code> for exact video framerate,\n   *   <code>\"min\"</code> for min video framerate and <code>\"max\"</code> for max video framerate.\n   *   Note that this may result in constraints related errors depending on the browser/hardware supports.\n   * @param {Array} [options.video.optional] <blockquote class=\"info\">\n   *   This property has been deprecated. \"optional\" constraints has been moved from specs.<br>\n   *   Note that this may result in constraints related error when <code>options.useExactConstraints</code> value is\n   *   <code>true</code>. If you are looking to set the requested source id of the video track,\n   *   use <code>options.video.deviceId</code> instead.</blockquote>\n   *   The <code>navigator.getUserMedia()</code> API <code>video: { optional [..] }</code> property.\n   * @param {String} [options.video.deviceId] <blockquote class=\"info\">\n   *   Note this is currently not supported in Firefox browsers.\n   *   </blockquote> The video track source id of the device to use.\n   *   The list of available video source id can be retrieved by the {@link https://developer.\n   * mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices}.\n   * @param {String|JSON} [options.video.facingMode] The video camera facing mode.\n   *   The list of available video source id can be retrieved by the {@link https://developer.mozilla.org\n   *   /en-US/docs/Web/API/MediaTrackConstraints/facingMode}.\n   * @return {Promise.<MediaStreams>}\n   * @example\n   * Example 1: Get both audio and video after joinRoom\n   *\n   * skylink.getUserMedia(roomName, {\n   *     audio: true,\n   *     video: true,\n   * }).then((streams) => // do something)\n   * .catch((error) => // handle error);\n   * @example\n   * Example 2: Get only audio\n   *\n   * skylink.getUserMedia(roomName, {\n   *     audio: true,\n   *     video: false,\n   * }).then((streams) => // do something)\n   * .catch((error) => // handle error);\n   * @example\n   * Example 3: Configure resolution for video\n   *\n   * skylink.getUserMedia(roomName, {\n   *     audio: true,\n   *     video: { resolution: skylinkConstants.VIDEO_RESOLUTION.HD },\n   * }).then((streams) => // do something)\n   * .catch((error) => // handle error);\n   * @example\n   * Example 4: Configure stereo flag for OPUS codec audio (OPUS is always used by default)\n   *\n   * this.skylink.getUserMedia(roomName, {\n   *     audio: {\n   *         stereo: true,\n   *     },\n   *     video: true,\n   * }).then((streams) => // do something)\n   * .catch((error) => // handle error);\n   * @example\n   * Example 5: Get both audio and video before joinRoom\n   *\n   * // Note: the prefetched stream must be maintained independently\n   * skylink.getUserMedia({\n   *     audio: true,\n   *     video: true,\n   * }).then((streams) => // do something)\n   * .catch((error) => // handle error);\n   * @example\n   * Example 6: Get media sources before joinRoom - only available on Chrome browsers\n   *\n   * const audioInputDevices = [];\n   * const videoInputDevices = [];\n   *\n   * navigator.mediaDevices.enumerateDevices().then((devices) => {\n   *   devices.forEach((device) => {\n   *     if (device.kind === \"audioinput\") {\n   *       audioInputDevices.push(device);\n   *     }\n   *\n   *     if (device.kind === \"videoinput\") {\n   *       videoInputDevices.push(device);\n   *     }\n   *   })\n   * }).catch((error) => // handle error);\n   *\n   * skylink.getUserMedia(roomName, {\n   *   audio: {\n   *     deviceId: audioInputDevices[0].deviceId,\n   *   },\n   *   video: {\n   *     deviceId: videoInputDevices[0].deviceId,\n   *   }\n   * }).then((streams) => // do something)\n   * .catch((error) => // handle error);\n   * @fires <b>If retrieval of fallback audio stream is successful:</b> <br/> - {@link SkylinkEvents.event:mediaAccessSuccess|mediaAccessSuccessEvent} with parameter payload <code>isScreensharing=false</code> and <code>isAudioFallback=false</code> if initial retrieval is successful.\n   * @fires <b>If initial retrieval is unsuccessful:</b> <br/> Fallback to retrieve audio only stream is triggered (configured in {@link initOptions} <code>audioFallback</code>) <br/>&emsp; - {@link SkylinkEvents.event:mediaAccessFallback|mediaAccessFallbackEvent} with parameter payload <code>state=FALLBACKING</code>, <code>isScreensharing=false</code> and <code>isAudioFallback=true</code> and <code>options.video=true</code> and <code>options.audio=true</code>. <br/> No fallback to retrieve audio only stream <br/> - {@link SkylinkEvents.event:mediaAccessError|mediaAccessErrorEvent} with parameter payload <code>isScreensharing=false</code> and <code>isAudioFallbackError=false</code>.\n   * @fires <b>If retrieval of fallback audio stream is successful:</b> <br/> - {@link SkylinkEvents.event:mediaAccessSuccess|mediaAccessSuccessEvent} with parameter payload <code>isScreensharing=false</code> and <code>isAudioFallback=true</code>.\n   * @fires <b>If retrieval of fallback audio stream is unsuccessful:</b> <br/> - {@link SkylinkEvents.event:mediaAccessFallback|mediaAccessFallbackEvent} with parameter payload <code>state=ERROR</code>, <code>isScreensharing=false</code> and <code>isAudioFallback=true</code>. <br/> - {@link SkylinkEvents.event:mediaAccessError|mediaAccessErrorEvent} with parameter payload <code>isScreensharing=false</code> and <code>isAudioFallbackError=true</code>.\n   * @alias Skylink#getUserMedia\n   * @since 0.5.6\n   */\n  // eslint-disable-next-line consistent-return\n  getUserMedia(roomName = null, options) {\n    if (!roomName) {\n      return statelessGetUserMedia(options);\n    }\n\n    if (isAString(roomName)) {\n      const roomState = getRoomStateByName(roomName);\n      if (roomState) {\n        return MediaStream.getUserMediaLayer(roomState, options);\n      }\n    } else if (isAObj(roomName)) {\n      return statelessGetUserMedia(roomName);\n    }\n  }\n\n  /**\n   * @description Method that stops the {@link Skylink#getUserMedia} stream that is called without roomName param or before {@link Skylink#joinRoom|joinRoom} is called.\n   * @param {MediaStream} stream - The prefetched stream.\n   * @return {null}\n   * @fires {@link SkylinkEvents.event:streamEnded|streamEndedEvent}\n   * @alias Skylink#stopPrefetchedStream\n   * @since 2.0\n   * @ignore\n   */\n  stopPrefetchedStream(stream) {\n    if (stream) {\n      stream.getTracks().forEach((track) => {\n        track.stop();\n      });\n\n      dispatchEvent(streamEnded({\n        room: null,\n        peerId: null,\n        peerInfo: null,\n        isSelf: true,\n        isScreensharing: false,\n        streamId: stream.id,\n      }));\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that stops the screen share stream returned from {@link Skylink#shareScreen|shareScreen} method.\n   * @param {String} roomName - The room name.\n   * @return {null}\n   * @example\n   * Example 1\n   *\n   * skylink.stopScreen(roomName);\n   *\n   * @fires {@link SkylinkEvents.event:mediaAccessStopped|mediaAccessStoppedEvent} with parameter payload <code>isScreensharing</code> value as <code>true</code> and <code>isAudioFallback</code> value as <code>false</code> if there is a screen stream\n   * @fires {@link SkylinkEvents.event:streamEnded|streamEndedEvent} with parameter payload <code>isSelf</code> value as <code>true</code> and <code>isScreensharing</code> value as <code>true</code> if user is in the room\n   * @fires {@link SkylinkEvents.event:peerUpdated|peerUpdatedEvent} with parameter payload <code>isSelf</code> value as <code>true</code>\n   * @fires {@link SkylinkEvents.event:onIncomingStream|onIncomingStreamEvent} with parameter payload <code>isSelf</code> value as <code>true</code> and <code>stream</code> as {@link Skylink#getUserMedia} stream</a> if there is an existing <code>userMedia</code> stream\n   * @alias Skylink#stopScreen\n   * @since 0.6.0\n   */\n  stopScreen(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      const screenSharing = new ScreenSharing(roomState);\n      screenSharing.stop();\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that stops the <code>userMedia</code> stream returned from {@link Skylink#getUserMedia|getUserMedia}</a> method.\n   * @param {String} roomName - The room name.\n   * @param {String} streamId - The stream id of the stream to stop. If streamId is not set, all <code>userMedia</code> streams will be stopped.\n   * @return {Promise}\n   * @example\n   * skylink.stopStreams(roomName)\n   * .then(() => // do some thing);\n   * @fires {@link SkylinkEvents.event:mediaAccessStopped|mediaAccessStoppedEvent} with parameter payload <code>isSelf=true</code> and <code>isScreensharing=false</code> if there is a <code>getUserMedia</code> stream.\n   * @fires {@link SkylinkEvents.event:streamEnded|streamEndedEvent} with parameter payload <code>isSelf=true</code> and <code>isScreensharing=false</code> if there is a <code>getUserMedia</code> stream and user is in a room.\n   * @fires {@link SkylinkEvents.event:peerUpdated|peerUpdatedEvent} with parameter payload <code>isSelf=true</code>.\n   * @alias Skylink#stopStreams\n   * @since 0.5.6\n   */\n  stopStreams(roomName, streamId) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return MediaStream.stopStreams(roomState, streamId);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that stops the room session.\n   * @param {String} roomName  - The room name to leave.\n   * @return {Promise.<String>}\n   * @example\n   * Example 1:\n   *\n   * // add event listener to catch peerLeft events when remote peer leaves room\n   * SkylinkEventManager.addEventListener(SkylinkConstants.EVENTS.PEER_LEFT, (evt) => {\n   *    const { detail } = evt;\n   *   // handle remote peer left\n   * });\n   *\n   * skylink.leaveRoom(roomName)\n   * .then((roomName) => {\n   *   // handle local peer left\n   * })\n   * .catch((error) => // handle error);\n   * @fires {@link SkylinkEvents.event:peerLeft|peerLeft} on the remote end of the connection.\n   * @alias Skylink#leaveRoom\n   * @since 0.5.5\n   */\n  leaveRoom(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return Room.leaveRoom(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that stops all room sessions.\n   * @return {Promise.<Array.<String>>}\n   * @alias Skylink#leaveAllRooms\n   * @since 2.0.0\n   */\n  leaveAllRooms() {\n    return Room.leaveAllRooms();\n  }\n\n  /**\n   * @description Method that starts a recording session.\n   * <blockquote class=\"info\">\n   *   Note that this feature requires MCU and recording to be enabled for the App Key provided in\n   *   {@link initOptions}. If recording feature is not available to\n   *   be enabled in the {@link https://console.temasys.io|Temasys Developer Console}, please contact us on our support portal {@link http://support.temasys.io|here}.\n   * </blockquote>\n   * @param {String} roomName - The room name.\n   * @return {Promise<String>} recordingId - The recording session id.\n   * @example\n   * Example 1: Start a recording session\n   *\n   * skylink.startRecording(roomName)\n   * .then(recordingId => {\n   *   // do something\n   * })\n   * .catch(error => {\n   *   // handle error\n   * });\n   * @fires {@link SkylinkEvents.recordingState|recordingStateEvent} with payload <code>state=START</code> if recording has started successfully.\n   * @fires {@link SkylinkEvents.recordingState|recordingStateEvent} with payload <code>error</code> if an error occurred during recording.\n   * @alias Skylink#startRecording\n   * @since 0.6.16\n   */\n  startRecording(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return Recording.start(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that stops a recording session.\n   * <blockquote class=\"info\">\n   *   <ul>\n   *     <li>\n   *      Note that this feature requires MCU and recording to be enabled for the App Key provided in the\n   *      {@link initOptions}. If recording feature is not available to be enabled in the {@link https://console.temasys.io|Temasys Developer Console},\n   *      please contact us on our support portal {@link http://support.temasys.io|here}.\n   *    </li>\n   *    <li>\n   *      It is mandatory for the recording session to have elapsed for more than 4 minutes before calling <code>stopRecording</code> method.\n   *    </li>\n   *   </ul>\n   * </blockquote>\n   * @param {String} roomName - The room name.\n   * @return {Promise<String>} recordingId - The recording session id.\n   * @example\n   * Example 1: Stop the recording session\n   *\n   * skylink.stopRecording(roomName)\n   * .then(recordingId => {\n   *   // do something\n   * })\n   * .catch(error => {\n   *   // handle error\n   * });\n   * @fires {@link SkylinkEvents.recordingState|recordingStateEvent} with payload <code>state=STOP</code> if recording has stopped successfully.\n   * @fires {@link SkylinkEvents.recordingState|recordingStateEvent} with payload <code>error</code> if an error occurred during recording.\n   * @alias Skylink#stopRecording\n   * @since 0.6.16\n   */\n  stopRecording(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return Recording.stop(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that locks a room.\n   * @param {String} roomName - The room name.\n   * @return {Boolean}\n   * @fires {@link SkylinkEvents.event:roomLock|roomLockEvent} with payload parameters <code>isLocked=true</code> when the room is successfully locked.\n   * @example\n   * // add event listener to listen for room locked state when peer tries to join a locked room\n   * skylinkEventManager.addEventListener(SkylinkEvents.SYSTEM_ACTION, (evt) => {\n   *   const { detail } = evt;\n   *   if (detail.reason === SkylinkConstants.SYSTEM_ACTION.LOCKED') {\n   *     // handle event\n   *   }\n   * }\n   *\n   * // add event listener to listen for room locked/unlocked event after calling lockRoom method\n   * skylinkEventManager.addEventListener(SkylinkEvents.ROOM_LOCK, (evt) => {\n   *   const { detail } = evt;\n   *   if (detail.isLocked) {\n   *     // handle room lock event\n   *   } else {\n   *     // handle room unlock event\n   *   }\n   * }\n   *\n   * skylink.lockRoom(roomName);\n   * @alias Skylink#lockRoom\n   * @since 0.5.0\n   */\n  lockRoom(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return Room.lockRoom(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that unlocks a room.\n   * @param {String} roomName - The room name.\n   * @return {Boolean}\n   * @fires {@link SkylinkEvents.event:roomLock|roomLockEvent} with payload parameters <code>isLocked=false</code> when the room is successfully locked.\n   * @alias Skylink#unlockRoom\n   * @since 0.5.0\n   */\n  unlockRoom(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return Room.unlockRoom(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @typedef {Object} recordingSessions\n   * @property {Object<string, Object>} #recordingId - The recording session keyed by recording id.\n   * @property {Boolean} #recordingId.active - The flag that indicates if the recording session is currently active.\n   * @property {String} #recordingId.state - The current recording state. [Rel: {@link SkylinkConstants.RECORDING_STATE|RECORDING_STATE}]\n   * @property {String} #recordingId.startedStateTime - The recording session started DateTime in\n   *   {@link https://en.wikipedia.org/wiki/ISO_8601|ISO}.Note that this value may not be\n   *   very accurate as this value is recorded when the start event is received.\n   * @property {String} #recordingId.endedDateTime - The recording session ended DateTime in\n   *   {@link https://en.wikipedia.org/wiki/ISO_8601|ISO}.Note that this value may not be\n   *   very accurate as this value is recorded when the stop event is received.\n   *   Defined only after <code>state</code> has triggered <code>STOP</code>.\n   * @property {String} #recordingId.mixingDateTime - The recording session mixing completed DateTime in\n   *   {@link https://en.wikipedia.org/wiki/ISO_8601|ISO}.Note that this value may not be\n   *   very accurate as this value is recorded when the mixing completed event is received.\n   *   Defined only when <code>state</code> is <code>LINK</code>.\n   * @property {String} #recordingId.links - The recording session links.\n   *   Object signature matches the <code>link</code> parameter payload received in the\n   *   {@link SkylinkEvents.event:recordingState|recordingStateEvent} event.\n   * @property {Error} #recordingId.error - The recording session error.\n   *   Defined only when <code>state</code> is <code>ERROR</code>.\n   */\n  /**\n   * Gets the list of current recording sessions since user has connected to the room.\n   * @description Method that retrieves the list of recording sessions.\n   * <blockquote class=\"info\">\n   *   Note that this feature requires MCU and recording to be enabled for the App Key provided in\n   *   {@link initOptions}. If recording feature is not available to be enabled in the {@link https://console.temasys.io|Temasys Developer Console},\n   *   please contact us on our support portal {@link http://support.temasys.io|here}.\n   * </blockquote>\n   * @param {String} roomName - The room name.\n   * @return {recordingSessions|{}} The list of recording sessions.\n   * @example\n   * Example 1: Get recording sessions\n   *\n   * skylink.getRecordings(roomName);\n   * @alias Skylink#getRecordings\n   * @since 0.6.16\n   */\n  getRecordings(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return Recording.getRecordings(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that mutes both <code>userMedia</code> [{@link Skylink#getUserMedia|getUserMedia}] stream and\n   * <code>screen</code> [{@link Skylink#shareScreen|shareScreen}] stream.\n   * @param {String} roomName - The room name.\n   * @param {JSON} options - The streams muting options.\n   * @param {Boolean} [options.audioMuted=true] - The flag if all streams audio\n   *   tracks should be muted or not.\n   * @param {Boolean} [options.videoMuted=true] - The flag if all streams video\n   *   tracks should be muted or not.\n   * @param {String} [streamId] - The id of the stream to mute.\n   * @return {null}\n   * @example\n   * Example 1: Mute both audio and video tracks in all streams\n   *\n   * skylink.muteStreams(roomName, {\n   *    audioMuted: true,\n   *    videoMuted: true\n   * });\n   * @example\n   * Example 2: Mute only audio tracks in all streams\n   *\n   * skylink.muteStreams(roomName, {\n   *    audioMuted: true,\n   *    videoMuted: false\n   * });\n   * @example\n   * Example 3: Mute only video tracks in all streams\n   *\n   * skylink.muteStreams(roomName, {\n   *    audioMuted: false,\n   *    videoMuted: true\n   * });\n   * @fires <b>On local peer:</b> {@link SkylinkEvents.event:localMediaMuted|localMediaMutedEvent}, {@link SkylinkEvents.event:streamMuted|streamMuted}, {@link SkylinkEvents.event:peerUpdated|peerUpdatedEvent} with payload parameters <code>isSelf=true</code> and <code>isAudio=true</code> if a local audio stream is muted or <code>isVideo</code> if local video stream is muted.\n   * @fires <b>On remote peer:</b> {@link SkylinkEvents.event:streamMuted|streamMuted}, {@link SkylinkEvents.event:peerUpdated|peerUpdatedEvent} with with parameter payload <code>isSelf=false</code> and <code>isAudio=true</code> if a remote audio stream is muted or <code>isVideo</code> if remote video stream is muted.\n   * @alias Skylink#muteStreams\n   * @since 0.5.7\n   */\n  muteStreams(roomName, options = { audioMuted: true, videoMuted: true }, streamId) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return MediaStream.muteStreams(roomState, options, streamId);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that starts a RTMP session. [Beta]\n   * <blockquote class=\"info\">\n   *   Note that this feature requires MCU to be enabled for the App Key provided in the\n   *   {@link initOptions}.\n   * </blockquote>\n   * @param {String} roomName - The room name.\n   * @param {String} streamId - The stream id to live stream for the session.\n   * @param {String} endpoint - The RTMP endpoint.\n   * @return {Promise<String>} rtmpId - The RTMP session id.\n   * @example\n   * Example 1: Start a rtmp session\n   *\n   * skylink.startRTMPSession(roomName, streamId, endpoint)\n   * .then(rtmpId => {\n   *   // do something\n   * })\n   * .catch(error => {\n   *   // handle error\n   * });\n   * @fires {@link SkylinkEvents.event:rtmpState|rtmpStateEvent} with parameter payload <code>state=START</code>.\n   * @alias Skylink#startRTMPSession\n   * @since 0.6.36\n   */\n  startRTMPSession(roomName, streamId, endpoint) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return RTMP.startSession(roomState, streamId, endpoint);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that stops a RTMP session. [Beta]\n   * <blockquote class=\"info\">\n   *   Note that this feature requires MCU to be enabled for the App Key provided in {@link initOptions}.\n   * </blockquote>\n   * @param {String} roomName - The room name.\n   * @param {String} rtmpId - The RTMP session id.\n   * @return {Promise<String>}\n   * @example\n   * Example 1: Stop rtmp session\n   *\n   * skylink.stopRTMPSession(roomName, rtmpId)\n   * .then(rtmpId => {\n   *   // do something\n   * })\n   * .catch(error => {\n   *   // handle error\n   * });\n   * @fires {@link SkylinkEvents.event:rtmpState|rtmpStateEvent} with parameter payload <code>state=STOP</code>.\n   * @alias Skylink#stopRTMPSession\n   * @since 0.6.36\n   */\n  stopRTMPSession(roomName, rtmpId) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return RTMP.stopSession(roomState, rtmpId);\n    }\n    return null;\n  }\n\n  /**\n     * @typedef {Object} streamSources\n     * @property {Object} audio - The list of audio input (microphone) and output (speakers) sources.\n     * @property {Array.<Object>} audio.input - The list of audio input (microphone) sources.\n     * @property {String} audio.input.deviceId The audio input source item device id.\n     * @property {String} audio.input.label The audio input source item device label name.\n     * @property {String} [audio.input.groupId] The audio input source item device physical device id.\n     * Note that there can be different <code>deviceId</code> due to differing sources but can share a\n     * <code>groupId</code> because it's the same device.\n     * @property {Array.<Object>} audio.output - The list of audio output (speakers) sources.\n     * Object signature matches <code>audio.input</code> format.\n     * @property {Object} video - The list of video input (camera) sources.\n     * @property {Array.<Object>} video.input - The list of video input (camera) sources.\n     * Object signature matches <code>audio.input</code> format.\n     */\n  /**\n   * @description Method that returns the camera and microphone sources.\n   * @return {Promise.<streamSources>} outputSources\n   * @alias Skylink#getStreamSources\n   */\n  getStreamSources() {\n    return MediaStream.getStreamSources();\n  }\n\n  /**\n   * @description Method that sends a new <code>userMedia</code> stream to all connected peers in a room.\n   * <p>Resolves with an array of <code>MediaStreams</code>. First item in array is <code>MediaStream</code> of kind audio and second item is\n   * <code>MediaStream</code> of kind video.</p>\n   * @param {String} roomName - The room name.\n   * @param {JSON|MediaStream} options - The {@link Skylink#getUserMedia|getUserMedia} <code>options</code> parameter settings. The MediaStream to send to the remote peer.\n   * - When provided as a <code>MediaStream</code> object, this configures the <code>options.audio</code> and\n   *   <code>options.video</code> based on the tracks available in the <code>MediaStream</code> object.\n   *   Object signature matches the <code>options</code> parameter in the\n   *   <code>getUserMedia</code> method</a>.\n   * @return {Promise.<MediaStreams>}\n   * @example\n   * Example 1: Send new MediaStream with audio and video\n   *\n   * let sendStream = (roomName) => {\n   * const options = { audio: true, video: true };\n   *\n   * // Add listener to incomingStream event\n   * SkylinkEventManager.addEventListener(SkylinkConstants.EVENTS.ON_INCOMING_STREAM, (evt) => {\n   *   const { detail } = evt;\n   *   window.attachMediaStream(localVideoEl, detail.stream);\n   * })\n   *\n   * skylink.sendStream(roomName, options)\n   *  // streams can also be obtained from resolved promise\n   *  .then((streams) => {\n   *        if (streams[0]) {\n   *          window.attachMediaStream(audioEl, streams[0]); // first item in array is an audio stream\n   *        }\n   *        if (streams[1]) {\n   *          window.attachMediaStream(videoEl, streams[1]); // second item in array is a video stream\n   *        }\n   *    })\n   *   .catch((error) => { console.error(error) });\n   * }\n   *\n   * Example 2: Use pre-fetched media streams\n   *\n   * const prefetchedStreams = null;\n   * skylink.getUserMedia(null, {\n   *    audio: { stereo: true },\n   *    video: true,\n   *    })\n   *    .then((streams) => {\n   *      prefetchedStream = streams\n   * });\n   *\n   * skylink.sendStream(roomName, prefetchedStreams)\n   *   .catch((error) => { console.error(error) });\n   * }\n   *\n   * @fires {@link SkylinkEvents.event:mediaAccessSuccess} with parameter payload <code>isScreensharing=false</code> and\n   * <code>isAudioFallback=false</code> if <code>userMedia</code> <code>options</code> is passed into\n   * <code>sendStream</code> method.\n   * @fires {@link SkylinkEvents.event:onIncomingStream} with parameter payload <code>isSelf=true</code> and\n   * <code>stream</code> as <code>userMedia</code> stream.\n   * @fires {@link SkylinkEvents.event:peerUpdated} with parameter payload <code>isSelf=true</code>.\n   * @alias Skylink#sendStream\n   * @since 0.5.6\n   */\n  sendStream(roomName, options) {\n    const roomState = getRoomStateByName(roomName);\n\n    return MediaStream.sendStream(roomState, options);\n  }\n\n  /**\n   * @typedef {Object} screenSources - The list of screensharing media sources and screen sources.\n   * @property {Array.<String>} mediaSource - The screensharing media source item.\n   * @property {Array.<Object>} mediaSourceInput - The list of specific media source screen inputs.\n   * @property {String} mediaSourceInput.sourceId - The screen input item id.\n   * @property {Object} mediaSourceInput.label - The screen input item label name.\n   * @property {Object} mediaSourceInput.mediaSource - The screen input item media source it belongs to.\n   */\n  /**\n   * @description Method that returns the screensharing sources.\n   * @return {Promise.<screenSources>}\n   * @alias Skylink#getScreenSources\n   * @since 2.0.0\n   */\n  getScreenSources() {\n    return MediaStream.getScreenSources();\n  }\n\n  /**\n   * @typedef {Object} streamList\n   * @property {Object.<string, MediaStream>|null} userMedia - The user media streams keyed by stream id.\n   * @property {MediaStream|null} screenshare - The screenshare stream.\n   */\n  /**\n   * @description Method that returns all active user streams including screenshare stream if present.\n   * @param {String} roomName - The room name.\n   * @return {streamList|null}\n   * @alias Skylink#getStreams\n   * @since 2.0.0\n   */\n  getStreams(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    if (roomState) {\n      return MediaStream.getStreams(roomState);\n    }\n\n    return null;\n  }\n\n  /**\n   * @description Method that generates an <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\">UUID</a> (Unique ID).\n   * @return {String} Returns a generated UUID (Unique ID).\n   * @alias Skylink#generateUUID\n   * @since 0.5.9\n   */\n  generateUUID() {\n    return generateUUID();\n  }\n\n  /**\n   * @description Method that stores a secret and secret id pair used for encrypting and decrypting messages.\n   * @param {String} roomName - The room name.\n   * @param {String} secret - A secret to use for encrypting and decrypting messages.\n   * @param {String} secretId - The id of the secret.\n   * @alias Skylink#setEncryptSecret\n   * @since 2.0.0\n   */\n  setEncryptSecret(roomName = '', secret = '', secretId = '') {\n    const roomState = getRoomStateByName(roomName);\n    const encryption = new EncryptedMessaging(roomState);\n    return encryption.setEncryptSecret(secret, secretId);\n  }\n\n  /**\n   * @description Method that returns all the secret and secret id pairs.\n   * @param {String} roomName - The room name.\n   * @returns {Object|{}}\n   * @alias Skylink#getEncryptSecrets\n   * @since 2.0.0\n   */\n  getEncryptSecrets(roomName = '') {\n    const roomState = getRoomStateByName(roomName);\n    const encryption = new EncryptedMessaging(roomState);\n    return encryption.getEncryptSecrets();\n  }\n\n  /**\n   * @description Method that deletes an encrypt secret.\n   * @param {String} roomName - The room name.\n   * @param {String} [secretId] - The id of the secret to be deleted. If no secret id is provided, all secrets will be deleted.\n   * @alias Skylink#deleteEncryptSecrets\n   * @since 2.0.0\n   */\n  deleteEncryptSecrets(roomName = '', secretId = '') {\n    const roomState = getRoomStateByName(roomName);\n    const encryption = new EncryptedMessaging(roomState);\n    return encryption.deleteEncryptSecrets(secretId);\n  }\n\n  /**\n   * @description Method that sets the secret to be used in encrypting and decrypting messages.\n   * @param {String} roomName - The room name.\n   * @param {String} secretId - The id of the secret to be used for encrypting and decrypting messages.\n   * @alias Skylink#setSelectedSecret\n   * @since 2.0.0\n   */\n  setSelectedSecret(roomName = '', secretId = '') {\n    const roomState = getRoomStateByName(roomName);\n    const encryption = new EncryptedMessaging(roomState);\n    encryption.setSelectedSecretId(secretId);\n  }\n\n  /**\n   * @description Method that returns the secret used in encrypting and decrypting messages.\n   * @param {String} roomName - The room name.\n   * @param {String} secretId - The id of the secret.\n   * @returns {String} secret - The secret used for encrypting and decrypting messages.\n   * @alias Skylink#getSelectedSecret\n   * @since 2.0.0\n   */\n  getSelectedSecret(roomName, secretId) {\n    const roomState = getRoomStateByName(roomName);\n    const encryption = new EncryptedMessaging(roomState);\n    return encryption.getSelectedSecretId(secretId);\n  }\n\n  /**\n   * @description Method that overrides the persistent message feature configured at the key level.\n   * <blockquote class=\"info\">\n   *   Note that to set message persistence at the app level, the persistent message feature MUST be enabled at the key level in the Temasys\n   *   Developers Console. Messages will also only be persisted if the messages are encrypted, are public messages and, are sent via the signaling\n   *   server using the [{@link Skylink#sendMessage|sendMessage}] method.\n   * </blockquote>\n   * @param {String} roomName - The room name.\n   * @param {Boolean} isPersistent - The flag if messages should be persisted.\n   */\n  setMessagePersistence(roomName, isPersistent) {\n    const roomState = getRoomStateByName(roomName);\n    const asyncMessaging = new AsyncMessaging(roomState);\n    return asyncMessaging.setMessagePersistence(isPersistent);\n  }\n\n  /**\n   * @description Method that retrieves the persistent message feature configured.\n   * @param {String} roomName - The room name.\n   * @returns {Boolean} isPersistent\n   */\n  getMessagePersistence(roomName) {\n    const roomState = getRoomStateByName(roomName);\n    const asyncMessaging = new AsyncMessaging(roomState);\n    return asyncMessaging.getMessagePersistence();\n  }\n}\n\nexport default SkylinkPublicInterface;\n","/**\n * @description Exports {@link Skylink}, {@link SkylinkLogger} and {@link SkylinkConstants}\n * */\nimport io from 'socket.io-client';\nimport AdapterJS from './adapter';\nimport SkylinkStates from './skylink-states';\nimport SkylinkPublicInterface from './public/index';\nimport SkylinkLogger from './logger/index';\nimport SkylinkEventManager from './utils/skylinkEventManager';\nimport * as constants from './constants';\nimport messages from './messages';\nimport { SkylinkAPIServer } from './server-communication';\n\n/**\n * @description AdapterJS provides polyfills and cross-browser mediaStreamHelpers for WebRTC.\n * @see {@link https://github.com/Temasys/AdapterJS}\n * @global\n */\nwindow.AdapterJS = AdapterJS;\n/**\n * @description Socket.IO enables real-time, bidirectional and event-based communication. It works on every platform, browser or device, focusing equally on reliability and speed.\n * @see {@link https://socket.io/}\n * @global\n */\nwindow.io = io;\n\n/**\n * @description State manager for accessing SkylinkJS states.\n * @type {SkylinkStates}\n * @private\n */\nconst skylinkStates = new SkylinkStates();\n\n/**\n * @description Stores options passed into init.\n * @type {initOptions}\n * @private\n */\nlet initOptions = {};\nlet userInitOptions = {};\n\nconst SkylinkEvents = constants.EVENTS;\n\n/**\n * @classdesc Class representing a SkylinkJS instance.\n * @example\n * import Skylink from 'skylinkjs';\n *\n * const initOptions = {\n *    // Obtain your app key from {@link https://console.temasys.io}\n *    appKey: 'temasys-appKey-XXXXX-XXXXXX',\n *    defaultRoom: \"Default_Room\",\n * };\n *\n * const skylink = new Skylink(initOptions);\n */\nclass Skylink extends SkylinkPublicInterface {\n  /**\n   * @description Creates a SkylinkJS instance.\n   * @param {initOptions} options - Skylink authentication and initialisation configuration options.\n   * @private\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @description Init options passed to API server to set certain values.\n     * @type {initOptions}\n     * @private\n     */\n    const parsedOptions = new SkylinkAPIServer().init(options);\n\n    Skylink.setInitOptions(parsedOptions);\n  }\n\n  /**\n   * @description Method that retrieves the Skylink state.\n   * @param {SkylinkRoom.id} roomKey - The id/key of the room.\n   * @return {SkylinkState| Object}\n   * @private\n   */\n  static getSkylinkState(roomKey = null) {\n    if (roomKey) {\n      return skylinkStates.getState(roomKey);\n    }\n    return skylinkStates.getAllStates();\n  }\n\n  /**\n   * @description Method that sets the Skylink state keyed by room id.\n   * @param {SkylinkState} state\n   * @param {SkylinkRoom.id} roomKey - The id/key of the room.\n   * @private\n   */\n  static setSkylinkState(state, roomKey) {\n    if (roomKey) {\n      skylinkStates.setState(state);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  static removeSkylinkState(roomKey) {\n    if (roomKey) {\n      return skylinkStates.removeStateByRoomId(roomKey);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  static clearRoomStateFromSingletons(roomKey) {\n    if (roomKey) {\n      return skylinkStates.clearRoomStateFromSingletons(roomKey);\n    }\n  }\n\n  /**\n   * @description Method that retrieves the complete initOptions values (default + user specified).\n   * @return {initOptions}\n   * @private\n   */\n  static getInitOptions() {\n    return initOptions;\n  }\n\n  /**\n   * @description Method that stores the complete initOptions values (default + user specified).\n   * @param {initOptions} options\n   * @private\n   */\n  static setInitOptions(options) {\n    initOptions = options;\n  }\n\n  /**\n   * @description Method that stores the initOptions specified by the user.\n   * @param {initOptions} options\n   * @private\n   */\n  static setUserInitOptions(options) {\n    userInitOptions = options;\n  }\n\n  /**\n   * @description Method that retrieves the initOptions specified by the user.\n   * @private\n   */\n  static getUserInitOptions() {\n    return userInitOptions;\n  }\n\n  /**\n   * @description Logs an error when Skylink state is not found for a roomKey.\n   * @param {String} keyOrName - The id/key of the room or the room name.\n   * @private\n   */\n  static logNoRoomState(keyOrName) {\n    SkylinkLogger.log.ERROR(`${messages.ROOM_STATE.NOT_FOUND} - ${keyOrName}`);\n  }\n}\n\nexport default Skylink;\nexport {\n  SkylinkLogger,\n  SkylinkEventManager,\n  SkylinkEvents,\n  constants as SkylinkConstants,\n};\n"],"sourceRoot":""}